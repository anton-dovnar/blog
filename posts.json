[
{"title": "Configuring Python 3, Pyramid and Gunicorn on Ubuntu 16.04", "body": "<div class=\"c9\">\n<p><a href=\"/ubuntu.html\">Canonical's Ubuntu 16.04 Long Term Support (LTS)</a> Linux\n<a href=\"/operating-systems.html\">operating system</a>, also known as \"Xenial Xerus\",\nwas released in April 2016. It is the first Ubuntu release to include\n<a href=\"/python-2-or-3.html\">Python 3</a> instead of Python 2 as its default Python\ninstallation.</p>\n<p>The <a href=\"/pyramid.html\">Pyramid</a> web framework has long supported Python 3.\nWith just a few short steps we can start a new <a href=\"/pyramid.html\">Pyramid</a>\nproject and run it with\n<a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> on Ubuntu 16.04.</p>\n<h2>Required Tools</h2>\n<p>Our project requires Ubuntu 16.04 plus several code libraries. You do not\nneed to install these tools yet - we will get to them in turn as the\nwalkthrough progresses. Our requirements and their current versions are:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04 LTS (Xenial Xerus)</a></li>\n<li><a href=\"/why-use-python.html\">Python version 3.5</a> (default in Ubuntu 16.04)</li>\n<li><a href=\"/pyramid.html\">Pyramid web framework</a> version\n<a href=\"http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/\">1.7</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.6</a></li>\n<li><a href=\"http://docs.pylonsproject.org/projects/waitress/en/latest/\">Waitress</a>\nversion 0.9.0</li>\n</ul>\n<p>If you are developing on Mac OS X or Windows, you can use\nvirtualization software such\nas <a href=\"https://www.parallels.com/products/desktop/\">Parallels</a> or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu .iso file</a>. Either the amd64 or\ni386 version of 16.04 is fine. While creating this I used the amd64 version. </p>\n<p>A desktop screen like this one appears when you boot up Ubuntu.</p>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/ubuntu-desktop.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Open a new terminal window so we can be ready to install required system\npackages.</p>\n<h2>Install System Packages</h2>\n<p>The precise Python version can be shown using the <code>python</code> command with the\n<code>--version</code> argument.</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\n</pre></div>\n<p>We can also view where the <code>python3</code> program is installed on Ubuntu using the\n<code>which</code> command.</p>\n<div class=\"highlight\"><pre><span></span>which python3\n</pre></div>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/which-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Ubuntu requires a few system packages before we can properly install Pyramid\nand Gunicorn. When we run the <code>apt</code> command to install system packages we\nwill be prompted for the superuser password. Restricted system access is\nnecessary to modify files within the system folders.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install python3-dev\n</pre></div>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/install-packages.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Press <code>y</code> then return to let the system package installation run.</p>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/packages-installed.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The required system packages are installed. We can now install the\nPython-specific dependencies.</p>\n<h2>Set up a virtual environment</h2>\n<p>Create a directory for the virtual environments. Then create a new virtual environment.</p>\n<div class=\"highlight\"><pre><span></span># the tilde \"~\" specifies the user's home directory, like /home/matt\ncd ~\nmkdir venvs\n# specify the system python3 installation\n/usr/bin/python3 -m venv venvs/pyramidproj\n</pre></div>\n<p>Activate the virtual environment.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/pyramidproj/bin/activate\n</pre></div>\n<p>Our prompt will change after we properly activate the virtual environment to\nsomething like <code>(pyramidproj) <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"e18c809595a19483948f9594\">[email\u00a0protected]</a>:~$</code>.</p>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/venv-activated.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our virtual environment is activated with Python 3.</p>\n<p>We should update pip and venv to the latest versions in our virtual environment.</p>\n<div class=\"highlight\"><pre><span></span>pip install --upgrade pip setuptools\n</pre></div>\n<p>We can install whatever dependencies we want, in our case Pyramid and Gunicorn. </p>\n<h2>Install Python Packages</h2>\n<p>We can install Pyramid, Gunicorn and Waitress into our virtual environment using\nthe <code>pip</code> command.</p>\n<div class=\"highlight\"><pre><span></span>pip install pip install \"pyramid==1.7\" gunicorn waitress\n</pre></div>\n<p>No errors like we see in the following screenshot is a good sign.</p>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/good-sign.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Pyramid comes with a project starter template creation tool named <code>pcreate</code>.\nRun <code>pcreate</code> to generate the boilerplate for a new Pyramid project named\n\"pyramidproj\".</p>\n<div class=\"highlight\"><pre><span></span>pcreate -s starter pyramidproj\n</pre></div>\n<p>Use the <code>cd</code> (change directory) command to move into the new folder.</p>\n<div class=\"highlight\"><pre><span></span>cd ~/pyramidproj\n</pre></div>\n<p>A slew of new files have been created within the \"pyramidproj\" directory.\nThese are the basic files you can customize for the web application you want\nto build. A good resource for understanding and modifying these files is\nto follow the\n<a href=\"http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/quick_tutorial/index.html\">quick tutorial for Pyramid</a>.</p>\n<p>For now, we just want to use Gunicorn to run our starter pyramidproj app.\nInstall pyramidproj into your virtual environment using the <code>python</code> command on\n<code>setup.py</code>.</p>\n<div class=\"highlight\"><pre><span></span>python setup.py develop\n</pre></div>\n<p>Now we can run our app with Gunicorn. Pyramid is a\n<a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/api/paster.html\">paste</a>-compatible\nframework, so we use the <code>--paste</code> argument to run the WSGI server with\nthe \"development.ini\" configuration file. In addition, the <code>-b</code> argument\ntells Gunicorn which port number to bind on when the server starts.</p>\n<div class=\"highlight\"><pre><span></span>gunicorn --paste development.ini -b :8080\n</pre></div>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/gunicorn-run.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Cool, we can bring up our starter Pyramid project up in the web browser at\nthe <code>localhost:8000</code> or <code>127.0.0.1:8000</code> address.</p>\n<p><img src=\"/img/160619-ubuntu-pyramid-gunicorn/it-works.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Time to develop a full-fledged web application with <a href=\"/pyramid.html\">Pyramid</a>!</p>\n<h2>Ready to Develop with Pyramid</h2>\n<p>Now you have a simple setup to develop Pyramid web apps using Gunicorn as\nthe <a href=\"/wsgi-servers.html\">WSGI server</a> on Ubuntu 16.04. If you need a\nfull step-by-step tutorial to deploy your Python web application to a\nproduction environment, check out the\n<a href=\"http://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.</p>\n<p>To decide what to do next with your Python project, check out the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents</a> page.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160619-pyramid-gunicorn-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Make Phone Calls in Python", "body": "<div class=\"c9\">\n<p>Good old-fashioned phone calls remain one of the best forms of communication\ndespite the slew of new smartphone apps that have popped up over the past\nseveral years. With just a few lines of Python code plus a\n<a href=\"/application-programming-interfaces.html\">web application programming interface</a>\nwe can make and receive phone calls from any application. </p>\n<p>Our example calls will say a snippet of text and put all incoming callers\ninto a recorded conference call. You can modify the instructions using\n<a href=\"https://www.twilio.com/docs/api/twiml\">Twilio's TwiML verbs</a> when you\nperform different actions in your own application's phone calls.</p>\n<h2>Our Tools</h2>\n<p>You should have either <a href=\"/python-2-or-3.html\">Python 2 or 3</a> installed to\nbuild this application. Throughout the post we will also use:</p>\n<ul>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li>A free <a href=\"https://www.twilio.com/try-twilio\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/making-calls\">phone calling web API</a></li>\n<li>Twilio's\n<a href=\"https://www.twilio.com/docs/libraries/python\">Python helper library</a>,\nversion 5.7.0, which is\n<a href=\"https://pypi.org/project/twilio\">available on PyPI</a></li>\n</ul>\n<p>You can snag all the open source code for this tutorial in the\n<a href=\"https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls\">python-twilio-example-apps</a>\nGitHub repository under the\n<a href=\"https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls\">no-framework/phone-calls</a> directory.\nUse and copy the code for your own applications. Everything in that\nrepository and in this blog post are open source under the MIT license.</p>\n<h2>Install App Dependencies</h2>\n<p>Our application will use the <a href=\"/twilio.html\">Twilio</a>\n<a href=\"https://www.twilio.com/docs/libraries/python\">Python helper library</a>\nto create an HTTP POST request to Twilio's API. The Twilio helper library is\ninstallable from <a href=\"https://pypi.python.org/pypi\">PyPI</a> into a virtual\nenvironment. Open your terminal and use the <code>virtualenv</code> command to create\na new virtualenv:</p>\n<div class=\"highlight\"><pre><span></span>virtualenv phoneapp\n</pre></div>\n<p>Invoke the <code>activate</code> script within the virtualenv <code>bin/</code> directory to make\nthis virtualenv the active Python executable. Note that you will need to\nperform this step in every terminal window that you want the virtualenv to\nbe active.</p>\n<div class=\"highlight\"><pre><span></span>source phoneapp/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv\nto something like <code>(phoneapp) $</code>. </p>\n<p>Next use the <code>pip</code> command to install the\n<a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python</a> package\ninto the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install twilio==5.7.0\n</pre></div>\n<p>We will have the required dependency ready for project as soon as the\ninstallation script finishes. Now we can write and execute Python code to\ndial phone numbers.</p>\n<h2>Our Python Script</h2>\n<p>Create a new file named <code>phone_calls.py</code> and copy or type in the following\nlines of code.</p>\n<div class=\"highlight\"><pre><span></span>from twilio.rest import TwilioRestClient\n\n\n# Twilio phone number goes here. Grab one at https://twilio.com/try-twilio\n# and use the E.164 format, for example: \"+12025551234\"\nTWILIO_PHONE_NUMBER = \"\"\n\n# list of one or more phone numbers to dial, in \"+19732644210\" format\nDIAL_NUMBERS = [\"\",]\n\n# URL location of TwiML instructions for how to handle the phone call\nTWIML_INSTRUCTIONS_URL = \\\n  \"http://static.fullstackpython.com/phone-calls-python.xml\"\n\n# replace the placeholder values with your Account SID and Auth Token\n# found on the Twilio Console: https://www.twilio.com/console\nclient = TwilioRestClient(\"ACxxxxxxxxxx\", \"yyyyyyyyyy\")\n\n\ndef dial_numbers(numbers_list):\n    \"\"\"Dials one or more phone numbers from a Twilio phone number.\"\"\"\n    for number in numbers_list:\n        print(\"Dialing \" + number)\n        # set the method to \"GET\" from default POST because Amazon S3 only\n        # serves GET requests on files. Typically POST would be used for apps\n        client.calls.create(to=number, from_=TWILIO_PHONE_NUMBER,\n                            url=TWIML_INSTRUCTIONS_URL, method=\"GET\")\n\n\nif __name__ == \"__main__\":\n    dial_numbers(DIAL_NUMBERS)\n</pre></div>\n<p>There are a few lines that you need to modify in this application before it\nwill run. First, insert one or more phone numbers you wish to dial into the\nDIAL_NUMBERS list. Each one should be a string, separated by a comma. For\nexample, <code>DIAL_NUMBERS = [\"+12025551234\", \"+14155559876\", \"+19735551234\"]</code>.</p>\n<p>Next, <code>TWILIO_PHONE_NUMBER</code> and the Account SID and Authentication Token,\nfound on the <code>client = TwilioRestClient(\"ACxxxxxxxxxx\", \"yyyyyyyyyy\")</code>\nline, need to be set. We can get these values from the\n<a href=\"https://www.twilio.com/console\">Twilio Console</a>.</p>\n<p>In your web browser go to the\n<a href=\"https://www.twilio.com/try-twilio\">Twilio website and sign up for a free account</a>\nor sign into your existing Twilio account.</p>\n<p><img src=\"/img/161123-python-phone-calls/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Twilio sign up screen.\"></p>\n<p>Copy the Account SID and Auth Token from the Twilio Console and paste them\ninto your application's code: </p>\n<p><img src=\"/img/161123-python-phone-calls/twilio-console-tokens.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Obtain the Account SID and Auth Token from the Twilio Console.\"></p>\n<p>The Twilio trial account allows you to dial and receive phone calls to\nyour own validated phone number. To handle calls from any phone\nnumber then you need to upgrade your account (hit the upgrade button on the\ntop navigation bar). </p>\n<p>Once you are signed into your Twilio account, go to the\n<a href=\"https://www.twilio.com/console/phone-numbers\">manage phone numbers screen</a>.\nOn this screen you can\n<a href=\"https://www.twilio.com/console/phone-numbers/search\">buy one or more phone numbers</a>\nor click on an existing phone number in your account to configure it.</p>\n<p><img src=\"/img/161123-python-phone-calls/manage-numbers.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Manage phone numbers screen.\"></p>\n<p>After clicking on a number you will reach the phone number configuration\nscreen. Paste in the URL with TwiML instructions and change the dropdown from\n\"HTTP POST\" to \"HTTP GET\". In this post we'll use\n<code>http://static.fullstackpython.com/phone-calls-python.xml</code>, but that URL\ncan be more than just a static XML file. </p>\n<p><img src=\"/img/161123-python-phone-calls/twiml-url-number-screen.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Twilio phone number configuration screen.\"></p>\n<p>The power of Twilio really comes in when that URL is handled by your web\napplication so it can dynamically respond with TwiML instructions based on\nthe incoming caller number or other properties stored in your database.</p>\n<p>Under the Voice webhook, paste in\n<code>http://static.fullstackpython.com/phone-calls-python.xml</code> and change the\ndrop-down to the right from \"HTTP POST\" to \"HTTP GET\". Click the \"Save\"\nbutton at the bottom of the screen.</p>\n<p>Now try calling your phone number. You should hear the snippet of text\nread by the Alice voice and then you will be placed into a conference call.\nIf no one else calls the number then hold music should be playing.</p>\n<h2>Making Phone Calls</h2>\n<p>We just handled inbound phone calls to our phone number. Now it's time to\ndial outbound phone calls. Make sure your <code>phone_calls.py</code> file is saved\nand that your virtualenv is still activated and then execute the script:</p>\n<div class=\"highlight\"><pre><span></span>python phone_calls.py\n</pre></div>\n<p>In a moment all the phone numbers you write in the <code>DIAL_NUMBERS</code> list\nshould light up with calls. Anyone that answers will hear our message read\nby the \"Alice\" voice and then they'll be placed together into a recorded\nconference call, just like when someone dials into the number. </p>\n<p>Here is my inbound phone call:</p>\n<p><img src=\"/img/161123-python-phone-calls/inbound-call.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Receiving an incoming phone call on the iPhone.\"></p>\n<p>Not bad for just a few lines of Python code!</p>\n<h2>Next Steps</h2>\n<p>Now that we know how to make and receive phone calls from a Twilio number\nthat follows programmatic instructions we can do a whole lot more in our\napplications. Next you can use one of these tutorials to do more with\nyour phone number:</p>\n<ul>\n<li><a href=\"https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html\">Build a phone-calling Slack bot</a></li>\n<li><a href=\"https://www.twilio.com/docs/tutorials/walkthrough/masked-numbers/python/flask\">Mask phone numbers for anonymous communication</a></li>\n<li><a href=\"https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django\">Add call tracking to see metrics for phone calls</a></li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub as\n<a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/161123-make-phone-calls.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Python for Entrepreneurs", "body": "<div class=\"c9\">\n<p><a href=\"https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course\">Python for Entrepreneurs</a>\nis a new video course by the creators of\n<a href=\"https://talkpython.fm/\">Talk Python to Me</a> and\n<a href=\"https://fullstackpython.com/\">Full Stack Python</a>.</p>\n<p><em>Update</em>: The Kickstarter has been funded! Michael and I are hard\nat work on the course content. Thank you to everyone who supported\nus as a backer. The course is available in early access mode on\n<a href=\"https://training.talkpython.fm\">training.talkpython.fm</a> until it\nis fully released.</p>\n<p>We are creating this course and running a Kickstarter for it based on\nfeedback that it's still too damn difficult to turn basic Python programming\nknowledge into a business to generate income as a side or full time project.\nBoth Michael and I have been able to make that happen for ourselves and we\nwant to share every difficult lesson we've learned through this course.</p>\n<p>The Python for Entrepreneurs videos and content will dive into building\nand deploying a real-world web application, marketing it to prospective\ncustomers, handling search engine optimization, making money through credit\ncard payments, getting help from part-time contractors for niche tasks and\nscaling up to meet traffic demands.</p>\n<p>If this course hits the mark for what you want to do with Python,\n<a href=\"https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course\">check out the Kickstarter</a> - we've\nset up steep discounts for early backers.</p>\n<p>If you have any questions, please reach out to\n<a href=\"https://twitter.com/mkennedy\">Michael Kennedy</a>\nor me, <a href=\"https://twitter.com/mattmakai\">Matt Makai</a>.</p>\n</div>"},
{"title": "Creating SSH Keys on Ubuntu Linux 16.04 LTS", "body": "<div class=\"c9\">\n<p>SSH keys are a necessity for Python development when you are working with\n<a href=\"/git.html\">Git</a>, connecting to remote servers and automating your\n<a href=\"/deployment.html\">deployments</a>. Let's walk through how to generate SSH\nkey pairs, which contain both a public and a private key within a single\npair, on Ubuntu Linux.</p>\n<h2>Generating the Public and Private Keys</h2>\n<p>Open up a new terminal window in Ubuntu like we see in the following\nscreenshot.</p>\n<p><img src=\"/img/170214-ssh-keys-ubuntu/new-ubuntu-terminal.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The <code>ssh-keygen</code> command provides an interactive command line interface for\ngenerating both the public and private keys. Invoke <code>ssh-keygen</code> with the\nfollowing <code>-t</code> and <code>-b</code> arguments to ensure we get a 4096 bit RSA key.\nOptionally, you can also specify your email address with <code>-C</code> (otherwise\none will be generated off your current Linux account):</p>\n<div class=\"highlight\"><pre><span></span>ssh-keygen -o -t rsa -b <span class=\"m\">4096</span> -C <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"96fbefb8f3fbf7fffab8f7f2f2e4f3e5e5d6f5f9fbe6f7f8efb8f5f9fb\">[email\u00a0protected]</a>\n</pre></div>\n<p>(Note: the <code>-o</code> option was introduced in 2014; if this command fails for you, simply remove the <code>-o</code> option)</p>\n<p>The first prompt you will see asks where to save the key. However, there are\nactually two files that will be generated: the public key and the private\nkey. </p>\n<div class=\"highlight\"><pre><span></span>Generating public/private rsa key pair.\nEnter file in which to save the key (/home/matt/.ssh/id_rsa): \n</pre></div>\n<p>This prompt refers to the private key and whatever you enter will also\ngenerate a second file for the public key that has the same name and <code>.pub</code>\nappended.</p>\n<p>If you already have a key, you should specify a new filename. I use many\nSSH keys so I typically name them \"test-deploy\", \"prod-deploy\", \"ci-server\"\nalong with a unique project name. Naming is one of those hard computer\nscience problems, so take some time to come up with a system that works for\nyou and the development team you work with!</p>\n<p>Next you will see a prompt for an optional passphrase:</p>\n<div class=\"highlight\"><pre><span></span>Enter passphrase (empty for no passphrase):\n</pre></div>\n<p>Whether or not you want a passphrase depends on how you will use the key.\nThe system will ask you for the passphrase whenever you use the SSH key\nso it is more secure.\nHowever, if you are automating deployments with a\n<a href=\"/continuous-integration.html\">continuous integration</a> server like\n<a href=\"/jenkins.html\">Jenkins</a> then you will not want a passphrase.</p>\n<p>Be aware that it is impossible to recover a passphrase if it is lost. Keep\nthat passphrase safe and secure because otherwise a completely new key would\nhave to be generated.</p>\n<p>Enter the passphrase (or just press enter to not have a passphrase) twice.\nYou'll see some output like the following:</p>\n<div class=\"highlight\"><pre><span></span>Your identification has been saved in /home/matt/.ssh/prod_deploy.\nYour public key has been saved in /home/matt/.ssh/prod_deploy.pub.\nThe key fingerprint is:\nSHA256:xoCWgk40XfM5mruZQNCVoBKXZ4d0gn09ivVENacb7xw <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"b6dbd7c2c2f6c3d4c3d8c2c3\">[email\u00a0protected]</a>\nThe key<span class=\"err\">'</span>s randomart image is:\n+---[RSA <span class=\"m\">2048</span>]----+\n|.oo*==oo..o .    |\n|.+*.*** =  +     |\n|o+.++=.B .o      |\n|+ .o. +oo  +     |\n| . . o  S . E    |\n|  .   ..   o .   |\n|   . .      o    |\n|    . +          |\n|     +           |\n+----[SHA256]-----+\n</pre></div>\n<p>Your SSH key is now generated and ready to use!</p>\n<h2>What now?</h2>\n<p>Now that you have your public and private keys, I recommend setting\nup a <a href=\"/development-environments.html\">Python development environment</a> with\none of the following tutorials so you can start coding:</p>\n<ul>\n<li><a href=\"/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html\">Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS</a></li>\n<li><a href=\"/blog/install-redis-use-python-3-ubuntu-1604.html\">How to Use Redis with Python 3 and redis-py on Ubuntu 16.04</a></li>\n<li><a href=\"/blog/postgresql-python-3-psycopg2-ubuntu-1604.html\">Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04</a></li>\n</ul>\n<p>Additional <code>ssh-keygen</code> command resources:</p>\n<ul>\n<li><a href=\"http://manpages.ubuntu.com/manpages/xenial/man1/ssh-keygen.1.html\">ubuntu manuals ssh-keygen</a></li>\n<li><a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">Generating a new SSH key and adding it to the ssh-agent</a></li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170214-create-ssh-keys-ubuntu.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Creating SSH Keys on macOS Sierra", "body": "<div class=\"c9\">\n<p><a href=\"/deployment.html\">Deploying</a> Python applications typically requires\nSSH keys. An SSH key has both a public and a private key file. You can\nuse the private key to authenticate when syncing remote <a href=\"/git.html\">Git</a>\nrepositories, connect to remote <a href=\"/servers.html\">servers</a> and automate\nyour application's deployments via\n<a href=\"/configuration-management.html\">configuration management</a> tools like\nAnsible. Let's learn how to generate SSH key pairs on\n<a href=\"http://www.apple.com/macos/sierra/\">macOS Sierra</a>.</p>\n<h2>Generating New Keys</h2>\n<p>Bring up a new terminal window on macOS by going into Applications/Utilities\nand opening \"Terminal\".</p>\n<p><img src=\"/img/170220-ssh-keys-macos/new-terminal.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"New macOS terminal window.\"></p>\n<p>The <code>ssh-keygen</code> command provides an interactive command line interface for\ngenerating both the public and private keys. Invoke <code>ssh-keygen</code> with the\nfollowing <code>-t</code> and <code>-b</code> arguments to ensure we get a 4096 bit RSA key. Note\nthat you <em>must</em> use a key with 2048 or more bits in macOS Sierra or the\nsystem will not allow you to connect to servers with it.</p>\n<p>Optionally, you can also specify your email address with <code>-C</code> (otherwise\none will be generated off your current macOS account):</p>\n<div class=\"highlight\"><pre><span></span>ssh-keygen -t rsa -b <span class=\"m\">4096</span> -C <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"fa9783d49f979b9396d49b9e9e889f8989ba9995978a9b9483d4999597\">[email\u00a0protected]</a>\n</pre></div>\n<p>The first prompt you will see asks where to save the key. However, there are\nactually two files that will be generated: the public key and the private\nkey. </p>\n<div class=\"highlight\"><pre><span></span>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/matt/.ssh/id_rsa):\n</pre></div>\n<p>This prompt refers to the private key and whatever you enter will also\ngenerate a second file for the public key that has the same name and <code>.pub</code>\nappended.</p>\n<p>If you already have a key then specify a new filename. I use many\nSSH keys so I oftne name them \"test-deploy\", \"prod-deploy\", \"ci-server\"\nalong with a unique project name. Naming is one of those hard computer\nscience problems, so take some time to come up with a system that works for\nyou!</p>\n<p>Next you will see a prompt for an optional passphrase:</p>\n<div class=\"highlight\"><pre><span></span>Enter passphrase (empty for no passphrase):\n</pre></div>\n<p>Whether or not you want a passphrase depends on how you will use the key.\nThe system will ask you for the passphrase whenever you use the SSH key,\nalthough\n<a href=\"http://apple.stackexchange.com/questions/254468/macos-sierra-doesn-t-seem-to-remember-ssh-keys-between-reboots\">macOS can store the passphrase in your system Keychain</a>\nafter the first time you enter it. However, if you are automating deployments\nwith a <a href=\"/continuous-integration.html\">continuous integration</a> server like\n<a href=\"/jenkins.html\">Jenkins</a> then you will not want a passphrase.</p>\n<p>Note that it is impossible to recover a passphrase if it is lost. Keep\nthat passphrase safe and secure because otherwise a completely new key would\nhave to be generated.</p>\n<p>Enter the passphrase (or just press enter to not have a passphrase) twice.\nYou'll see some output like the following:</p>\n<div class=\"highlight\"><pre><span></span>Enter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /Users/matt/.ssh/deploy_prod.\nYour public key has been saved in /Users/matt/.ssh/deploy_prod.pub.\nThe key fingerprint is:\nSHA256:UnRGH/nzYzxUFS9jjd0wOl1ScFGKgW3pU60sSxGnyHo <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"fd909c898995988ad3909c969c94bd9a909c9491d39e9290\">[email\u00a0protected]</a>\nThe key<span class=\"err\">'</span>s randomart image is:\n+---[RSA <span class=\"m\">4096</span>]----+\n|        ..+o++**@|\n|       . +.o*<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"85caabc5\">[email\u00a0protected]</a>=|\n|        . oo*=B.*|\n|       . .  =<span class=\"nv\">o</span>=+ |\n|      . S E. +oo |\n|       . .  .  =.|\n|              . o|\n|                 |\n|                 |\n+----[SHA256]-----+\n</pre></div>\n<p>Your SSH key is ready to use!</p>\n<h2>What now?</h2>\n<p>Now that you have your public and private keys, I recommend building and\ndeploying some <a href=\"/web-development.html\">Python web apps</a> such as:</p>\n<ul>\n<li><a href=\"/blog/build-first-slack-bot-python.html\">Building your first Slack bot</a></li>\n<li><a href=\"/blog/send-mms-picture-messages-python.html\">Sending picture or video messages via a REST API</a></li>\n<li><a href=\"/blog/dial-outbound-phone-calls-python-bottle.html\">Dialing outbound phone calls</a>\nwith the <a href=\"/bottle.html\">Bottle</a> web framework</li>\n</ul>\n<p>Additional <code>ssh-keygen</code> command resources:</p>\n<ul>\n<li><a href=\"https://testequals.com/2016/09/09/macos-sierra-10-12-ssh-keys/\">SSH keys on macOS Sierra</a></li>\n<li><a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">Generating a new SSH key and adding it to the ssh-agent</a></li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170220-create-ssh-keys-macos.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Choose the Right DevOps Tools for You and Your Team", "body": "<div class=\"c9\">\n<p>This blog post contains a loose transcript along with the slides and\nadditional resources from my technical talk that will be given at <a href=\"https://www.meetup.com/DC-continuous-delivery/\">DC Continuous Delivery</a>\nwithin the next couple of months.</p>\n<p>Additional resources to learn more about <a href=\"/deployments.html\">deployments</a>,\n<a href=\"/configuration-management.html\">configuration management</a> and\n<a href=\"/devops.html\">DevOps</a> are listed at the end of the post.</p>\n<hr>\n<p><img src=\"/img/170227-choose-devops-tools/title-slide.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Title slide for technical talk.\"></p>\n<p>Hey folks, my name is Matt Makai. I'm a\n<a href=\"https://www.twilio.com/blog/2014/02/introducing-developer-evangelist-matt-makai.html\">Developer Evangelist with Twilio</a>\nand the creator of <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>.</p>\n<p><img src=\"/img/170227-choose-devops-tools/python-swift-love.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Python and Swift logos with the heart eyes emoji.\"></p>\n<p>Over the past couple of years I've been coding mostly in Python and Swift.\nI bring that up because the way we build, deploy and operate applications in\neither ecosystem is different. It would not make sense to forcefully recommend\na single way to work in your own ecosystem if it is different than the ones I\nwork in.</p>\n<p><img src=\"/img/170227-choose-devops-tools/java-only.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Java programming language logo.\"></p>\n<p>I used to do a ton of Java development. That's how I started my professional\ncareer before I moved mostly into Python and Swift.</p>\n<p><img src=\"/img/170227-choose-devops-tools/dark-ages.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"2004, the dark ages of software development?\"></p>\n<p>Back in my own software development dark ages of 2004, I learned about a\nconcept that got me interested in DevOps before it was called DevOps:\n<a href=\"/source-control.html\">source control</a>, also known as version control. We don't\ntalk much about source control being a DevOps tool, but it really\nis the foundational layer for everything you want to automate with code.</p>\n<p><img src=\"/img/170227-choose-devops-tools/different-versions.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Diff two commits on GitHub.\"></p>\n<p>Nowadays we have amazing open source distributed version control systems\nand beautiful web application front ends to visualize our code changes over\ntime. Yet there is still a small percentage of developers who don't use source\ncontrol.</p>\n<p>It might seem crazy but I know developers at Fortune 500 companies that still\ndo not use source control! How do you automate building, deploying, testing\nand operating your application if you don't even have your files versioned?</p>\n<p><img src=\"/img/170227-choose-devops-tools/pat-on-back.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Give yourself a pat on the back.\"></p>\n<p>Let's start off this discussion of DevOps tools with a pat on your own back\nif you already use source control. Nice work! We've come a long way as an\nindustry in the last couple of decades when source control was an exotic\nconcept for most developers.</p>\n<p><img src=\"/img/170227-choose-devops-tools/git-logo.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Git logo.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-1.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Do you know a developer who strongly recommends a tool after 4+ years?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-2.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What is the difference between a concept and an implementation?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/devops-1-layer.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Source control (version control) as bottom layer in DevOps.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-3.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Question 3: On a 0 (lowest) -&gt; 10 scale, how amenable is your organization to improving the technical environment?\" p>\n</p><p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-4.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Question 4: How many people on your team get stoked about making incremental fixes to your technical environment?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/devops-2-layers.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"CI, automated tests and app dependencies as layer 2 in DevOps.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/continuous-integration-implementations.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Open source and hosted versions of CI, such as Jenkins, GoCD, and StriderCI, along with CircleCI, Travis CI and CodeBuild.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/test-automation.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Test automation concepts and their implementations in Python ecosystem as examples.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/bash.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"$bash.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/python-fabric-logo.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Python Fabric library logo.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/ansible-logo.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Ansible logo.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/devops-3-layers.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Configuration management and automated deployments in layer 3 of DevOps.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/configuration-management-tools.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Configuration management implementations such as Ansible, Chef, Puppet and SaltStack.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/ansible-commands.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Example for Ansible YAML command to install packages through apt.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-5.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How many times per day does your team deploy to test? How about production?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-6.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How many times per day do you want to deploy to test? To production?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-7.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What are the top 5 specific impediments to completing automating your deployments?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-8.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Who on your team gets excited about continuous delivery?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-9.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Who on your team is responsible for improving automated deployments and continuous delivery?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/django-logo.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Django logo.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/devops-4-layers.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Monitoring, logging and measuring in layer 4 of DevOps.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-10.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What metrics do you collect that feed into every sprint?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-11.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How many days would it take to put a new code library into production?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/deploys-2016.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"6,643 deploys per year for Twilio in 2015.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/question-12.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How much money, if any, can you spend to jump start monitoring your environment?\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/devops-4-layers.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Repeat monitoring, loggin and measuring in 4 layer DevOps slide.\"></p>\n<p>...</p>\n<p><img src=\"/img/170227-choose-devops-tools/contact-info.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Contact info end slide.\"></p>\n<p>My name is Matt Makai and I'm a Developer Evangelist with Twilio, a Python\nand Swift developer, as well as the author of\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>. You can get in\ntouch with me via these channels. Thank you!</p>\n</div>"},
{"title": "Using Django & AssemblyAI for More Accurate Twilio Call Transcriptions", "body": "<div class=\"c9\">\n<p><a href=\"https://www.twilio.com/docs/voice/tutorials/how-to-record-phone-calls-python\">Recording phone calls</a>\nwith one or more participants is easy with\n<a href=\"https://www.twilio.com/docs/voice/quickstart/python\">Twilio's Programmable Voice API</a>,\nbut the speech-to-text accuracy can be poor, especially for transcription\nof words from niche domains such as healthcare and engineering.\n<a href=\"https://www.assemblyai.com/\">AssemblyAI's API for transcription</a>\nprovides much higher accuracy by default and through optional keyword lists.\naccuracy for <a href=\"https://www.twilio.com/docs/voice/api/recording\">recordings</a>. </p>\n<p>In this tutorial, we'll record an outbound Twilio call recording to AssemblyAI's\nAPI to get significantly more accurate speech-to-text output.</p>\n<h2>Tutorial Prerequisites</h2>\n<p>Ensure you have Python 3 installed, because Python 2 reached its\nend-of-life at the beginning of 2020 and is no longer supported.\nPreferrably, you should have\n<a href=\"https://www.python.org/downloads/\">Python 3.7 or greater installed</a>\nin your <a href=\"/development-environments.html\">development environment</a>.\nThis tutorial will also use:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> version 3.1.x, where <em>x</em> is the latest security\nrelease</li>\n<li>A <a href=\"https://www.twilio.com/referral/w9pugq\">Twilio account</a> and the\n<a href=\"https://pypi.org/project/twilio/\">Python Twilio helper library</a>\nversion 6.45.2 or newer</li>\n<li><a href=\"https://requests.readthedocs.io/\">requests</a>\n<a href=\"https://pypi.org/project/requests/\">version 2.24.0</a></li>\n<li>An <a href=\"https://www.assemblyai.com/\">AssemblyAI</a> account, which you can sign up for a <a href=\"https://app.assemblyai.com/login/\">free key API access key here</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">django-accurate-twilio-voice-transcriptions directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Configuring our development environment</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Start the Django project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/djtranscribe\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djtranscribe/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is just\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(djtranscribe) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/\">Django</a>\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==3.1.3 requests==2.24.0 twilio==6.45.2\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>(djtranscribe) $ pip install django==3.1.3 requests==2.24.0 twilio=6.45.2\npip install django requests twilio\nCollecting django\n  Downloading Django-3.1.3-py3-none-any.whl (7.8 MB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7.8 MB 2.6 MB/s \nCollecting requests\n  Using cached requests-2.24.0-py2.py3-none-any.whl (61 kB)\nCollecting twilio\n  Downloading twilio-6.47.0.tar.gz (460 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 460 kB 19.6 MB/s \nCollecting sqlparse&gt;=0.2.2\n  Downloading sqlparse-0.4.1-py3-none-any.whl (42 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 42 kB 4.8 MB/s \nCollecting pytz\n  Downloading pytz-2020.4-py2.py3-none-any.whl (509 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 509 kB 31.0 MB/s \nCollecting asgiref&lt;4,&gt;=3.2.10\n  Downloading asgiref-3.3.0-py3-none-any.whl (19 kB)\nCollecting chardet&lt;4,&gt;=3.0.2\n  Using cached chardet-3.0.4-py2.py3-none-any.whl (133 kB)\nCollecting idna&lt;3,&gt;=2.5\n  Using cached idna-2.10-py2.py3-none-any.whl (58 kB)\nCollecting certifi&gt;=2017.4.17\n  Using cached certifi-2020.6.20-py2.py3-none-any.whl (156 kB)\nCollecting urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1\n  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 127 kB 24.5 MB/s \nCollecting six\n  Using cached six-1.15.0-py2.py3-none-any.whl (10 kB)\nCollecting PyJWT&gt;=1.4.2\n  Using cached PyJWT-1.7.1-py2.py3-none-any.whl (18 kB)\nUsing legacy 'setup.py install' for twilio, since package 'wheel' is not installed.\nInstalling collected packages: sqlparse, pytz, asgiref, django, chardet, idna, certifi, urllib3, requests, six, PyJWT, twilio\n    Running setup.py install for twilio ... done\nSuccessfully installed PyJWT-1.7.1 asgiref-3.3.0 certifi-2020.6.20 chardet-3.0.4 django-3.1.3 idna-2.10 pytz-2020.4 requests-2.24.0 six-1.15.0 sqlparse-0.4.1 twilio-6.47.0 urllib3-1.25.11\n</pre></div>\n<p>We can get started coding the application now that we have all of our\nrequired dependencies installed.</p>\n<h2>Starting our Django project</h2>\n<p>Let's begin coding our application.</p>\n<p>We can use the <a href=\"/django.html\">Django</a> <code>django-admin</code> tool to create\nthe boilerplate code structure to get our project started.\nChange into the directory where you develop your applications. For\nexample, I typically use <code>/Users/matt/devel/py/</code> for all of my\nPython projects. Then run the following command to start a Django\nproject named <code>djtranscribe</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djtranscribe\n</pre></div>\n<p>Note that in this tutorial we are using the same name for both the\nvirtualenv and the Django project directory, but they can be\ndifferent names if you prefer that for organizing your own projects.</p>\n<p>The <code>django-admin</code> command creates a directory named <code>djtranscribe</code>\nalong with several subdirectories that you should be familiar with\nif you have previously worked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djtranscribe\n</pre></div>\n<p>Create a new Django app within <code>djtranscribe</code> named <code>caller</code>.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py startapp caller\n</pre></div>\n<p>Django will generate a new folder named <code>caller</code> in the project.\nWe should update the URLs so the app is accessible before we write\nour <code>views.py</code> code.</p>\n<p>Open <code>djtranscribe/djtranscribe/urls.py</code>. Add the highlighted\nlines so that URL resolver will check the <code>caller</code> app\nfor additional routes to match with URLs that are requested of\nthis Django application.</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/djtranscribe/urls.py\n<span class=\"highlight\">from django.conf.urls import include</span>\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nurlpatterns = [\n<span class=\"highlight\">    path('', include('caller.urls')),</span>\n    path('admin/', admin.site.urls),\n]\n</pre></div>\n<p>Save <code>djtranscribe/djtranscribe/urls.py</code> and open\n<code>djtranscribe/djtranscribe/settings.py</code>.\nAdd the <code>caller</code> app to <code>settings.py</code> by inserting\nthe highlighted line:</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/djtranscribe/settings.py\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'caller',</span>\n]\n</pre></div>\n<p>Make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the Django\n<a href=\"https://docs.djangoproject.com/en/stable/howto/deployment/checklist/\">production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Save and close <code>settings.py</code>.</p>\n<p>Next change into the <code>djtranscribe/caller</code> directory. Create\na new file named <code>urls.py</code> to contain routes for the <code>caller</code> app.</p>\n<p>Add all of these lines to the empty <code>djtranscribe/caller/urls.py</code>\nfile.</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/caller/urls.py\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'', views.index, name=\"index\"),\n]\n</pre></div>\n<p>Save <code>djtranscribe/caller/urls.py</code>. Open\n<code>djtranscribe/caller/views.py</code> to add the\nfollowing two highlighted lines. </p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/caller/views.py\nfrom django.http import HttpResponse\n\n\n<span class=\"highlight\">def index(request):</span>\n<span class=\"highlight\">    return HttpResponse('Hello, world!', 200)</span>\n</pre></div>\n<p>We can test out that this simple boilerplate response is\ncorrect before we start adding the meat of the functionality to\nthe project. Change into the base directory of your Django project\nwhere the <code>manage.py</code> file is located. Execute the development\nserver with the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server should start up with no issues other than\nan unapplied migrations warning.</p>\n<div class=\"highlight\"><pre><span></span>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nNovember 15, 2020 - 14:07:03\nDjango version 3.1.3, using settings 'djtranscribe.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Open a web browser and go to <code>localhost:8000</code>.</p>\n<p><img src=\"/img/visuals/first-step.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Web browser rendering simple text 'Hello, world!'.\"></p>\n<p>You should see 'Hello, world!' rendered in the browser.\nThat means everything is working properly so far and we can\nnow add the dialing, recording and transcribing capabilities to\nour Django project.</p>\n<h2>Adding Twilio to the Django project</h2>\n<p>Time to add Twilio's Voice API into the mix so we can dial\na phone call from our Django project and make a recording\nout of it.</p>\n<p>Start by opening up <code>djtranscribe/djtranscribe/settings.py</code>\nand modifying it with the following highlighted <code>import os</code>\nline:</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/djtranscribe/settings.py\n<span class=\"highlight\">import os</span>\nfrom pathlib import Path\n\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n</pre></div>\n<p>Then at the bottom of the <code>settings.py</code> file, add the\nfollowing highlighted lines, which will be settings that are pulled from\nenvironment variables we will configure later.</p>\n<div class=\"highlight\"><pre><span></span># Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n\n<span class=\"highlight\">BASE_URL = os.getenv(\"BASE_URL\")</span>\n<span class=\"highlight\">TWIML_INSTRUCTIONS_URL = \"{}/record/\".format(BASE_URL)</span>\n<span class=\"highlight\">TWILIO_PHONE_NUMBER = os.getenv(\"TWILIO_PHONE_NUMBER\")</span>\n</pre></div>\n<p>Save <code>settings.py</code> and change into the <code>caller</code> Django app directory.</p>\n<p>Update <code>djtranscribe/caller/urls.py</code> with the the following new\ncode:</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/caller/urls.py\nfrom django.conf.urls import url \nfrom . import views\n\nurlpatterns = [ \n<span class=\"highlight\">    url(r<span class=\"s1\">'dial/(\\d+)/$'</span>, views.dial, name=\"dial\"),</span>\n<span class=\"highlight\">    url(r<span class=\"s1\">'record/$'</span>, views.record_twiml, name=\"record-twiml\"),</span>\n<span class=\"highlight\">    url(r<span class=\"s1\">'get-recording-url/([A-Za-z0-9]+)/$'</span>, views.get_recording_url,</span>\n<span class=\"highlight\">        name='recording-url'),</span>\n]\n</pre></div>\n<p>Next, open <code>djtranscribe/views.py</code> and update it with the following\ncode, replacing what already exists within the file:</p>\n<div class=\"highlight\"><pre><span></span># djtranscribe/caller/views.py\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom twilio.rest import Client\nfrom twilio.twiml.voice_response import VoiceResponse\n\n\ndef dial(request, phone_number):\n    \"\"\"Dials an outbound phone call to the number in the URL. Just\n    as a heads up you will never want to leave a URL like this exposed\n    without authentication and further phone number format verification.\n    phone_number should be just the digits with the country code first,\n    for example 14155559812.\"\"\"\n    # pulls credentials from environment variables\n    twilio_client = Client()\n    call = twilio_client.calls.create(\n            to='+{}'.format(phone_number),\n            from_=settings.TWILIO_PHONE_NUMBER,\n            url=settings.TWIML_INSTRUCTIONS_URL,\n    )   \n    print(call.sid)\n    return HttpResponse(\"dialing +{}. call SID is: {}\".format(\n                            phone_number, call.sid))\n\n\n@csrf_exempt\ndef record_twiml(request):\n    \"\"\"Returns TwiML which prompts the caller to record a message\"\"\"\n    # Start our TwiML response\n    response = VoiceResponse()\n\n    # Use &lt;Say&gt; to give the caller some instructions\n    response.say('Ahoy! Call recording starts now.')\n\n    # Use &lt;Record&gt; to record the caller's message\n    response.record()\n\n    # End the call with &lt;Hangup&gt;\n    response.hangup()\n\n    return HttpResponse(str(response), content_type='application/xml')\n\n\ndef get_recording_url(request, call_sid):\n    \"\"\"Returns an HttpResponse with plain text of the link to one or more\n    recordings from the specified Call SID.\"\"\"\n    # pulls credentials from environment variables\n    twilio_client = Client()\n    recording_urls = \"\"\n    call = twilio_client.calls.get(call_sid)\n    for r in call.recordings.list():\n        recording_urls=\"<span class=\"se\">\\n</span>\".join([recording_urls, \"\".join(['https://api.twilio.com', r.uri])])\n    return HttpResponse(str(recording_urls), 200)\n</pre></div>\n<p>Each of the above view functions performs one of the steps needed to\ncreate a call recording of a phone call dialed by Twilio, and then\nretrieve it as a file. <code>dial</code> programmatically initiates the outbound\ncall, <code>record_twiml</code> returns instructions to play a message that the\ncall is being recorded, records it, and then hangs up when the call\nis done. <code>get_recording_url</code> only returns the URL location of the\nrecorded phone call so that in the next step we can send the file over\nto AssemblyAI.</p>\n<p>Our Django project modifications are done. Next, we need to use\ntwo services, Twilio and Ngrok, to enable some of the machine\nto happen of phone calling and running the application from our\nlocal machine.</p>\n<h2>Twilio credentials and environment variables</h2>\n<p><a href=\"https://www.twilio.com/referral/w9pugq\">Sign up for Twilio</a> or\n<a href=\"https://www.twilio.com/console\">log into your existing account</a>.\nOnce you get to the <a href=\"https://www.twilio.com/console\">Twilio Console</a>,\nyou can obtain your <code>TWILIO_ACCOUNT_SID</code> and <code>TWILIO_AUTH_TOKEN</code> on the\nright side of the page:</p>\n<p><img src=\"/img/210105-django-assemblyai/twilio-console.png\" width=\"100%\" alt=\"Twilio Console.\" class=\"shot rnd outl\"></p>\n<p>When you sign up you should have a phone number assigned to your account.\nYou can use that or\n<a href=\"https://www.twilio.com/console/phone-numbers/search\">purchase a new phone number</a>\nto use.</p>\n<p>Set three environment variables with the names <code>TWILIO_ACCOUNT_SID</code>,\n<code>TWILIO_AUTH_TOKEN</code>, and <code>TWILIO_PHONE_NUMBER</code> using the <code>export</code> command\nin your terminal. Make sure to replace the values with your own Account SID,\nAuth Token and Twilio phone number.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">TWILIO_ACCOUNT_SID</span>=xxxxxxxxxxxxx    # found in twilio.com/console\nexport <span class=\"nv\">TWILIO_AUTH_TOKEN</span>=yyyyyyyyyyyyyy    # found in twilio.com/console\nexport <span class=\"nv\">TWILIO_PHONE_NUMBER</span>=+17166382453    # replace with your Twilio number\n</pre></div>\n<p>Note that you must use the <code>export</code> command in every command line window\nthat you want this key to be accessible. The scripts we are writing will\nnot be able to access the Twilio APIs if you do not have the tokens exported\nin the environment where you are running the script.</p>\n<p>There is one more environment variable to set before we can run <code>app.py</code>.\nWe need to use Ngrok as a localhost tunnel so that Twilio's webhook can\nsend an HTTP POST request to our Django application running on\nour local development environment.</p>\n<p>Run Ngrok in a new terminal window, because you will need to keep it\nrunning while we run our other Python code:</p>\n<div class=\"highlight\"><pre><span></span>./ngrok http <span class=\"m\">8000</span>\n</pre></div>\n<p><img src=\"/img/210105-django-assemblyai/ngrok.jpg\" width=\"100%\" alt=\"Ngrok creating a localhost tunnel.\" class=\"shot rnd outl\"></p>\n<p>Copy the HTTPS version of the \"Forwarding\" URL and set the <code>BASE_URL</code>\nenvironment variable value to it. For example, in this screenshot you\nwould set <code>BASE_URL</code> to <code>https://7764c1810ad3.ngrok.io</code> using the\nfollowing command:</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">BASE_URL</span>=https://7764c1810ad3.ngrok.io    # use your ngrok URL, or domain. no trailing slash\n</pre></div>\n<p>We also need to update <code>djtranscribe/djtranscribe/settings.py</code>'s\n<code>ALLOWED_HOSTS</code> list to include the Ngrok Forwarding URL otherwise\nthe <a href=\"/webhooks.html\">webhook</a> from Twilio asking for instructions\non how to handle the phone call will fail. Open the <code>settings.py</code>\nfile and update the <code>ALLOWED_HOSTS</code> with your Ngrok Forwarding\nhostname list the following:</p>\n<div class=\"highlight\"><pre><span></span># SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY', 'development key')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n<span class=\"highlight\">ALLOWED_HOSTS = ['7764c1810ad3.ngrok.io','127.0.0.1','localhost']</span>\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'caller',\n]\n</pre></div>\n<p>Okay, we can finally re-run our Django web app. Ensure Ngrok is still\nrunning in a different window, your virtualenv is active and that in this\nterminal you have your four environment variables set, then run the\n<code>runserver</code> command in the root project directory where <code>manage.py</code>\nis located:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>Let's make our phone ring by testing the application.</p>\n<h2>Testing Twilio Programmable Voice Recording</h2>\n<p>We can test our application by going to localhost on port 8000.\nGo to this URL in your web browser, replacing the \"14155551234\"\nwith the phone number you want to call, where the person on the\nline will be recorded: http://localhost:8000/dial/14155551234.</p>\n<p>That number should now receive a phone call from your Twilio\nnumber. Pick up, record a message that you want to use to test\nthe transcription, and then hang up.</p>\n<p>If you get an error, make sure all of your environment variables\nare set. You can check the values by using the echo command like\nthis:</p>\n<div class=\"highlight\"><pre><span></span>echo <span class=\"nv\">$BASE_URL</span>\n</pre></div>\n<p>When the call is over, copy the call SID show on the web page\nso that we can use it to look up where the recording audio\nfile is stored.</p>\n<p><img src=\"/img/210105-django-assemblyai/dial-call-sid.png\" width=\"100%\" alt=\"Twilio call SID served through the Django web app.\" class=\"shot rnd outl\"></p>\n<p>Go to \"localhost:8000/get-recording-url/\" with the call SID\nat the end. For example,\n\"localhost:8000/get-recording-url/CAda3f2f49ff4e8ef2be6b726edb998c92\".</p>\n<p><img src=\"/img/210105-django-assemblyai/call-recording-url.png\" width=\"100%\" alt=\"Twilio call recording URL.\" class=\"shot rnd outl\"></p>\n<p>Copy the entire output except for the \".json\" at the end, then paste\nit into the web browser's URL bar, prepended with \"api.twilio.com\".\nFor example,\n\"https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300\".\nThis will bring up the recording. Copy the entire URL and we will use it\nas input into the AssemblyAI service.</p>\n<h2>Transcribing with the AssemblyAI API</h2>\n<p>We can now use the AssemblyAI API for speech-to-text transcription on\nthe call recording that was just made.</p>\n<p><a href=\"https://app.assemblyai.com/login/\">Sign up for an AssemblyAI account</a>\nand log in to the\n<a href=\"https://app.assemblyai.com/dashboard/\">AssemblyAI dashboard</a>, then\ncopy \"Your API token\" as shown in this screenshot:</p>\n<p><img src=\"/img/210105-django-assemblyai/assemblyai-dashboard.png\" width=\"100%\" alt=\"AssemblyAI dashboard.\" class=\"shot rnd outl\"></p>\n<p>We need to export our AssemblyAI API key as an environment variable\nso that our Python application can use it to authenticate with their\nAPI. We also need to pass the publicly-accessible URL for the recording,\nso we'll set that as an environment variable as well.</p>\n<div class=\"highlight\"><pre><span></span># make sure to replace this URL with the one for your recording\nexport <span class=\"nv\">ASSEMBLYAI_KEY</span>=your-api-key-here\nexport <span class=\"nv\">RECORDING_URL</span>=https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300\n</pre></div>\n<p>Create a new file named <code>transcribe.py</code> and write the following code in it:</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport requests\n\nendpoint = \"https://api.assemblyai.com/v2/transcript\"\n\njson = {\n  \"audio_url\": os.getenv(\"RECORDING_URL\")\n}\n\nheaders = {\n    \"authorization\": os.getenv(\"ASSEMBLYAI_KEY\"),\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.post(endpoint, json=json, headers=headers)\n\nprint(response.json())\n</pre></div>\n<p>The above code calls the AssemblyAI transcription service using\nthe secret key and passes it the URL with the file recording.\nThe script prints out the JSON response from the service,\nwhich will contain a transcription ID that we'll use to access\nthe results after they finish processing.</p>\n<p>Run the script using the <code>python</code> command:</p>\n<div class=\"highlight\"><pre><span></span>python transcribe.py\n</pre></div>\n<p>You will get back some JSON as output, similar what you see here:</p>\n<div class=\"highlight\"><pre><span></span>{'audio_end_at': None, 'acoustic_model': 'assemblyai_default', 'text': None, 'audio_url': 'https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300', 'speed_boost': False, 'language_model': 'assemblyai_default', 'redact_pii': False, 'confidence': None, 'webhook_status_code': None, 'id': 'zibe9vwmx-82ce-476c-85a7-e82c09c67daf', 'status': 'queued',\n'boost_param': None, 'words': None, 'format_text': True, 'webhook_url': None, 'punctuate': True, 'utterances': None, 'audio_duration': None, 'auto_highlights': False, 'word_boost': <span class=\"o\">[]</span>, 'dual_channel': None, 'audio_start_from': None}\n</pre></div>\n<p>Find the value contained with the <code>id</code> field of the JSON response. We need\nthat value to look up the final result of our transcription. Copy the\ntranscription ID and set it as an environment variable to use as input by\nthe final script:</p>\n<div class=\"highlight\"><pre><span></span># replace with what's found within `id` from the JSON response\nexport TRANSCRIPTION_ID=aksd19vwmx-82ce-476c-85a7-e82c09c67daf\n</pre></div>\n<p>We just need a little more Python that looks up the result and we'll be all\ndone.</p>\n<h2>Retrieve the AssemblyAI Transcription</h2>\n<p>AssemblyAI will be busy transcribing the recording. Depending on the size of\nthe file it can take anywhere from a few seconds to a few minutes for the\njob to complete. We can use the following code to see if the job is still\nin progress or it has completed. If the transcription is done it will print\nthe results to the terminal.</p>\n<p>Create a new file named <code>print_transcription.py</code> with the following code:</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport requests\n\nendpoint = \"https://api.assemblyai.com/v2/transcript/{}\".format(os.getenv(\"TRANSCRIPTION_ID\"))\n\nheaders = {\n    \"authorization\": os.getenv(\"ASSEMBLYAI_KEY\"),\n}\n\nresponse = requests.get(endpoint, headers=headers)\n\nprint(response.json())\nprint(\"<span class=\"se\">\\n\\n</span>\")\nprint(response.json()['text'])\n</pre></div>\n<p>The code above in <code>print_transcription.py</code> is very similar to the code\nin the previous <code>transcribe.py</code> source file. imports <code>os</code> (operating system)\nfrom the Python standard library, as we did in the previous two files,\nto obtain the <code>TRANSCRIPTION_ID</code> and <code>ASSEMBLYAI_KEY</code> environment variable\nvalues.</p>\n<p>The <code>endpoint</code> is the AssemblyAI API endpoint for retrieving\ntranscriptions. We set the appropriate <code>authorization</code> header and\nmake the API call using the <code>requests.get</code> function. We then print\nout the JSON response as well as just the text that was transcribed.</p>\n<p>Time to test out this third file. Execute the following command in\nthe terminal:</p>\n<div class=\"highlight\"><pre><span></span>python print_transcription.py\n</pre></div>\n<p>Your output will be different based on your recording but you should see a\nresult in the terminal similar to the following:</p>\n<div class=\"highlight\"><pre><span></span>{'audio_end_at': None, 'acoustic_model': 'assemblyai_default', 'auto_highlights_result': None, 'text': 'An object relational mapper is a code library that automates the transfer of data stored in a relational database tables into objects that are more commonly used in application. Code or MS provide a high level abstraction upon a relational database that allows the developer to write Python code. Instead of sequel to create read update and delete data and schemas in their database developers can use the programming language that they are comfortable with comfortable to work with the database instead of writing sequel statements or short procedures.', 'audio_url': 'https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300', 'speed_boost': False, 'language_model': 'assemblyai_default', 'id': 'zibe9vwmx-82ce-476c-85a7-e82c09c67daf', 'confidence': <span class=\"m\">0</span>.931797752808989, 'webhook_status_code': None, 'status': 'completed', 'boost_param': None, 'redact_pii': False, 'words': <span class=\"o\">[{</span>'text': 'An', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">90</span>, 'start': <span class=\"m\">0</span>}, {'text': 'object', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">570</span>, 'start': <span class=\"m\">210</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">1080</span>, 'start': <span class=\"m\">510</span>}, {'text': 'mapper', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">1380</span>, 'start': <span class=\"m\">1020</span>}, {'text': 'is', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">1560</span>, 'start': <span class=\"m\">1350</span>}, {'text': 'a', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">1620</span>, 'start': <span class=\"m\">1500</span>}, {'text': 'code', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">1920</span>, 'start': <span class=\"m\">1620</span>}, {'text': 'library', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">2250</span>, 'start': <span class=\"m\">1860</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">2490</span>, 'start': <span class=\"m\">2220</span>}, {'text': 'automates', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">2940</span>, 'start': <span class=\"m\">2430</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">3150</span>, 'start': <span class=\"m\">2910</span>}, {'text': 'transfer', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">3510</span>, 'start': <span class=\"m\">3090</span>}, {'text': 'of', 'confidence':\n<span class=\"m\">0</span>.99, 'end': <span class=\"m\">3660</span>, 'start': <span class=\"m\">3480</span>}, {'text': 'data', 'confidence': <span class=\"m\">0</span>.84, 'end': <span class=\"m\">3960</span>, 'start': <span class=\"m\">3630</span>}, {'text': 'stored', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">4350</span>, 'start': <span class=\"m\">3900</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">4500</span>, 'start': <span class=\"m\">4290</span>}, {'text': 'a', 'confidence': <span class=\"m\">0</span>.85, 'end': <span class=\"m\">4560</span>, 'start': <span class=\"m\">4440</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.87, 'end': <span class=\"m\">5580</span>, 'start': <span class=\"m\">4500</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.92, 'end':\n<span class=\"m\">6030</span>, 'start': <span class=\"m\">5520</span>}, {'text': 'tables', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">6330</span>, 'start': <span class=\"m\">5970</span>}, {'text': 'into', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">7130</span>, 'start': <span class=\"m\">6560</span>}, {'text': 'objects', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">7490</span>, 'start': <span class=\"m\">7100</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">7700</span>, 'start': <span class=\"m\">7430</span>}, {'text': 'are', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">7850</span>, 'start': <span class=\"m\">7640</span>}, {'text': 'more', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">8030</span>, 'start': <span class=\"m\">7790</span>}, {'text': 'commonly', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">8480</span>, 'start': <span class=\"m\">7970</span>}, {'text': 'used', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">8750</span>, 'start': <span class=\"m\">8420</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">9050</span>, 'start': <span class=\"m\">8840</span>}, {'text': 'application.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">9860</span>, 'start': <span class=\"m\">9110</span>}, {'text': 'Code', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">10040</span>, 'start': <span class=\"m\">9830</span>}, {'text': 'or', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">11210</span>, 'start': <span class=\"m\">10220</span>}, {'text': 'MS', 'confidence': <span class=\"m\">0</span>.83, 'end': <span class=\"m\">11480</span>, 'start': <span class=\"m\">11180</span>}, {'text': 'provide', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">11870</span>, 'start': <span class=\"m\">11510</span>}, {'text': 'a', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">11960</span>, 'start': <span class=\"m\">11840</span>}, {'text': 'high', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">12200</span>, 'start': <span class=\"m\">11930</span>}, {'text': 'level', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">12440</span>, 'start': <span class=\"m\">12170</span>}, {'text': 'abstraction', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">12980</span>, 'start': <span class=\"m\">12410</span>}, {'text':\n'upon', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">13220</span>, 'start': <span class=\"m\">12950</span>}, {'text': 'a', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">13280</span>, 'start': <span class=\"m\">13160</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">13820</span>, 'start': <span class=\"m\">13280</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">14210</span>, 'start': <span class=\"m\">13790</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">14420</span>, 'start': <span class=\"m\">14150</span>}, {'text': 'allows', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">14720</span>, 'start': <span class=\"m\">14360</span>}, {'text':\n'the', 'confidence': <span class=\"m\">0</span>.56, 'end': <span class=\"m\">14870</span>, 'start': <span class=\"m\">14690</span>}, {'text': 'developer', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">15290</span>, 'start': <span class=\"m\">14810</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">15410</span>, 'start': <span class=\"m\">15230</span>}, {'text': 'write', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">15680</span>, 'start': <span class=\"m\">15380</span>}, {'text': 'Python', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">16070</span>, 'start': <span class=\"m\">15620</span>}, {'text': 'code.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">16310</span>, 'start': <span class=\"m\">16070</span>}, {'text': 'Instead', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">17160</span>, 'start': <span class=\"m\">16500</span>}, {'text': 'of', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">17340</span>, 'start': <span class=\"m\">17130</span>}, {'text': 'sequel', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">17820</span>, 'start': <span class=\"m\">17280</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.91, 'end': <span class=\"m\">18090</span>, 'start': <span class=\"m\">17880</span>}, {'text': 'create', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">18450</span>, 'start': <span class=\"m\">18090</span>}, {'text': 'read', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">18840</span>, 'start': <span class=\"m\">18480</span>}, {'text': 'update', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">19290</span>, 'start': <span class=\"m\">18870</span>}, {'text': 'and', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">19590</span>, 'start': <span class=\"m\">19230</span>}, {'text': 'delete', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">19920</span>, 'start': <span class=\"m\">19530</span>}, {'text': 'data',\n'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">20190</span>, 'start': <span class=\"m\">19890</span>}, {'text': 'and', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">20490</span>, 'start': <span class=\"m\">20250</span>}, {'text': 'schemas', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">21000</span>, 'start': <span class=\"m\">20430</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">21210</span>, 'start': <span class=\"m\">21000</span>}, {'text': 'their', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">21510</span>, 'start': <span class=\"m\">21150</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">21900</span>, 'start': <span class=\"m\">21450</span>}, {'text': 'developers', 'confidence': <span class=\"m\">0</span>.83, 'end': <span class=\"m\">23200</span>, 'start': <span class=\"m\">22420</span>}, {'text': 'can', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">23440</span>, 'start': <span class=\"m\">23200</span>}, {'text': 'use', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">23650</span>, 'start': <span class=\"m\">23410</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">23890</span>, 'start': <span class=\"m\">23590</span>}, {'text': 'programming', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">24370</span>, 'start': <span class=\"m\">23830</span>}, {'text': 'language', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">24700</span>, 'start': <span class=\"m\">24310</span>}, {'text': 'that', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">24880</span>, 'start': <span class=\"m\">24640</span>}, {'text': 'they', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">25060</span>, 'start': <span class=\"m\">24820</span>}, {'text': 'are', 'confidence': <span class=\"m\">0</span>.85, 'end': <span class=\"m\">25210</span>, 'start': <span class=\"m\">25000</span>}, {'text': 'comfortable', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">25780</span>, 'start': <span class=\"m\">25180</span>}, {'text': 'with', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">25960</span>, 'start': <span class=\"m\">25720</span>}, {'text': 'comfortable', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">29090</span>, 'start': <span class=\"m\">28090</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.84, 'end': <span class=\"m\">29840</span>, 'start': <span class=\"m\">29180</span>}, {'text': 'work', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">30050</span>, 'start': <span class=\"m\">29780</span>}, {'text': 'with', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">30290</span>, 'start': <span class=\"m\">30020</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.69, 'end': <span class=\"m\">30440</span>, 'start': <span class=\"m\">30230</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">30860</span>, 'start': <span class=\"m\">30380</span>}, {'text': 'instead', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">32780</span>, 'start': <span class=\"m\">31780</span>}, {'text': 'of', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">32900</span>, 'start': <span class=\"m\">32720</span>}, {'text': 'writing', 'confidence': <span class=\"m\">0</span>.87, 'end': <span class=\"m\">33320</span>, 'start': <span class=\"m\">32870</span>}, {'text': 'sequel', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">33860</span>, 'start': <span class=\"m\">33290</span>}, {'text': 'statements', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">34310</span>, 'start': <span class=\"m\">33800</span>}, {'text': 'or', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">34460</span>, 'start': <span class=\"m\">34250</span>}, {'text': 'short', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">34790</span>, 'start': <span class=\"m\">34430</span>}, {'text': 'procedures.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">35270</span>, 'start': <span class=\"m\">34760</span><span class=\"o\">}]</span>, 'format_text': True, 'webhook_url': None, 'punctuate': True, 'utterances': None, 'audio_duration': <span class=\"m\">36</span>.288, 'auto_highlights': False, 'word_boost': <span class=\"o\">[]</span>,\n'dual_channel': None, 'audio_start_from': None}\n\n\nAn object relational mapper is a code library that automates the transfer of data stored in a relational database tables into objects that are more commonly used in application. Code or MS provide a high level abstraction upon a relational database that allows the developer to write Python code. Instead of sequel to create read update and delete data and schemas in their database developers can use the programming language that they are comfortable with comfortable to work with the database instead of writing sequel statements or short procedures.\n</pre></div>\n<p>That's a lot of output. The first part contains the results of the\ntranscription and the confidence in the accuracy of each word transcribed.\nThe second part is just the plain text output from the transcription.</p>\n<p>You can take this now take this base code and add it to any application\nthat needs high quality text-to-speech transcription. If the results\naren't quite good enough for you, check out this tutorial on\n<a href=\"https://docs.assemblyai.com/guides/transcribing-with-a-different-acoustic-or-custom-language-model\">selecting a model that better matches your data</a>\nas well as\n<a href=\"https://docs.assemblyai.com/guides/boosting-accuracy-for-keywords-or-phrases\">boosting accuracy for keywords or phrases</a>.</p>\n<h2>Additional resources</h2>\n<p>We just finished building a highly accurate transcription application for recordings.</p>\n<p>Next, try out some of these other related <a href=\"/django.html\">Django</a> tutorials:</p>\n<ul>\n<li><a href=\"/blog/sentry-handle-exceptions-django-projects.html\">Using Sentry to Handle Python Exceptions in Django Projects</a></li>\n<li><a href=\"/blog/track-daily-user-data-django-user-visit.html\">Tracking Daily User Data in Django with django-user-visit</a></li>\n<li><a href=\"/blog/bootstrap-4-django-template.html\">How to Quickly Use Bootstrap 4 in a Django Template with a CDN</a></li>\n</ul>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.\nSee something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/210105-django-accurate-twilio-voice-transcriptions.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Getting Started with AWS Lambda & Python 2.7", "body": "<div class=\"c9\">\n<p><a href=\"/aws-lambda.html\">Amazon Web Services (AWS) Lambda</a>\nis a \"serverless\" compute service that executes arbitrary Python code in\nresponse to developer-defined events, such as inbound API calls or file\nuploads to <a href=\"https://aws.amazon.com/s3/\">AWS S3</a>. Note that AWS Lambda has\nnothing to do with the <code>lambda</code> keyword in Python that is used to create\nanonymous functions, it's just the product name that happens to collide\nwith an existing Python language feature name.</p>\n<p>In this tutorial we'll learn how to quickly write and run a Lambda\nfunction that executes some simple Python 2.7 code and handles environment\nvariables. The code can then be modified to build far more complicated\nPython applications.</p>\n<h2>Tools We Need</h2>\n<p>We do not need any local development environment tools to get through\nthis walkthrough other than a web browser because all the work will\nhappen on AWS.</p>\n<p>Grab a new free tier <a href=\"https://aws.amazon.com/\">Amazon Web Services account</a>\nor use your existing AWS account.</p>\n<h2>First Steps with Lambda</h2>\n<p>Head to the\n<a href=\"https://aws.amazon.com/lambda/\">AWS Lambda landing page</a> in your\nweb browser. Sign into your account, or sign up for a new account which\ncomes with a free tier so you don't have to pay.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/aws-amazon-com.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"AWS Lambda landing page.\"></p>\n<p>If you're not taken directly to the\n<a href=\"https://console.aws.amazon.com/lambda/home\">Lambda Console page</a> after\nlogging in you'll see the main Console. AWS has a ridiculous number of\nservices (that seems to expand every week) so the best way to get around\nis to select the search text box and search for \"lambda\" as shown in the\nfollowing screenshot.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/search-for-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Search for lambda in the dashboard text box.\"></p>\n<p>Press the \"Create a Lambda function\" button and you'll see the\n\"Select Blueprint\" page.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/select-blueprint.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The select blueprint Lambda screen, where you should select Blank Function.\"></p>\n<p>Choose \"Blank Function\". The next screen gives the option to select a\n\"trigger\", which is how the Lambda function gets executed. A trigger is\nsome event that is integrated with other AWS services and can be exposed\nexternally via an API or device such as Alexa.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/configure-triggers.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Configure trigger screen, which we will not use for now because we will manually kick off our Lambda.\"></p>\n<p>However, we aren't going to set up a trigger for this function because\nwe can manually test the Lambda later before connecting it to a trigger.\nLeave the trigger icon blank and click the \"Next\" button to move along\nto the next screen.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/blank-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Blank Lambda configuration screen.\"></p>\n<p>Now we're on the screen where we can enter our specific configuration\nand code for our new Lambda.</p>\n<h2>Writing Our Python Code</h2>\n<p>Start by entering a name for your Lambda function, such as \"my_first_python_lambda\" and a description. The description field is optional but it's handy\nwhen you start using Lambda regularly to keep all your functions straight.\nIn the Runtime drop-down, select Python 2.7 as the execution language.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/first-python-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Enter a name, description and select Python 2.7 on the Lambda configuration screen.\"></p>\n<p>Below the Runtime drop-down you'll see a large text box for writing code.\nWe can also choose to upload a ZIP file with our Python application which\nis handy for more than simple test Lambdas. However, for our simple starter\nLambda application you can copy or type in the following code\n(<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/aws-lambda-python-2-7/lambda.py\">or copy it from this GitHub repo</a>).\nMake sure to replace what's already in the text box.</p>\n<div class=\"highlight\"><pre><span></span>import os\n\n\ndef lambda_handler(event, context):\n    what_to_print = os.environ.get(\"what_to_print\")\n    how_many_times = int(os.environ.get(\"how_many_times\"))\n\n    # make sure what_to_print and how_many_times values exist\n    if what_to_print and how_many_times &gt; 0:\n        for i in range(0, how_many_times):\n            print(what_to_print)\n        return what_to_print\n    return None\n</pre></div>\n<p>The above code has the required <code>lambda_handler</code> function definition\nthat provides a hook for the Lambda service to know where to begin executing\nthe Python code. Think of <code>lambda_handler</code> as a <code>main</code> function when you're\nusing this service.</p>\n<p>Our Python code expects and reads two environment variables and then the\ncode prints a message zero to many times, based on the amount defined in\nthe <code>how_many_times</code> variable. If a message is printed then the function\nreturns the <code>what_to_print</code> string, if nothing is printed then <code>None</code> is\nreturned.</p>\n<p>Just below the code input text box there are environment variable key-value\npairs that can be set. Our code will use two environment variables, named\n<code>what_to_print</code> and <code>how_many_times</code>. </p>\n<p>Enter the keys named <code>what_to_print</code> and <code>how_many_times</code> then enter their\nvalues. Use a string message for <code>what_to_print</code>'s value and an integer\nwhole number above 0 for <code>how_many_times</code>. Our Python code's error handling\nis not very robust so a value other than a number in the <code>how_many_times</code>\nvariable will cause the script to throw an error when it is executed.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/environment-variables.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Enter the exact keys of what_to_print and how_many_times along with corresponding values as environment variables.\"></p>\n<p>Our code and environment variables are in place and we just need to set\na few more AWS-specific settings before we can test the Lambda function.</p>\n<h2>Executing the Lambda</h2>\n<p>Scroll down below the environment variables to the\n\"Lambda function handler and role\" section. This section contains the last\nfew required configuration items. Keep the default handler, which should\nbe <code>lambda_function.lambda_handler</code>. Select\n\"Create a new Role from template(s)\" from the drop-down then for the\n\"Role name\" field enter \"dynamodb_permissions\". Under \"Policy templates\"\nselect the \"Simple Microservice permissions\". </p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/lambda-handler-and-role.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"For the final configuration, keep the default handler, create a new role from a template for Simple Microservice permissions and save it with a unique name.\"></p>\n<p>The \"Simple Microservice permissions\" gives our Lambda access to\n<a href=\"https://aws.amazon.com/dynamodb/\">AWS DynamoDB</a>. We won't use DynamoDB in\nthis tutorial but it's super useful as either permanent or temporary\nstorage when working with Lambda.</p>\n<p>Now that our code and configuration is in place, click the \"Next\" button\nat the bottom right corner of the page.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/review-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"We can review the values set during our configuration.\"></p>\n<p>The review screen will show us our configuration settings. Scroll down\nto the bottom and click the \"Create function\" button to continue.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/create-function.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the create function button to continue.\"></p>\n<p>We should see a success message on the next page just below the\n\"Save and test\" button.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/save-and-test.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Save and test button.\"></p>\n<p>Press the \"Test\" button to execute the Lambda. Lambda prompts us for\nsome data to simulate an event that would trigger our function. Select\nthe \"Hello World\" sample event template, which contains some example keys.\nOur Lambda will not those keys in its execution so it does not matter what\nthey are. Click the \"Save and test\" button at the bottom of the modal.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/sample-event-template.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sample event template for our Lambda execution.\"></p>\n<p>Scroll down to the \"Execution result\" section where we can see our output.</p>\n<p><img src=\"/img/170428-aws-lambda-python-2-7/execution-results.jpg\" width=\"100%\" class=\"\" alt=\"Execution results from running our Lambda function.\"></p>\n<p>We get the log output that shows us the return value of our function. In\nthis case it is the string message from <code>what_to_print</code>. We can also see\ndown below that our print function produced output five times. </p>\n<h2>What's Next?</h2>\n<p>Awesome, you just configured, wrote and executed your first Python 2.7\ncode on AWS Lambda! The real power of Lambda comes in when you connect a\ntrigger to it so your code executes based on events. We'll take a look\nat that in the next tutorial.</p>\n<p>What else can you do with Python and Lambda? Take a look at the\n<a href=\"/aws-lambda.html\">AWS Lambda</a> page for more examples and tutorials. </p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170428-python-2-7-aws-lambda.markdown\">this page's source on GitHub</a>.</p>\n</div>"},
{"title": "Replying to SMS Text Messages with Python and Bottle", "body": "<div class=\"c9\">\n<p>Python applications can\n<a href=\"/blog/send-sms-text-messages-python.html\">easily send SMS</a>\nby using a <a href=\"/application-programming-interfaces.html\">web API</a>.\nWeb apps built with the <a href=\"/bottle.html\">Bottle</a> framework can also reply\nto incoming text messages by handling inbound HTTP POST webhooks. In\nthis post we'll quickly walk through how to set up a Bottle web app to\nhandle SMS data in the form of HTTP POST requests.</p>\n<h2>Tools We'll Need</h2>\n<p>This tutorial works with either <a href=\"/python-2-or-3.html\">Python 2 or 3</a>,\nalthough Python 3 is recommended by the community for new applications.\nInstall one of those two Python versions on your system to use for this\nwalkthrough. We also need:</p>\n<ul>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li><a href=\"/bottle.html\">Bottle</a> web framework</li>\n<li><a href=\"https://ngrok.com/\">Ngrok</a> for localhost tunneling to our Bottle\napplication while it's running on our local development environment</li>\n<li>Free <a href=\"https://www.twilio.com/try-twilio\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/sending-messages\">SMS web API</a></li>\n<li>Open source\n<a href=\"https://pypi.org/project/twilio\">Twilio Python helper library</a>,\nversion 5.7.0 or earlier</li>\n</ul>\n<p>Check out the guide on\n<a href=\"/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS</a>\nif you need help getting your\n<a href=\"/development-environments.html\">development environment</a>\nconfigured.</p>\n<h2>Application Dependency Installation</h2>\n<p>Our application will use a helper code library to reply to inbound SMS.\nBottle and the helper library are installable from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> into a virtualenv. Open your terminal\nand use the <code>virtualenv</code> command to create a new virtualenv:</p>\n<div class=\"highlight\"><pre><span></span>virtualenv replysms\n</pre></div>\n<p>Invoke the virtualenv's <code>activate</code> script, which makes it the \"active\"\nPython installation. Note that you need to do this in every terminal window\nthat you want this virtualenv to be used.</p>\n<div class=\"highlight\"><pre><span></span>source replysms/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Use the <code>pip</code> command to install the <a href=\"/bottle.html\">Bottle</a> and\n<a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python</a> packages\ninto your virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install bottle twilio==5.7.0\n</pre></div>\n<p>We have installed the required dependencies so now Python code that is run\nwith the virtualenv activated will be able to use those packages. It's time\nto build our Bottle web app and reply to incoming text messages.</p>\n<h2>Coding Our Bottle App</h2>\n<p>The Bottle web app will have two routes. One route will allow us to test\nthat the app is running. The other route will handle and respond to incoming\nHTTP POST requests from Twilio. Create a new file named <code>app.py</code> in your\nin the directory where you want to store this Python project.</p>\n<p>Write the following code in the new <code>app.py</code> file. There is also\n<a href=\"https://gist.github.com/mattmakai/6ec3b46e40a1020a3ea9c772c601199a\">a GitHub Gist</a>\nwith the code that you can copy and paste.</p>\n<div class=\"highlight\"><pre><span></span>from bottle import (post, request, response, route, run, )\nfrom twilio import twiml\n\n\n@route('/')\ndef check_app():\n    # returns a simple string stating the app is working\n    return \"It works!\"\n\n\n@post('/twilio')\ndef inbound_sms():\n    twiml_response = twiml.Response()\n    # grab message from the request. could also get the \"To\" and \n    # \"From\" phone numbers as well from parameters with those names\n    inbound_message = request.forms.get(\"Body\")\n    # we can now use the incoming message text in our Python application\n    if inbound_message == \"Hello\":\n        twiml_response.message(\"Hello from Bottle right back at you!\")\n    else:\n        twiml_response.message(\"Hi! Not quite sure what you meant, but okay.\")\n    # we return back the mimetype because Twilio needs an XML response\n    response.content_type = \"application/xml\"\n    return str(twiml_response)\n\n\nif __name__ == '__main__':\n    run(host='127.0.0.1', port=5000, debug=True, reloader=True)\n</pre></div>\n<p>The lines starting with <code>#</code> are comments that give explanations for what\nthe code lines below them are doing. Bottle web apps define URL routes with\nthe <code>@route</code> and <code>@post</code> decorators, depending on the type of HTTP request\nthe route should handle. </p>\n<p>Make sure your virtualenv is still active so that the application can use\nthe Bottle and Twilio code libraries we installed earlier. Give the\napplication a try by running it with <code>python app.py</code>. </p>\n<p>Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should\nsee \"It works!\" on the screen.</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/bottle-app-local.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Bottle application running locally on Ubuntu.\"></p>\n<p>However, there is an issue with our web app running on our local development\nenvironment. Twilio cannot send a the HTTP POST request to the web app\nserver unless a localhost tunnel is created.</p>\n<h2>Ngrok Localhost Tunneling</h2>\n<p><a href=\"https://ngrok.com\">Ngrok</a> is a localhost tunneling tool that bridges\nyour local development environment to an external URL.\n<a href=\"https://ngrok.com/download\">Download and install</a> the Ngrok version that's\nappropriate for your operating system.</p>\n<p>We can run Ngrok locally and expose our Bottle app that is running on\nport 5000. Run this command within the directory where the Ngrok executable is\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>./ngrok http 5000\n</pre></div>\n<p><img src=\"/img/160605-reply-sms-python-bottle/start-ngrok.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Ngrok started and running to serve as a localhost tunnel.\"></p>\n<p>Cool, now we can use the Forwarding URL so Twilio can send POST requests\nto our application when there is an inbound SMS. Replace the URL in the\ntext box with your own Forwarding URL, like I did in this screenshot.</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/access-ngrok.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Paste the ngrok Forwarding URL into the Twilio webhook configuration text box.\"></p>\n<p>Now we just need a Twilio phone number that will send POST request to our\napplication when there is an inbound SMS.</p>\n<h2>Obtain a Phone Number</h2>\n<p>Our Bottle web app's route can respond to incoming POST requests but we\nneed to use Twilio to have a phone number that will convert the inbound SMS\ndata into the POST request. In your web browser go to the\n<a href=\"https://www.twilio.com/try-twilio\">Twilio website and sign up for a free account</a>.\nYou can also sign into your existing Twilio account if you already have one.</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Twilio sign up screen.\"></p>\n<p>The Twilio trial account allows you to send and receive text messages to\nyour own validated phone number. To send and reply to SMS to and from any\nphone number then you need to upgrade your account. Trial accounts are\ngreat for initial development before your application goes live.</p>\n<p>When you sign up, you receive a free Twilio phone number. We can\nconfigure that phone number to forward the SMS information to our web\napplication by setting up the response webhook.</p>\n<p>Go to the\n<a href=\"https://www.twilio.com/console/phone-numbers\">manage phone numbers screen</a>\nand click on the phone number you want to configure for replying to\ntext messages.</p>\n<p>Scroll down and look for the \"Messaging\" header. Change the\n\"A Message Comes in\" text box to input the ngrok Forwarding URL plus\nthe \"/twilio\" route, as shown in the screenshot below.</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/webhook-ngrok.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Paste the ngrok Forwarding URL into the Twilio webhook configuration text box.\"></p>\n<p>Click the \"Save\" button so that our changes take effect.</p>\n<p>Our application is ready to go - time to give our phone number a try!\nSend \"Hello\" or whatever text you want to your phone number. Here is what\nthe result looks like on my iPhone.</p>\n<p><img src=\"/img/160605-reply-sms-python-bottle/bottle-success.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Example screenshot of what SMS replies look like on the iPhone.\"></p>\n<p>The concise Bottle web app is a good start to build more complicated\nprograms such as\n<a href=\"https://www.twilio.com/blog/2014/11/choose-your-own-adventure-presentations-with-reveal-js-python-and-websockets.html\">Choose Your Own Adventure Presentations</a>\nor\n<a href=\"https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html\">SMS Slack bots</a>.</p>\n<h2>What's next?</h2>\n<p>Awesome, our Bottle application now replies to inbound SMS text\nmessages! </p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160605-reply-sms-python-bottle.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Setting Up Python 3, Django & Gunicorn on Linux Mint 17.3", "body": "<div class=\"c9\">\n<p>Linux Mint 17.3 \"Rosa\" is December 2015 release of the polished and\nwidely-used Linux distribution. This Mint release includes both Python 2.7\nand 3.4 by default, but in this tutorial we will download and install the\nlatest Python 3.5.1 version to run our Django application. </p>\n<p>If you want to use a different Linux distribution such as\n<a href=\"/ubuntu.html\">Ubuntu</a> instead of Mint, check out\n<a href=\"/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html\">the tutorial for Ubuntu 16.04 \"Xenial Xerus\"</a>. If Mint is your desired\n<a href=\"/development-environments.html\">development environment</a> though, let's\nget started!</p>\n<h2>Tools We Need</h2>\n<p>Our setup will use several system packages and code libraries to get\nup and running. Do not worry about installing these dependencies just yet,\nwe will get to them as we progress through the tutorial. The tools and\ntheir current versions as of June 2016 are:</p>\n<ul>\n<li><a href=\"http://blog.linuxmint.com/?p=2947\">Linux Mint 17.3 \"Rosa\"</a> with the\ndefault Cinnamon desktop</li>\n<li><a href=\"/why-use-python.html\">Python</a> version\n<a href=\"https://www.python.org/downloads/release/python-351/\">3.5.1</a></li>\n<li><a href=\"/django.html\">Django</a> web framework version\n<a href=\"https://docs.djangoproject.com/en/1.9/releases/1.9/\">1.9.7</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.6</a></li>\n</ul>\n<p>If you are on Mac OS X or Windows, my recommendation is to use\nvirtualization software such as\n<a href=\"https://www.parallels.com/products/desktop/\">Parallels</a> or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"https://www.linuxmint.com/download.php\">Linux Mint Cinnamon desktop .iso</a>.</p>\n<p>We should see a desktop screen like this one when we boot up the operating\nsystem for the first time.</p>\n<p><img src=\"/img/160626-mint-django-gunicorn/mint-desktop.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Linux Mint default desktop\"></p>\n<p>Open up terminal to proceed with the configuration.</p>\n<h2>System Packages</h2>\n<p>We can see the Python version Linux Mint comes with, as well as where its\nexecutable is stored.</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\nwhich python3\n</pre></div>\n<p>The <em>output</em> of those two commands should be (these are not commands to run):</p>\n<div class=\"highlight\"><pre><span></span>Python 3.4.3\n/usr/bin/python3\n</pre></div>\n<p><img src=\"/img/160626-mint-django-gunicorn/which-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Output of 'python --version' and 'which python3' commands.\"></p>\n<p>We really want to use the latest Python release instead of the default 3.4\nwhen starting a new Python project, so let's download and install 3.5.1 now.</p>\n<p>Run these commands in the terminal to download Python 3.5.1 source code:</p>\n<div class=\"highlight\"><pre><span></span>cd ~/Downloads\nwget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz\n</pre></div>\n<p><img src=\"/img/160626-mint-django-gunicorn/download-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"wget Python source code output.\"></p>\n<p>Extract the Python source code:</p>\n<div class=\"highlight\"><pre><span></span>tar -xvf Python-3.5.1.tgz\n</pre></div>\n<p>Linux Mint is not configured by default to build the Python source code. We\nneed to update our system package lists and install several packages to\nmake building the Python source code possible. If you have a password on\nyour user account, enter it when prompted to allow the installation to\nproceed.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt update\nsudo apt install build-essential checkinstall\nsudo apt install libreadline-gplv2-dev libncursesw5-dev libssl-dev \nsudo apt install libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\nsudo apt install python3-dev\n</pre></div>\n<p>Once the packages are installed, we can configure and install Python from\nsource.</p>\n<div class=\"highlight\"><pre><span></span>cd Python-3.5.1\n./configure\nsudo make install\n</pre></div>\n<p>Test that the installation worked properly by starting up the Python REPL:</p>\n<div class=\"highlight\"><pre><span></span>python3.5\n</pre></div>\n<p>If the REPL starts up properly with Python 3.5.1 in the output then we're\ngood to go.</p>\n<p><img src=\"/img/160626-mint-django-gunicorn/python351-output.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"wget Python source code output.\"></p>\n<p>The basic system packages we need are now installed so we can proceed to\nour Python-specific dependencies.</p>\n<h2>Virtual environment and pip</h2>\n<p>Python 3.5 comes with the virtual environment and pip applications so we\ncan use them to handle our\n<a href=\"/application-dependencies.html\">application dependencies</a>.</p>\n<p>Create a directory to store virtual environments then create a virtualenv\nfor our Django project.</p>\n<div class=\"highlight\"><pre><span></span># the tilde \"~\" specifies the user's home directory, like /home/matt\ncd ~\nmkdir venvs\n# specify the system python3 installation\npython3.5 -m venv djangoproj\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djangoproj/bin/activate\n</pre></div>\n<p>Our virtual environment is properly activated when we see <code>(djangoproj)</code>\nprepended to our prompt. </p>\n<p><img src=\"/img/160626-mint-django-gunicorn/venv-activated.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Output from the virtualenv environment activation.\"></p>\n<p>Our virtualenv with Python 3.5.1 is activated so we can install whatever\ndependencies we want, such as Django and Gunicorn. Our default <code>python</code>\ncommand is also set to use the Python 3.5.1 installation instead of the\nPython 2.7 version that comes with Linux Mint.</p>\n<h2>Django and Gunicorn</h2>\n<p>Now we can install Django and Green Unicorn into our virtual environment.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==1.9.7 gunicorn==19.6\n</pre></div>\n<p>If there are no errors in the pip output then that is a good sign we can\nproceed.</p>\n<p><img src=\"/img/160626-mint-django-gunicorn/good-sign.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Django and Gunicorn properly install via the pip command.\"></p>\n<p>Create a new Django project named <code>djangoproj</code>, or whatever you want to name\nyour project. Change into the directory for the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd ~\ndjango-admin startproject djangoproj\ncd djangoproj\n</pre></div>\n<p>We can run Django using the development server with the\n<code>python manage.py runserver</code> command. However, start Django up with\nGunicorn instead.</p>\n<div class=\"highlight\"><pre><span></span>gunicorn djangoproj.wsgi\n</pre></div>\n<p><img src=\"/img/160626-mint-django-gunicorn/gunicorn-run.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Result of running gunicorn djangoproj.wsgi on the command line.\"></p>\n<p>Awesome, we can bring up our shell project in the web browser at\nthe <a href=\"http://localhost:8000\">http://localhost:8000</a> or\n<a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a> address.</p>\n<p><img src=\"/img/160626-mint-django-gunicorn/it-works.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Django project running in the Firefox web browser.\"></p>\n<p>Now you're ready for Django development!</p>\n<h2>Ready for Development</h2>\n<p>Those are the first few steps for beginning development with\n<a href=\"/django.html\">Django</a> and <a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a> on\nLinux Mint 17.3 \"Rosa\". If you need an even more in-depth walkthrough for\ndeploying your Python web application to a production environment, check\nout the\n<a href=\"http://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.</p>\n<p>To figure out what to do next for your Python project, read the topics\nfound on the <a href=\"/table-of-contents.html\">table of contents</a> page.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160626-django-gunicorn-mint-linux-17.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Dialing Outbound Phone Calls with a Bottle Web App", "body": "<div class=\"c9\">\n<p>Python web apps built with the <a href=\"/bottle.html\">Bottle web framework</a> can\n<a href=\"/blog/send-sms-text-messages-python.html\">send</a> and\n<a href=\"/blog/reply-sms-text-messages-python-bottle.html\">receive SMS text messages</a>.\nIn this tutorial we will go beyond texting and learn how to dial outbound\nphone calls. The calls will read a snippet of text then play an MP3 file,\nbut they can then be easily modified to create conference lines and many\nother voice features in your Python web apps.</p>\n<h2>Tools We Need</h2>\n<p>You should have either <a href=\"/python-2-or-3.html\">Python 2 or 3</a> installed to\ncreate your Bottle app, although Python 3 is recommended for new\napplications. We also need:</p>\n<ul>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li><a href=\"https://ngrok.com/\">Ngrok</a> for localhost tunneling to our Bottle\napplication while it's running on our local development environment</li>\n<li><a href=\"/bottle.html\">Bottle</a> web framework</li>\n<li>Free <a href=\"https://www.twilio.com/try-twilio\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/making-calls\">phone calling web API</a></li>\n<li>Twilio's\n<a href=\"https://www.twilio.com/docs/libraries/python\">Python helper library</a>,\nwhich is <a href=\"https://github.com/twilio/twilio-python\">open source on GitHub</a>\nand <a href=\"https://pypi.org/project/twilio\">available for download from PyPI</a></li>\n</ul>\n<p>Take a look at\n<a href=\"/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html\">this guide on setting up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS</a>\nif you need help getting your\n<a href=\"/development-environments.html\">development environment</a>\nconfigured before continuing on through the remainder of this tutorial.</p>\n<p>You can snag all the open source code for this tutorial in the\n<a href=\"https://github.com/mattmakai/python-bottle-phone\">python-bottle-phone</a>\nGitHub repository under the\n<a href=\"https://github.com/mattmakai/python-bottle-phone/tree/master/outbound-calls\">outbound directory</a>.\nUse and copy the code however you want - it's all open source under the\nMIT license.</p>\n<h2>Installing Our Application Dependencies</h2>\n<p>Our Bottle app needs a helper code library to make it easy to dial outbound\nphone calls. Bottle and the Twilio helper library are installable from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> into a virtualenv. Open your terminal\nand use the <code>virtualenv</code> command to create a new virtualenv:</p>\n<div class=\"highlight\"><pre><span></span>virtualenv bottlephone\n</pre></div>\n<p>Use the <code>activate</code> script within the virtualenv, which makes this virtualenv\nthe active Python installation. Note that you need to do this in every\nterminal window that you want this virtualenv to be used.</p>\n<div class=\"highlight\"><pre><span></span>source bottlephone/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv\nto something like <code>(bottlephone) $</code>. Here is a screenshot of what my\nenvironment looked like when I used the <code>activate</code> script.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Next use the <code>pip</code> command to install the <a href=\"/bottle.html\">Bottle</a> and\n<a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python</a> packages\ninto your virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install bottle twilio==5.7.0\n</pre></div>\n<p>After the installation script finishes, we will have the required\ndependencies to build our app. Time to write some Python code to dial\noutbound phone calls.</p>\n<h2>Bottle and Twilio</h2>\n<p>Our simple Bottle web app will have three routes: </p>\n<ul>\n<li><code>/</code> - returns a text string to let us know our Bottle app is running</li>\n<li><code>/twiml</code> - responds with <a href=\"https://www.twilio.com/docs/api/twiml\">TwiML</a>\n(a simple subset of XML) that instructs Twilio what to do when someone\npicks up the call to them from our Bottle web app</li>\n<li><code>/dial-phone/&lt;outbound_phone_number&gt;</code>, where \"outbound_phone_number\" is\na phone number in the format \"+12025551234\" - this route uses the Twilio\nhelper library to send a POST request to the Twilio Voice API to dial a\nphone call</li>\n</ul>\n<p>We can build the structure of our Bottle app and the first route right now.\nCreate a new file named <code>app.py</code> with the following contents to start our\napp.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport bottle\nfrom bottle import route, run, post, Response\nfrom twilio import twiml\nfrom twilio.rest import TwilioRestClient\n\n\napp = bottle.default_app()\n# plug in account SID and auth token here if they are not already exposed as\n# environment variables\ntwilio_client = TwilioRestClient()\n\nTWILIO_NUMBER = os.environ.get('TWILIO_NUMBER', '+12025551234')\nNGROK_BASE_URL = os.environ.get('NGROK_BASE_URL', 'https://c6c6d4e8.ngrok.io')\n\n\n@route('/')\ndef index():\n    \"\"\"\n    Returns a standard text response to show the app is up and running.\n    \"\"\"\n    return Response(\"Bottle app running!\")\n\n\nif __name__ == '__main__':\n    run(host='127.0.0.1', port=8000, debug=False, reloader=True)\n</pre></div>\n<p>Make sure you are in the directory where you created the above <code>app.py</code>\nfile. Run the app via the Bottle development server with the following\ncommand. Make sure your virtualenv is still activated so our code can rely\non the Bottle code library.</p>\n<div class=\"highlight\"><pre><span></span>python app.py\n</pre></div>\n<p>We should see a successful development server start up like this:</p>\n<div class=\"highlight\"><pre><span></span>(bottlephone) <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"117c706565516473647f6564\">[email\u00a0protected]</a>:~/bottlephone$ python app.py \nBottle v0.12.9 server starting up (using WSGIRefServer())...\nListening on http://127.0.0.1:8000/\nHit Ctrl-C to quit.\n</pre></div>\n<p>Here is what the development server message looks like in my environment\non Ubuntu:</p>\n<p><img src=\"/img/160830-phone-calls-bottle/bottle-app-running.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Successfully starting the Bottle development server from the command line.\"></p>\n<p>Let's test out the app by going to \"localhost:8000\"\nin the web browser. We should get a simple success message that the app\nis running and responding to requests.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/bottle-app-web-browser.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Simple success message in the web browser that the Bottle app is running.\"></p>\n<p>Next we need to obtain a phone number that our Bottle app can use to\ncall other phone numbers.</p>\n<h2>Obtain a Phone Number</h2>\n<p>Our basic Bottle web app is running but what we really want to do is dial\noutbound calls - which will be handled by <a href=\"https://www.twilio.com/\">Twilio</a>.</p>\n<p>In your web browser go to the\n<a href=\"https://www.twilio.com/try-twilio\">Twilio website and sign up for a free account</a>.\nYou can also sign into your existing Twilio account if you already have one.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Twilio sign up screen.\"></p>\n<p>The Twilio trial account allows you to dial and receive phone calls to\nyour own validated phone number. To dial and receive calls from any phone\nnumber then you need to upgrade your account (hit the upgrade button on the\ntop navigation bar to do that). Trial accounts are great for initial\ndevelopment before your application goes live but upgraded accounts are where\nthe real power comes in.</p>\n<p>Once you are signed into your Twilio account, go to the\n<a href=\"https://www.twilio.com/console/phone-numbers\">manage phone numbers screen</a>.\nOn this screen you can\n<a href=\"https://www.twilio.com/console/phone-numbers/search\">buy one or more phone numbers</a>\nor click on an existing phone number in your account to configure it.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/manage-phone-numbers.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Manage phone numbers screen.\"></p>\n<p>There is nothing for us to configure right now on the phone number\nconfiguration page because we are making outbound phone calls for this\ntutorial. Now that we have a phone number in hand, let's add the final bit\nof code to our Bottle app to get this app working.</p>\n<h2>Making Phone Calls</h2>\n<p>We need to add two new routes to our Bottle app so it can dial outbound\nphone calls. Modify your existing app.py file with the two new functions\nbelow, <code>twiml_response</code> and <code>outbound_call</code>. None of the other code in\nthis file needs to change other than adding those two new functions to\nwhat we wrote in the previous section.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport bottle\nfrom bottle import route, run, post, Response\nfrom twilio import twiml\nfrom twilio.rest import TwilioRestClient\n\n\napp = bottle.default_app()\n# plug in account SID and auth token here if they are not already exposed as\n# environment variables\ntwilio_client = TwilioRestClient()\n\n# add your Twilio phone number here\nTWILIO_NUMBER = os.environ.get('TWILIO_NUMBER', '+16093002984')\n# plug in your Ngrok Forwarding URL - we'll set it up in a minute\nNGROK_BASE_URL = os.environ.get('NGROK_BASE_URL', 'https://c6c6d4e8.ngrok.io')\n\n\n@route('/')\ndef index():\n    \"\"\"\n    Returns a standard text response to show the app is up and running.\n    \"\"\"\n    return Response(\"Bottle app running!\")\n\n\n@post('/twiml')\ndef twiml_response():\n    \"\"\"\n    Provides TwiML instructions in response to a Twilio POST webhook\n    event so that Twilio knows how to handle the outbound phone call\n    when someone picks up the phone.\n    \"\"\"\n    response = twiml.Response()\n    response.say(\"Sweet, this phone call is answered by your Bottle app!\")\n    response.play(\"https://api.twilio.com/cowbell.mp3\", loop=10)\n    return Response(str(response))\n\n\n@route('/dial-phone/&lt;outbound_phone_number&gt;')\ndef outbound_call(outbound_phone_number):\n    \"\"\"\n    Uses the Twilio Python helper library to send a POST request to\n    Twilio telling it to dial an outbound phone call from our specific\n    Twilio phone number (that phone number must be owned by our Twilio \n    account).\n    \"\"\"\n    # the url must match the Ngrok Forwarding URL plus the route defined in\n    # the previous function that responds with TwiML instructions\n    twilio_client.calls.create(to=outbound_phone_number, \n                               from_=BLOG_POST_NUMBER,\n                               url=NGROK_BASE_URL + '/twiml')\n    return Response('phone call placed to ' + outbound_phone_number + '!')\n\n\nif __name__ == '__main__':\n    run(host='127.0.0.1', port=8000, debug=False, reloader=True)\n</pre></div>\n<p>There is just one problem with our current setup if you're developing on\na local environment: Twilio won't be able to reach that <code>/twiml</code> route.\nWe need to deploy our app to a reachable server, or just use a localhost\ntunneling tool like <a href=\"https://ngrok.com\">Ngrok</a>. Ngrok provides an external\nURL that connects to a port running on your machine.\n<a href=\"https://ngrok.com/download\">Download and install the Ngrok application</a>\nthat is appropriate for your operating system.</p>\n<p>We run Ngrok locally and expose our Bottle app that is running on\nport 8000. Run this command within the directory where the Ngrok executable is\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>./ngrok http 8000\n</pre></div>\n<p>Ngrok will start up and provide us with a Forwarding URL, with both HTTP\nand HTTPS versions.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/start-ngrok.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Ngrok started and running to serve as a localhost tunnel.\"></p>\n<p>We can use the Forwarding URL to instruct Twilio how to handle the outbound\nphone call when someone picks up. Insert the Ngrok forwarding URL into the\n<code>app.py</code> file where <code>NGROK_BASE_URL</code> is specified.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/access-ngrok.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Paste the ngrok Forwarding URL into the Twilio webhook configuration text box.\"></p>\n<p>If Ngrok is useful to you, make sure to read this\n<a href=\"https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html\">6 awesome reasons to use Ngrok when testing webhooks post</a>\nto learn even more about the tool.</p>\n<p>Time to test out our app, let's give it a quick spin.</p>\n<h2>Making Phone Calls</h2>\n<p>Make sure your Bottle development server is still running or re-run it with\nthe <code>python app.py</code> command in a shell where your virtualenv is still\nactivated.</p>\n<p>Bring up the application in a browser, this time test out the phone calling\ncapabilities. Go to \"localhost:8000/dial-phone/my-phone-number\", where\n\"my-phone-number\" is a number in the \"+12025551234\" format. For example,\nhere is what happens when I dialed +12023351278:</p>\n<p><img src=\"/img/160830-phone-calls-bottle/phone-call-placed.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Dialing an outbound phone call with Bottle.\"></p>\n<p>And here is the inbound phone call!</p>\n<p><img src=\"/img/160830-phone-calls-bottle/inbound-call.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Receiving an incoming phone call on the iPhone.\"></p>\n<p>When we pick up the phone call we also see the <code>/twiml</code> route get called via\nNgrok.</p>\n<p><img src=\"/img/160830-phone-calls-bottle/ngrok-twiml.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"/twiml route being called via Ngrok.\"></p>\n<p>With just two routes in our Bottle app and Twilio we were able to make\noutbound phone calls. Not bad!</p>\n<h2>What's next?</h2>\n<p>Sweet, we can now dial outbound phone calls to <em>any</em> phone number from\nour Bottle web application. Next you may want to try one of these tutorials\nto add even more features to your app:</p>\n<ul>\n<li>Upgrade your <a href=\"/blog/reply-sms-text-messages-python-bottle.html\">Bottle app to also send and respond to text messages</a></li>\n<li>Create a <a href=\"https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html\">phone-calling Slack bot</a></li>\n<li>Implement <a href=\"https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django\">call tracking</a>\nfor both inbound and outbound phone calls made through your app</li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub as\n<a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160830-phone-calls-bottle.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Create Your First Python 3.6 AWS Lambda Function", "body": "<div class=\"c9\">\n<p><a href=\"/aws-lambda.html\">Amazon Web Services (AWS) Lambda</a>\nprovides a usage-based compute service for running Python code in response\nto developer-defined events. For example, if an inbound HTTP POST\ncomes in to API Gateway or a new file is uploaded to\n<a href=\"https://aws.amazon.com/s3/\">AWS S3</a> then AWS Lambda can execute a function\nto respond to that API call or manipulate the file on S3.</p>\n<p>AWS Lambdas are not related to the Python languages' <code>lambda</code> expressions,\nwhich are used to create anonymous functions. The AWS Lambda name just\nhappens to collide with the the <code>lambda</code> keyword's name.</p>\n<p>Let's learn how to quickly write and run a Lambda function to execute\nbasic Python 3.6 code which uses environment variables as input.\nThis code, which is also <a href=\"https://github.com/fullstackpython/blog-code-examples\">available on GitHub under the blog-post-examples repository</a> can be\nchanged so that you can build much more complicated Python programs.</p>\n<h2>Our Tools</h2>\n<p>No local <a href=\"/development-environments.html\">development environment</a> tools\nare required for this tutorial, other than a web browser. All the work will\nhappen on AWS via their Console. </p>\n<p>These steps can also be completed from the command line via the\n<a href=\"https://boto3.readthedocs.io/en/latest/\">boto3</a> library, but we won't\ncover that in this post.</p>\n<p>If using Python 2 is still your jam rather than Python 3, take a look at\n<a href=\"/blog/aws-lambda-python-2-7.html\">this other post which shows how to execute Python 2.7 code on AWS Lambda</a>.</p>\n<h2>First Steps with AWS Lambda</h2>\n<p>Sign up for a new <a href=\"https://aws.amazon.com/\">Amazon Web Services account</a>,\nwhich provides a generous free tier, or use your existing AWS account.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/aws-amazon-com.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"AWS Lambda landing and sign in screen.\"></p>\n<p>After signing up a few tutorials may pop up, but skip past them and\ngo to the main Console. AWS has tons of services, with more being added\nevery month, so using the search box is the best way to get around.\nSelect the search text box, enter \"lambda\" and select \"Lambda\" to get to\nthe Lambda starting page.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/search-for-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Search for lambda in the dashboard text box.\"></p>\n<p>Click the \"Create a Lambda function\" button. The \"Select Blueprint\" page\nwill appear.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/select-blueprint.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The Select Blueprint Lambda screen.\"></p>\n<p>Select \"Blank Function\" and the \"Configure triggers\" page will come up.\nIt was non-obvious to me at first, but you don't actually need to configure a\ntrigger to move on. A trigger is how the Lambda function typically knows\nwhen to execute based on an event from another AWS service such as\n<a href=\"https://aws.amazon.com/api-gateway/\">API Gateway</a> or\n<a href=\"https://aws.amazon.com/cloudwatch/\">Cloudwatch</a>.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/configure-triggers.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Configure Lambda trigger screen.\"></p>\n<p>We won't configure a trigger for this function because we can manually\nkick off the Lambda to test it when we are finished configuring it. Leave\nthe trigger icon blank and click the \"Next\" button to move along. </p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/blank-lambda.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"The Lambda configuration screen.\"></p>\n<p>Next we get to the \"Configure function\" screen where we can finally write\nsome code!</p>\n<h2>Python Code for Our Lambda Function</h2>\n<p>Enter a name for the Lambda function, such as \"python_3_6_lambda_test\",\nas well as a description. A description is optional but it is useful\nwhen you have a dozens or hundreds of different Lambda functions and\nneed to keep them straight. In the Runtime drop-down, select Python 3.6 for\nthe programming language.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/python-3-6-lambda.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"Enter a name, description and use Python 3.6 for the Lambda.\"></p>\n<p>Beneath the Runtime drop-down there is a large text box for code,\nprepopulated with a <code>lambda_handler</code> function definition. The\n\"Code entry type\" drop-down can also be changed to allow uploading a ZIP\nfile or inputing a file from an S3 bucket. For our simple first\nLambda function we will stick to the \"Edit code inline\" option. Copy or type\nin the following code, replacing what is already in the text box. This\ncode is also available on <a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/aws-lambda-python-3-6/\">this open source GitHub repository</a>.</p>\n<div class=\"highlight\"><pre><span></span>import os\n\n\ndef lambda_handler(event, context):\n    what_to_print = os.environ.get(\"what_to_print\")\n    how_many_times = int(os.environ.get(\"how_many_times\"))\n\n    # make sure what_to_print and how_many_times values exist\n    if what_to_print and how_many_times &gt; 0:\n        for i in range(0, how_many_times):\n            # formatted string literals are new in Python 3.6\n            print(f\"what_to_print: {what_to_print}.\")\n        return what_to_print\n    return None\n</pre></div>\n<p>The code above contains a required <code>lambda_handler</code> function, which is\nAWS Lambda's defined hook so it knows where to begin execution. Think of\n<code>lambda_handler</code> as a <code>main</code> function, like the<br>\n<code>if __name__ == \"__main__\":</code> conditional line commonly used in Python files\nto ensure a block of code is executed when a script is run from the\ncommand line.</p>\n<p>The Python code expects two environment variables that are read by the\n<code>os</code> module with the <code>environ.get</code> function. With the <code>what_to_print</code> and\n<code>how_many_times</code> variables set by the environment variables, our code then\nprints a message zero or more times, based on the amount defined in\nthe <code>how_many_times</code> variable. If a message is printed at least once then\nthe function returns the <code>what_to_print</code> string, if nothing is printed\nthen <code>None</code> is returned.</p>\n<p>Below the code input text box on this function configuration screen there\nis a section to set environment variable key-value pairs.</p>\n<p>Enter the keys named <code>what_to_print</code> and <code>how_many_times</code> then enter their\nvalues. Use a string message for <code>what_to_print</code>'s value and an integer\nwhole number above 0 for <code>how_many_times</code>. Our Python code's error handling\nis not very robust so a value other than a number in the <code>how_many_times</code>\nvariable will cause the script to throw an error when it is executed due\nto the forced casting of <code>how_many_times</code> via the <code>int()</code> function.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/environment-variables.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Section to set environment variables for the Lambda function.\"></p>\n<p>The Python 3.6 code and the environment variables are now in place. We\njust need to handle a few more AWS-specific settings before we can test the\nLambda function.</p>\n<h2>Executing our Lambda Function</h2>\n<p>Scroll past the environment variables to the\n\"Lambda function handler and role\" section, which contains a few more\nrequired function configuration items. </p>\n<p>Keep the default handler set to <code>lambda_function.lambda_handler</code>. Select\n\"Create a new Role from template(s)\" from the drop-down then for the\n\"Role name\" field enter \"dynamodb_access\". Under \"Policy templates\"\nselect the \"Simple Microservice permissions\". </p>\n<p>The \"Simple Microservice permissions\" allows our Lambda to access\n<a href=\"https://aws.amazon.com/dynamodb/\">AWS DynamoDB</a>. We will not use DynamoDB in\nthis tutorial but the service is commonly used either as permanent or\ntemporary storage for Lambda functions.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/lambda-handler-and-role.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"For the final configuration, keep the default handler, create a new role from a template for Simple Microservice permissions and save it with a unique name.\"></p>\n<p>Our code and configuration is in place so click the \"Next\" button\nat the bottom right corner of the page.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/review-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Review Lambda configuration.\"></p>\n<p>The review screen shows us our configuration settings to make sure we\nselected the appropriate values for our new Lambda function. Scroll down\npress \"Create function\".</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/create-function.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the create function button to continue.\"></p>\n<p>Success message should appear on the next page below the \"Test\" button.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/test.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"Test button on the execution screen.\"></p>\n<p>Click the \"Test\" button to execute the Lambda. Lambda will prompt us for\nsome data to simulate an event that would kick off our function. Select\nthe \"Hello World\" sample event template, which contains some keys but our\nLambda will not use that in its execution. Click the \"Save and test\" button\nat the bottom of the modal.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/sample-event-template.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"Sample event template for Lambda execution.\"></p>\n<p>Scroll down to the \"Execution result\" section where we can see our output.</p>\n<p><img src=\"/img/170429-aws-lambda-python-3-6/execution-results.jpg\" width=\"100%\" class=\"shot outl rnd\" alt=\"Results from executing our new Lambda function.\"></p>\n<p>The log output shows us the return value of our function, which in this\nexecution was the string message from <code>what_to_print</code>. We can also see\nour print function produced output five times as expected based on the\namount set in the <code>how_many_times</code> environment variable.</p>\n<h2>Next Steps</h2>\n<p>You just configured, coded and executed your first Python 3.6 AWS Lambda\nfunction! The real power of Lambda comes in when you use triggers to\nyour Lambda function so it executes based on events that happen.\nWe will take a look at that in the next tutorial.</p>\n<p>View the <a href=\"/aws-lambda.html\">AWS Lambda Full Stack Python page</a> for additional\nexamples and tutorials that other folks have shared for Lambda with Python.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170429-python-3-6-aws-lambda.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Become A Successful Self-Taught Software Developer", "body": "<div class=\"c9\">\n<p>I received the following question via email from someone spending\nsignificant effort learning how to code in anticipation of obtaining\nfull-time job with those skills. The question is also frequently\nasked by university students and coding bootcamp graduates. </p>\n<p>This post provides my current answer on how get your first full-time job\nas a software developer. My answer assumes that the definition\nof \"successful path\" for a self-taught developer is getting a\nfull-time position after investing so much time learning to code.</p>\n<p>Note though that as I describe in my answer below, I took\n<a href=\"http://www.mattmakai.com/matt-makai-resume.pdf\">a more \"traditional\" route</a>\nto become a professional software developer. Therefore my response should\nbe only one of many that you solicit while working towards making the\nleap from self-taught to professional software developer.</p>\n<h2>(Paraphrased) Original Question</h2>\n<blockquote>\n<p>I'm not sure what I should learn first to become a developer. </p>\n<p>Right now the path I am on is/was: Learn basic python fundamentals -&gt;\ngit/github -&gt; ubuntu/linux OS--&gt; flask/jinja2 --&gt; Bootstrap -&gt;\nSQLalchemy -&gt; Docker -&gt; Celery -&gt; Redis -&gt; AWS -&gt; Django?!</p>\n<p>I don't know where JS / Angular2 / ECMAscript6 / HTML / CSS all fit\ninto this...</p>\n<p>What is the ideal path to becoming a successful self-taught developer\nso I can eventually get a job as a software developer?\"</p>\n</blockquote>\n<h3>My tl;dr answer</h3>\n<p>Go very deep in one area you really enjoy working after you learn the\nfundamentals and get a broad overview of the language's ecosystem. Leverage\nyour depth in your targeted expertise area when you find teams that need\nthat skill to land your first full-time job.</p>\n<h3>Answer Context</h3>\n<p>Figuring out what order to go in when learning is definitely one of the\ntrickiest problems for self-guided learners. I'm not sure my answer to your\nquestion is the best one that you can get because for better or worse I\ntook four years of computer science (CS) in high school, followed by\nundergrad CS &amp; grad school CS (while working as a full-time developer).\nThat route seems like the \"traditional developer\" background. However, I\nwill do my best to give an answer. You are definitely not the only person\nwho faces this issue.</p>\n<p>I typically see self-taught and developer bootcamp grads feel like to\nget a job they have to learn everything from the\n<a href=\"/databases.html\">database backend</a> up through the\n<a href=\"/web-frameworks.html\">web frameworks</a> to every new\n<a href=\"/javascript.html\">JavaScript</a> frontend framework that comes out,\nbut that's definitely not true. When you land that first full-time\ndeveloper gig it will be because a development team sees you have a\nparticular skill that their team lacks and they need help with on their\nproject(s).</p>\n<h3>Going deep</h3>\n<p>If you find yourself coding front-end stuff but wishing you could get\nback to optimizing the database, you should focus on going much, much\ndeeper in database optimization. Learn as much as you can about SQL,\nDDLs, DMLs, <a href=\"/object-relational-mappers-orms.html\">ORMs</a>,\n<a href=\"/postgresql.html\">PostgreSQL</a>, database testing and performance tuning.\nConstantly go deeper. Spend most of your time coding but when possible also\nteach others what you're learning. Some folks prefer to teach by writing blog\nposts. Other people enjoy giving tutorials at a meetup. You also mentor\nothers in-person or remote on video chats who are also new to software\ndevelopment. </p>\n<p>By teaching others you are not being purely altruistic: explaining\nprogramming and answering others' questions will reinforce in your own mind\nwhat you have learned and where your gaps remain based on the questions.\nExperiment with code to learn more and continue to go deeper. Create a\nfeedback loop where you code, learn, write and find new unexplored veins\nto learn more in that area.</p>\n<p>You should be ready to start job hunting once you have a good feedback loop\nwhere you are digging into your favorite subject area and are teaching it to\nothers in some way.</p>\n<h3>Job searching</h3>\n<p>When you've gone deep in your subject, search for jobs that have a bit\nof a full-stack flavor with an emphasis on your specialty. Reach out via\nemail to developers on the team or the hiring managers. Ask them for advice\non what skills successful developers on their teams have an what unsuccessful\ncandidates were lacking for their positions. Use their answers as data points\nfor what you may still need to learn when their responses are relevant to\nthe area you're going deep in. </p>\n<p>When you feel you are ready, see if you can grab lunch or video chat with\ndevelopers on those teams to learn more about their work. If that goes well,\nask them if they'd refer you into the interview queue. Referrals will get you\nmuch further than applying through a human resources resume collection\nsystem. </p>\n<p>Look for both software development junior roles and technical support\nroles, if the technical support roles are at software-focused companies.\nFor example, <a href=\"https://www.twilio.com/company/jobs\">Twilio's Support team</a>\noften hires folks who have limited development experience but over time they\ncan learn how to debug coding issues based on all the support tickets they\nhave to answer (along with continued self-paced learning). </p>\n<h3>Interviewing and working tips</h3>\n<p>Enthusiasm is crucial for obtaining and doing well in your first few jobs.\nIn hindsight, a lot of the enterprise software I worked on right out of\ncollege was horrible, but it was all new to me so I soaked up as much\nknowledge as possible while asking the tech leads and architects around\nme a ton of questions. Enjoy climbing steep learning curves.</p>\n<p>Keep your cynicism and any \"I'm better than this\" attitude in check\nbecause companies have a ton of unexciting grunt work that needs to\nget done. The grunt work will teach you how to become a better software\ndeveloper.</p>\n<p>While looking for your first position, always be working on dozens of\npotential opportunities and do not pin your hopes up on one specific\njob. The goal is to get your first development gig that will help you\ncontinue to learn, not to land your dream job. The dream job comes later\nwhen you actually have enough experience to know what your dream job looks\nlike!</p>\n<p>You will eventually land your first development gig. Then you will have\nto constantly keep learning and the great part is that you'll get paid for\nit.</p>\n<h3>Feedback</h3>\n<p>What other questions can I answer and\n<a href=\"/table-of-contents.html\">what additional topics</a> can I add to\nFull Stack Python that would be immensely helpful to new folks who are\nstruggling to become self-taught developers?</p>\n<p>Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>How should I improve this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170514-self-taught-developer-path.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Responsive Bar Charts with Bokeh, Flask and Python 3", "body": "<div class=\"c9\">\n<p><a href=\"/bokeh.html\">Bokeh</a> is a powerful open source Python library that allows\ndevelopers to generate JavaScript data visualizations for their web\napplications <em>without writing any JavaScript</em>. While learning a\nJavaScript-based data visualization library like <a href=\"https://d3js.org/\">d3.js</a>\ncan be useful, it's often far easier to knock out a few lines of Python\ncode to get the job done.</p>\n<p>With Bokeh, we can create incredibly detailed interactive visualizations,\nor just traditional ones like the following bar chart.</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-64.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 64 bars.\"></p>\n<p>Let's use the\n<a href=\"/flask.html\">Flask</a> <a href=\"/web-frameworks.html\">web framework</a> with Bokeh to\ncreate custom bar charts in a Python web app.</p>\n<h2>Our Tools</h2>\n<p>This tutorial works with either <a href=\"/python-2-or-3.html\">Python 2 or 3</a>,\nbut Python 3 is strongly recommended for new applications. I used\n<a href=\"https://www.python.org/downloads/release/python-361/\">Python 3.6.1</a> while\nwriting this post. In addition to Python throughout this tutorial we\nwill also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a>: </p>\n<ul>\n<li><a href=\"/flask.html\">Flask</a> web framework,\n<a href=\"https://github.com/pallets/flask/releases/tag/0.12.2\">version 0.12.2</a></li>\n<li><a href=\"/bokeh.html\">Bokeh</a> data visualization library,\n<a href=\"https://github.com/bokeh/bokeh/releases/tag/0.12.5\">version 0.12.5</a></li>\n<li><a href=\"/pandas.html\">pandas</a> data structures and analysis library,\n<a href=\"https://github.com/pandas-dev/pandas/releases/tag/v0.20.1\">version 0.20.1</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come\npackaged with Python 3, to install and isolate the Flask, Bokeh,\nand pandas libraries from any other Python projects you might be\nworking on</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS</a></p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">bar-charts-bokeh-flask-python-3 directory of the blog-code-examples repository</a>.\nUse and abuse the source code as you like for your own applications.</p>\n<h2>Installing Bokeh and Flask</h2>\n<p>Create a fresh virtual environment for this project to isolate our\ndependencies using the following command in the terminal. I typically run\nthis command within a separate <code>venvs</code> directory where all my virtualenvs\nare store.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv barchart\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source barchart/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Activating our Python virtual environment on the command line.\"></p>\n<p>Keep in mind that you need to activate the virtualenv in every new terminal\nwindow where you want to use the virtualenv to run the project.</p>\n<p>Bokeh and Flask are installable into the now-activated virtualenv\nusing pip. Run this command to get the appropriate Bokeh and Flask\nversions.</p>\n<div class=\"highlight\"><pre><span></span>pip install bokeh==0.12.5 flask==0.12.2 pandas==0.20.1\n</pre></div>\n<p>After a brief download and installation period our required dependencies\nshould be installed within our virtualenv. Look for output to confirm\neverything worked.</p>\n<div class=\"highlight\"><pre><span></span>Installing collected packages: six, requests, PyYAML, python-dateutil, MarkupSafe, Jinja2, numpy, tornado, bokeh, Werkzeug, itsdangerous, click, flask, pytz, pandas\n  Running setup.py install for PyYAML ... done\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for tornado ... done\n  Running setup.py install for bokeh ... done\n  Running setup.py install for itsdangerous ... done\nSuccessfully installed Jinja2-2.9.6 MarkupSafe-1.0 PyYAML-3.12 Werkzeug-0.12.2 bokeh-0.12.5 click-6.7 flask-0.12.2 itsdangerous-0.24 numpy-1.12.1 pandas-0.20.1 python-dateutil-2.6.0 pytz-2017.2 requests-2.14.2 six-1.10.0 tornado-4.5.1\n</pre></div>\n<p>Now we can start building our web application.</p>\n<h2>Starting Our Flask App</h2>\n<p>We are going to first code a basic Flask application then add our bar\nchart to the rendered page.</p>\n<p>Create a folder for your project then within it create a file named\n<code>app.py</code> with these initial contents:</p>\n<div class=\"highlight\"><pre><span></span>from flask import Flask, render_template\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/&lt;int:bars_count&gt;/\")\ndef chart(bars_count):\n    if bars_count &lt;= 0:\n        bars_count = 1\n    return render_template(\"chart.html\", bars_count=bars_count)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>The above code is a short one-route <a href=\"/flask.html\">Flask</a> application\nthat defines the <code>chart</code> function. <code>chart</code> takes in an arbitrary integer\nas input which will later be used to define how much data we want in our\nbar chart. The <code>render_template</code> function within <code>chart</code> will use a template\nfrom Flask's default <a href=\"/template-engines.html\">template engine</a> named\n<a href=\"/jinja2.html\">Jinja2</a> to output HTML. </p>\n<p>The last two lines in the allow us to run the Flask application from the\ncommand line on port 5000 in debug mode. Never use debug mode for production,\nthat's what <a href=\"/wsgi-servers.html\">WSGI servers</a> like\n<a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a> are built for.</p>\n<p>Create a subdirectory within your project folder named <code>templates</code>. Within\n<code>templates</code> create a file name <code>chart.html</code>. <code>chart.html</code> was referenced in\nthe <code>chart</code> function of our <code>app.py</code> file so we need to create it before our\napp will run properly. Populate <code>chart.html</code> with the following\n<a href=\"/jinja2.html\">Jinja2</a> markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Bar charts with Bokeh!<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Bugs found over the past <span class=\"cp\">{{</span> <span class=\"nv\">bars_count</span> <span class=\"cp\">}}</span> days<span class=\"p\">&lt;/</span>h1&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p><code>chart.html</code>'s boilerplate displays the number of bars passed into the\n<code>chart</code> function via the URL. </p>\n<p>The <code>&lt;h1&gt;</code> tag's message on the number of bugs found goes along with our\nsample app's theme. We will pretend to be charting the number of bugs\nfound by automated tests run each day.</p>\n<p>We can test our application out now.</p>\n<p>Make sure your virtualenv is still activated and that you are in the\nbase directory of your project where <code>app.py</code> is located. Run <code>app.py</code>\nusing the <code>python</code> command.</p>\n<div class=\"highlight\"><pre><span></span>$(barchart) python app.py\n</pre></div>\n<p>Go to <a href=\"http://localhost:5000/16/\">localhost:5000/16/</a> in your web browser.\nYou should see a large message that changes when you modify the URL.</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/basic-app-no-chart.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Simple Flask app without bar chart\"></p>\n<p>Our simple Flask route is in place but that's not very exciting. Time\nto add our bar chart.</p>\n<h2>Generating the Bar Chart</h2>\n<p>We can build on the basic Flask app foundation that we just wrote with\nsome new Python code that uses <a href=\"/bokeh.html\">Bokeh</a>. </p>\n<p>Open <code>app.py</code> back up and change the top of the file to include the\nfollowing imports.</p>\n<div class=\"highlight\"><pre><span></span>import random\nfrom bokeh.models import (HoverTool, FactorRange, Plot, LinearAxis, Grid,\n                          Range1d)\nfrom bokeh.models.glyphs import VBar\nfrom bokeh.plotting import figure\nfrom bokeh.charts import Bar\nfrom bokeh.embed import components\nfrom bokeh.models.sources import ColumnDataSource\nfrom flask import Flask, render_template\n</pre></div>\n<p>Throughout the rest of the file we will need these Bokeh imports along\nwith the <code>random</code> module to generate data and our bar chart.</p>\n<p>Our bar chart will use \"software bugs found\" as a theme. The data will\nbe randomly generated each time the page is refreshed. In a real application\nyou'd have a more stable and useful data source!</p>\n<p>Continue modifying <code>app.py</code> so the section after the imports looks like\nthe following code. </p>\n<div class=\"highlight\"><pre><span></span>app = Flask(__name__)\n\n\n@app.route(\"/&lt;int:bars_count&gt;/\")\ndef chart(bars_count):\n    if bars_count &lt;= 0:\n        bars_count = 1\n\n    data = {\"days\": [], \"bugs\": [], \"costs\": []}\n    for i in range(1, bars_count + 1):\n        data['days'].append(i)\n        data['bugs'].append(random.randint(1,100))\n        data['costs'].append(random.uniform(<span class=\"mf\">1.00</span>, <span class=\"mf\">1000.00</span>))\n\n    hover = create_hover_tool()\n    plot = create_bar_chart(data, \"Bugs found per day\", \"days\",\n                            \"bugs\", hover)\n    script, div = components(plot)\n\n    return render_template(\"chart.html\", bars_count=bars_count,\n                           the_div=div, the_script=script)\n</pre></div>\n<p>The <code>chart</code> function gains three new lists that are randomly generated\nby\n<a href=\"https://docs.python.org/3/library/random.html\">Python 3's super-handy random module</a>.</p>\n<p><code>chart</code> calls two functions, <code>create_hover_tool</code> and <code>create_bar_chart</code>.\nWe haven't written those functions yet so continue adding code below <code>chart</code>:</p>\n<div class=\"highlight\"><pre><span></span>def create_hover_tool():\n    # we'll code this function in a moment\n    return None\n\n\ndef create_bar_chart(data, title, x_name, y_name, hover_tool=None,\n                     width=1200, height=300):\n    \"\"\"Creates a bar chart plot with the exact styling for the centcom\n       dashboard. Pass in data as a dictionary, desired plot title,\n       name of x axis, y axis and the hover tool HTML.\n    \"\"\"\n    source = ColumnDataSource(data)\n    xdr = FactorRange(factors=data[x_name])\n    ydr = Range1d(start=0,end=max(data[y_name])*<span class=\"mf\">1.5</span>)\n\n    tools = []\n    if hover_tool:\n        tools = [hover_tool,]\n\n    plot = figure(title=title, x_range=xdr, y_range=ydr, plot_width=width,\n                  plot_height=height, h_symmetry=False, v_symmetry=False,\n                  min_border=0, toolbar_location=\"above\", tools=tools,\n                  responsive=True, outline_line_color=\"#666666\")\n\n    glyph = VBar(x=x_name, top=y_name, bottom=0, width=.8,\n                 fill_color=\"#e12127\")\n    plot.add_glyph(source, glyph)\n\n    xaxis = LinearAxis()\n    yaxis = LinearAxis()\n\n    plot.add_layout(Grid(dimension=0, ticker=xaxis.ticker))\n    plot.add_layout(Grid(dimension=1, ticker=yaxis.ticker))\n    plot.toolbar.logo = None\n    plot.min_border_top = 0\n    plot.xgrid.grid_line_color = None\n    plot.ygrid.grid_line_color = \"#999999\"\n    plot.yaxis.axis_label = \"Bugs found\"\n    plot.ygrid.grid_line_alpha = <span class=\"mf\">0.1</span>\n    plot.xaxis.axis_label = \"Days after app deployment\"\n    plot.xaxis.major_label_orientation = 1\n    return plot\n</pre></div>\n<p>There is a whole lot of new code above so let's break it down. The\n<code>create_hover_tool</code> function does not do anything yet, it simply\nreturns <code>None</code>, which we can use if we do not want a hover tool. The hover\ntool is an overlay that appears when we move our mouse cursor over one of\nthe bars or touch a bar on a touchscreen so we can see more data about the\nbar.</p>\n<p>Within the <code>create_bar_chart</code> function we take in our generated data source\nand convert it into a <code>ColumnDataSource</code> object that is one type of input\nobject we can pass to Bokeh functions. We specify two ranges for the chart's\nx and y axes.</p>\n<p>Since we do not yet have a hover tool the <code>tools</code> list will remain empty.\nThe line where we create <code>plot</code> using the <code>figure</code> function is where a lot of\nthe magic happens. We specify all the parameters we want our graph to have\nsuch as the size, toolbar, borders and whether or not the graph should be\nresponsive upon changing the web browser size.</p>\n<p>We create vertical bars with the <code>VBar</code> object and add them to the plot using\nthe <code>add_glyph</code> function that combines our source data with the <code>VBar</code>\nspecification.</p>\n<p>The last lines of the function modify the look and feel of the graph. For\nexample I took away the <code>Bokeh</code> logo by specifying <code>plot.toolbar.logo = None</code>\nand added labels to both axes. I recommend keeping the\n<a href=\"http://bokeh.pydata.org/en/latest/docs/reference/plotting.html#bokeh-plotting\">bokeh.plottin</a>\ndocumentation open to know what your options are for customizing your\nvisualizations.</p>\n<p>We just need a few updates to our <code>templates/chart.html</code> file to display\nthe visualization. Open the file and add these 6 lines to the file.\nTwo of these lines are for the required CSS, two are JavaScript Bokeh\nfiles and the remaining two are the generated chart.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Bar charts with Bokeh!<span class=\"p\">&lt;/</span>title&gt;\n    &lt;link <span class=\"na\">href</span>=<span class=\"s\">\"http://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css\"</span> <span class=\"na\">rel</span>=<span class=\"s\">\"stylesheet\"</span>&gt;\n    &lt;link <span class=\"na\">href</span>=<span class=\"s\">\"http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.0.min.css\"</span> <span class=\"na\">rel</span>=<span class=\"s\">\"stylesheet\"</span>&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Bugs found over the past <span class=\"cp\">{{</span> <span class=\"nv\">bars_count</span> <span class=\"cp\">}}</span> days<span class=\"p\">&lt;/</span>h1&gt;\n    <span class=\"cp\">{{</span> <span class=\"nv\">the_div</span>|safe <span class=\"cp\">}}</span>\n    &lt;script <span class=\"na\">src</span>=<span class=\"s\">\"http://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.js\"</span><span class=\"p\">&gt;&lt;/</span>script&gt;\n    &lt;script <span class=\"na\">src</span>=<span class=\"s\">\"http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.5.min.js\"</span><span class=\"p\">&gt;&lt;/</span>script&gt;\n    <span class=\"cp\">{{</span> <span class=\"nv\">the_script</span>|safe <span class=\"cp\">}}</span>\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>Alright, let's give our app a try with a simple chart of 4 bars. The\nFlask app should automatically reload when you save <code>app.py</code> with the new\ncode but if you shut down the development server fire it back up with the\n<code>python app.py</code> command.</p>\n<p>Open your browser to <a href=\"localhost:5000/4/\">localhost:5000/4/</a>.</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-4.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 4 bars.\"></p>\n<p>That one looks a bit sparse, so we can crank it up by 4x to 16 bars\nby going to <a href=\"localhost:5000/16/\">localhost:5000/16/</a>.</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-16.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 16 bars.\"></p>\n<p>Now another 4x to 128 bars with <a href=\"localhost:5000/128/\">localhost:5000/128/</a>...</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-128.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 128 bars.\"></p>\n<p>Looking good so far. But what about that hover tool to drill down into each\nbar for more data? We can add the hover with just a few lines of code\nin the <code>create_hover_tool</code> function.</p>\n<h2>Adding a Hover Tool</h2>\n<p>Within <code>app.py</code> modify the <code>create_hover_tool</code> to match the following\ncode.</p>\n<div class=\"highlight\"><pre><span></span>def create_hover_tool():\n    \"\"\"Generates the HTML for the Bokeh's hover data tool on our graph.\"\"\"\n    hover_html = \"\"\"\n      &lt;div&gt;\n<span class=\"s2\">        &lt;span class=\"hover-tooltip\"&gt;$x&lt;/span&gt;</span>\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;span class=\"hover-tooltip\"&gt;@bugs bugs&lt;/span&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n<span class=\"s2\">        &lt;span class=\"hover-tooltip\"&gt;<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"153155767a666166\">[email\u00a0protected]</a>{0.00}&lt;/span&gt;</span>\n      &lt;/div&gt;\n    \"\"\"\n    return HoverTool(tooltips=hover_html)\n</pre></div>\n<p>It may look really odd to have HTML embedded within your Python application,\nbut that's how we specify what the hover tool should display. We use\n<code>$x</code> to show the bar's x axis, <code>@bugs</code> to show the \"bugs\" field from our\ndata source, and <code><a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"705430131f030403\">[email\u00a0protected]</a>{0.00}</code> to show the \"costs\" field formatted as\na dollar amount with exactly 2 decimal places.</p>\n<p>Make sure you changed <code>return None</code> to <code>return HoverTool(tooltips=hover_html)</code>\nso we can see the results of our new function in the graph.</p>\n<p>Head back to the browser and reload the\n<a href=\"http://localhost:5000/128\">localhost:5000/128/</a> page.</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-128-hover-tool.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 128 bars and showing the hover tool.\"></p>\n<p>Nice work! Try playing around with the number of bars in the URL and the\nwindow size to see what the graph looks like under different conditions.</p>\n<p>The chart gets crowded with more than 100 or so bars, but you can give\nit a try with whatever number of bars you want. Here is what an\nimpractical amount of 50,000 bars looks like just for the heck of it:</p>\n<p><img src=\"/img/170526-bar-charts-bokeh-flask/chart-example-50000.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 50000 bars.\"></p>\n<p>Yea, we may need to do some additional work to display more than a few\nhundred bars at a time.</p>\n<h2>What's next?</h2>\n<p>You just created a nifty configurable bar chart in Bokeh. Next you can\nmodify the color scheme, change the input data source, try to create other\ntypes of charts or solve how to display very large numbers of bars.</p>\n<p>There is a lot more than Bokeh can do, so be sure to check out the\n<a href=\"http://bokeh.pydata.org/en/latest/\">official project documentation</a> ,\n<a href=\"https://github.com/bokeh/bokeh\">GitHub repository</a>,\nthe <a href=\"/bokeh.html\">Full Stack Python Bokeh page</a> or take a look at\n<a href=\"/table-of-contents.html\">other topics on Full Stack Python</a>.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>See something wrong in this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170526-bar-charts-bokeh.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Add Hosted Monitoring to Flask Web Applications", "body": "<div class=\"c9\">\n<p>How do you know whether your application is running properly with minimal\nerrors after <a href=\"/web-development.html\">building</a> and\n<a href=\"/deployment.html\">deploying</a> it? The fastest and easiest way\nto monitor your operational <a href=\"/flask.html\">Flask web application</a> is to\nintegrate one of the many available fantastic hosted\n<a href=\"/monitoring.html\">monitoring</a> tools.</p>\n<p>In this post we will quickly add <a href=\"https://rollbar.com\">Rollbar monitoring</a>\nto catch errors and visualize our application is running properly. There\nare also many other great hosted monitoring tools, which you can check\nout on the <a href=\"/monitoring.html\">monitoring</a> page.</p>\n<h2>Our Tools</h2>\n<p>We can use either <a href=\"/python-2-or-3.html\">Python 2 or 3</a> to build this\ntutorial, but Python 3 is <em>strongly</em> recommended for all new applications.\nI used\n<a href=\"https://www.python.org/downloads/release/python-362/\">Python 3.6.2</a> to\nexecute my code. We will also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a> throughout\nthe post: </p>\n<ul>\n<li><a href=\"/flask.html\">Flask</a> web framework,\n<a href=\"https://github.com/pallets/flask/releases/tag/0.12.2\">version 0.12.2</a></li>\n<li><a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">pyrollbar</a> monitoring\ninstrumentation library,\n<a href=\"https://github.com/rollbar/pyrollbar/tree/v0.13.12\">version 0.13.12</a></li>\n<li><a href=\"https://pypi.org/project/blinker\">blinker</a> for signaling support\nin Flask applications so pyrollbar can report on all errors</li>\n<li>A <a href=\"https://rollbar.com/\">free Rollbar account</a> where we will send error\ndata and view it when it is captured</li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and the\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> virtual environment\nlibrary, which come packaged with Python 3, to install and isolate the\nFlask and Rollbar libraries from other Python projects you are working on</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS</a>.</p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">monitor-flask-apps directory of the blog-code-examples repository</a>.\nUse and abuse the source code as you desire for your own applications.</p>\n<h2>Installing Dependencies</h2>\n<p>Change into the directory where you keep your Python virtualenvs.\nCreate a new virtual environment for this project using the following\ncommand.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv monitorflask\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source monitorflask/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/170723-monitor-flask-apps/activate-virtualenv.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Activating our Python virtual environment on the command line.\"></p>\n<p>Remember that you need to activate the virtualenv in every new terminal\nwindow where you want to use the virtualenv to run the project.</p>\n<p>Flask, Rollbar and Blinker can now be installed into the now-activated\nvirtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install flask==0.12.2 rollbar==0.13.12 blinker==1.4\n</pre></div>\n<p>Our required dependencies should be installed within our virtualenv\nafter a short installation period. Look for output like the following to\nconfirm everything worked.</p>\n<div class=\"highlight\"><pre><span></span>Installing collected packages: blinker, itsdangerous, click, MarkupSafe, Jinja2, Werkzeug, Flask, idna, urllib3, chardet, certifi, requests, six, rollbar\n  Running setup.py install for blinker ... done\n  Running setup.py install for itsdangerous ... done\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for rollbar ... done\nSuccessfully installed Flask-0.12.2 Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 blinker-1.4 certifi-2017.4.17 chardet-3.0.4 click-6.7 idna-2.5 itsdangerous-0.24 requests-2.18.1 rollbar-0.13.12 six-1.10.0 urllib3-1.21.1\n</pre></div>\n<p>Now that we have our Python dependencies installed into our virtualenv\nwe can create the initial version of our application.</p>\n<h2>Building Our Flask App</h2>\n<p>Create a folder for your project named <code>monitor-flask-apps</code>. Change into\nthe folder and then create a file named <code>app.py</code> with the following\ncode.</p>\n<div class=\"highlight\"><pre><span></span>import re\nfrom flask import Flask, render_template, Response\nfrom werkzeug.exceptions import NotFound\n\n\napp = Flask(__name__)\nMIN_PAGE_NAME_LENGTH = 2\n\n\n@app.route(\"/&lt;string:page&gt;/\")\ndef show_page(page):\n    try:\n        valid_length = len(page) &gt;= MIN_PAGE_NAME_LENGTH\n        valid_name = re.match(<span class=\"s1\">'^[a-z]+$'</span>, page.lower()) is not None\n        if valid_length and valid_name:\n            return render_template(\"{}.html\".format(page))\n        else:\n            msg = \"Sorry, couldn't find page with name {}\".format(page)\n            raise NotFound(msg)\n    except:\n        return Response(\"404 Not Found\")\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>The above application code has some standard Flask imports so we can\ncreate a Flask web app and render template files. We have a single\nfunction named <code>show_page</code> to serve a single Flask route. <code>show_page</code>\nchecks if the URL path contains only lowercase alpha characters for a\npotential page name. If the page name can be found in the <code>templates</code>\nfolder then the page is rendered, otherwise an exception is thrown\nthat the page could not be found. We need to create at least one template\nfile if our function is ever going to return a non-error reponse.</p>\n<p>Save <code>app.py</code> and make a new subdirectory named <code>templates</code> under your\nproject directory. Create a new file named <code>battlegrounds.html</code> and put\nthe following <a href=\"/jinja2.html\">Jinja2</a> template markup into it.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;You found the Battlegrounds GIF!<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;PUBG so good.<span class=\"p\">&lt;/</span>h1&gt;\n    &lt;img <span class=\"na\">src</span>=<span class=\"s\">\"https://media.giphy.com/media/3ohzdLMlhId2rJuLUQ/giphy.gif\"</span>&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>The above <a href=\"/jinja2.html\">Jinja2</a> template is basic HTML without any\n<a href=\"http://jinja.pocoo.org/docs/latest/templates/\">embedded template tags</a>.\nThe template creates a very plain page with a header description of\n\"PUBG so good\" and a GIF from this\n<a href=\"http://store.steampowered.com/app/578080/PLAYERUNKNOWNS_BATTLEGROUNDS/\">excellent computer game</a>.</p>\n<p>Time to run and test our code. Change into the base directory of your\nproject where <code>app.py</code> file is located. Execute <code>app.py</code> using the <code>python</code>\ncommand as follows (make sure your virtualenv is still activated in the\nterminal where you are running this command):</p>\n<div class=\"highlight\"><pre><span></span>python app.py\n</pre></div>\n<p>The Flask development server should start up and display a few lines\nof output.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/python-app-py.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Run the Flask development server locally.\"></p>\n<p>What happens when we access the application running on\n<a href=\"http://localhost:5000\">localhost port 5000</a>?</p>\n<p><img src=\"/img/170723-monitor-flask-apps/localhost-base-url.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Testing our Flask application at the base URL receives an HTTP 404 error.\"></p>\n<p>HTTP status 404 page not found, which is what we expected because we only\ndefined a single route and it did not live at the base path.</p>\n<p>We created a template named <code>battlegrounds.html</code> that should be accessible\nwhen we go to\n<a href=\"http://localhost:5000/battlegrounds/\">localhost:5000/battlegrounds/</a>.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/localhost-pubg-gif.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Testing our Flask application at /battlegrounds/ gets the proper template with a GIF.\"></p>\n<p>The application successfully found the <code>battlegrounds.html</code> template but\nthat is the only one available. What if we try\n<a href=\"http://localhost:5000/fullstackpython/\">localhost:5000/fullstackpython/</a>?</p>\n<p><img src=\"/img/170723-monitor-flask-apps/localhost-no-template.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"If no template is found we receive a 500 error.\"></p>\n<p>HTTP 500 error. That's no good.</p>\n<p>The 404 and 500 errors are obvious to us right now because we are\ntesting the application locally. However, what happens when the app is\ndeployed and a user gets the error in their own web browser? They will\ntypically quit out of frustration and you will never know what happened\nunless you add some error tracking and application monitoring.</p>\n<p>We will now modify our code to add Rollbar to catch and report those\nerrors that occur for our users.</p>\n<h2>Handling Errors</h2>\n<p>Head to <a href=\"https://rollbar.com/\">Rollbar's homepage</a> so we can add their\nhosted monitoring tools to our oft-erroring Flask app.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/rollbar-homepage.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Rollbar homepage in the web browser.\"></p>\n<p>Click the \"Sign Up\" button in the upper right-hand corner. Enter your\nemail address, a username and the password you want on the sign up page.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/sign-up.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Enter your basic account information on the sign up page.\"></p>\n<p>After the sign up page you will see the onboarding flow where you can\nenter a project name and select a programming language. For project\nname enter \"Battlegrounds\" and select that you are monitoring a Python app.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/create-new-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create a new project named 'Battlegrounds' and select Python as the programming language.\"></p>\n<p>Press the \"Continue\" button at the bottom to move along. The next\nscreen shows us a few quick instructions to add monitoring to our Flask\napplication.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/project-setup.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Set up your project using your server-side access token.\"></p>\n<p>Let's modify our Flask application to test whether we can properly connect\nto Rollbar's service. Change <code>app.py</code> to include the following highlighted\nlines. </p>\n<span class=\"highlight\"><div class=\"highlight\"><pre><span></span>import os\nimport re\n<span class=\"highlight\">import rollbar</span>\nfrom flask import Flask, render_template, Response\nfrom werkzeug.exceptions import NotFound\n\n\napp = Flask(__name__)\nMIN_PAGE_NAME_LENGTH = 2\n\n\n<span class=\"highlight\">@app.before_first_request</span>\n<span class=\"highlight\">def add_monitoring():</span>\n<span class=\"highlight\">    rollbar.init(os.environ.get('ROLLBAR_SECRET'))</span>\n<span class=\"highlight\">    rollbar.report_message('Rollbar is configured correctly')</span>\n\n\n@app.route(\"/&lt;string:page&gt;/\")\ndef show_page(page):\n    try:\n        valid_length = len(page) &gt;= MIN_PAGE_NAME_LENGTH\n        valid_name = re.match(<span class=\"s1\">'^[a-z]+$'</span>, page.lower()) is not None\n        if valid_length and valid_name:\n            return render_template(\"{}.html\".format(page))\n        else:\n            msg = \"Sorry, couldn't find page with name {}\".format(page)\n            raise NotFound(msg)\n    except:\n        return Response(\"404 Not Found\")\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>We added a couple of new imports, <code>os</code> and <code>rollbar</code>. <code>os</code> allows us to\ngrab environment variable values, such as our Rollbar secret key. <code>rollbar</code>\nis the library we installed earlier. The two lines below the Flask app\ninstantiation are to initialize Rollbar using the Rollbar secret token and\nsend a message to the service that it started correctly.</p>\n<p>The <code>ROLLBAR_SECRET</code> token needs to be set in an environment variable.\nSave an quit the <code>app.py</code>. Run <code>export ROLLBAR_SECRET='token here'</code> on the\ncommand line where your virtualenv is activated. This token can be found\non the Rollbar onboarding screen. </p>\n<p>I typically store all my environment variables in a file like\n<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/monitor-flask-apps/template.env\">template.env</a> and invoke it from the terminal using\nthe <code>. ./template.env</code> command. Make sure to avoid committing your secret\ntokens to a source control repository, especially if the repository is\npublic!</p>\n<p>After exporting your <code>ROLLBAR_SECRET</code> key as an environment variable\nwe can test that Rollbar is working as we run our application. Run it\nnow using <code>python</code>:</p>\n<div class=\"highlight\"><pre><span></span>python app.py\n</pre></div>\n<p>Back in your web browser press the \"Done! Go to Dashboard\" button. Don't\nworry about the \"Report an Error\" section code, we can get back to that in a\nmoment.</p>\n<p>If the event hasn't been reported yet we'll see a waiting screen like this\none:</p>\n<p><img src=\"/img/170723-monitor-flask-apps/waiting.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Waiting for data on the dashboard.\"></p>\n<p>Once Flask starts up though, the first event will be populated on the\ndashboard.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/first-event.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"First event populated on our dashboard for this project.\"></p>\n<p>Okay, our first test event has been populated, but we really want to see\nall the errors from our application, not a test event.</p>\n<h2>Testing Error Handling</h2>\n<p>How do we make sure real errors are reported rather than just a simple\ntest event? We just need to add a few more lines of code to our app.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport re\nimport rollbar\n<span class=\"highlight\">import rollbar.contrib.flask</span>\nfrom flask import Flask, render_template, Response\n<span class=\"highlight\">from flask import got_request_exception</span>\nfrom werkzeug.exceptions import NotFound\n\n\napp = Flask(__name__)\nMIN_PAGE_NAME_LENGTH = 2\n\n\n@app.before_first_request\ndef add_monitoring():\n    rollbar.init(os.environ.get('ROLLBAR_SECRET'))\n<span class=\"highlight\">    ## delete the next line if you dont want this event anymore</span>\n    rollbar.report_message('Rollbar is configured correctly')\n<span class=\"highlight\">    got_request_exception.connect(rollbar.contrib.flask.report_exception, app)</span>\n\n\n@app.route(\"/&lt;string:page&gt;/\")\ndef show_page(page):\n    try:\n        valid_length = len(page) &gt;= MIN_PAGE_NAME_LENGTH\n        valid_name = re.match(<span class=\"s1\">'^[a-z]+$'</span>, page.lower()) is not None\n        if valid_length and valid_name:\n            return render_template(\"{}.html\".format(page))\n        else:\n            msg = \"Sorry, couldn't find page with name {}\".format(page)\n            raise NotFound(msg)\n    except:\n<span class=\"highlight\">        rollbar.report_exc_info()</span>\n        return Response(\"404 Not Found\")\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>The above highlighted code modifies the application so it reports all Flask\nerrors as well as our HTTP 404 not found issues that happen within the\n<code>show_page</code> function. </p>\n<p>Make sure your Flask development server is running and try to go to\n<a href=\"http://localhost:5000/b/\">localhost:5000/b/</a>. You will receive an HTTP\n404 exception and it will be reported to Rollbar. Next go to\n<a href=\"http://localhost:5000/fullstackpython/\">localhost:5000/fullstackpython/</a> and\nan HTTP 500 error will occur.</p>\n<p>You should see an aggregation of errors as you test out these errors:</p>\n<p><img src=\"/img/170723-monitor-flask-apps/error-aggregation.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Rollbar dashboard showing aggregations of errors.\"></p>\n<p>Woohoo, we finally have our Flask app reporting all errors that occur\nfor any user back to the hosted Rollbar monitoring service!</p>\n<h2>What's Next?</h2>\n<p>We just learned how to catch and handle errors with Rollbar as a hosted\nmonitoring platform in a simple Flask application. Next you will want to\nadd monitoring to your more complicated web apps. You can also check out\nsome of Rollbar's more advanced features such as:</p>\n<ul>\n<li><a href=\"https://rollbar.com/docs/deploy-tracking/\">tracking and debugging deployment issues</a></li>\n<li><a href=\"https://rollbar.com/docs/person-tracking/\">sorting and viewing errors by user</a></li>\n<li><a href=\"https://rollbar.com/docs/custom-grouping/\">setting up custom rules to group errors</a></li>\n</ul>\n<p>There is a lot more to learn about <a href=\"/web-development.html\">web development</a>\nand <a href=\"/deployments.html\">deployments</a> so keep learning by reading up on\n<a href=\"/flask.html\">Flask</a> and other <a href=\"/web-frameworks.html\">web frameworks</a>\nsuch as <a href=\"/django.html\">Django</a>, <a href=\"/pyramid.html\">Pyramid</a> and\n<a href=\"/sanic.html\">Sanic</a>. You can also learn more about integrating Rollbar\nwith Python applications via\n<a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">their Python documentation</a>.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>See something wrong in this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170723-monitor-flask-apps.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix.</p>\n</span></div>"},
{"title": "How to Create Your First Static Site with Pelican and Jinja2", "body": "<div class=\"c9\">\n<p><a href=\"/pelican.html\">Pelican</a> is an incredibly well-built Python tool for\n<a href=\"/static-site-generator.html\">creating static sites</a>. </p>\n<p><a href=\"https://www.fullstackpython.com/\">Full Stack Python</a> is generated with\nPelican, <a href=\"/jinja2.html\">Jinja2 templates</a> and <a href=\"/markdown.html\">Markdown</a>.\nThis site is deployed to Amazon S3 and currently handles over one hundred\nthousand readers per month. There are never scaling concerns because a static\nsite is pre-generated before deployment and a web server simply responds\nwith existing files rather than executing any code on the server during\nthe HTTP request-response cycle.</p>\n<p>In this tutorial you will learn how to create your own\n<a href=\"/static-site-generator.html\">static website</a> from scratch using\n<a href=\"/pelican.html\">Pelican</a>.</p>\n<p><img src=\"/img/170609-static-sites-pelican/gunship-bootstrap-css.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Articles page after Bootstrap CSS has been added.\"></p>\n<p>Our simple static site will have pages that look like the above screenshot\nbut the entire site can be easily customized and expanded with your own design\nand content.</p>\n<h2>Our Tools</h2>\n<p>This tutorial should work with either <a href=\"/python-2-or-3.html\">Python 2 or 3</a>,\nbut Python 3 is strongly recommended for all new applications. I used\n<a href=\"https://www.python.org/downloads/release/python-361/\">Python 3.6.1</a> to\nwrite this post. In addition to Python, throughout this tutorial we\nwill also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a>: </p>\n<ul>\n<li><a href=\"/pelican.html\">Pelican</a>\n<a href=\"/static-site-generator.html\">static site generator</a>,\n<a href=\"https://github.com/getpelican/pelican/releases/tag/3.7.1\">version 3.7.1</a></li>\n<li><a href=\"/markdown.html\">Markdown</a> parsing library to handle Markdown as a content\ninput format, version\n<a href=\"https://github.com/waylan/Python-Markdown/releases/tag/2.6.8-final\">2.6.8</a></li>\n<li><a href=\"/jinja2.html\">Jinja2</a>, a Python <a href=\"/template-engines.html\">template engine</a>,\nversion <a href=\"https://github.com/pallets/jinja/releases/tag/2.9.6\">2.9.6</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come\npackaged with Python 3, to install and isolate the Pelican, Markdown,\nand Jinja2 libraries from any of your other Python projects</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured, take a\nlook at\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS</a></p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/generating-static-websites-pelican-jinja2-markdown\">generating-static-websites-pelican-jinja2-markdown directory of the blog-code-examples repository</a>.\nUse and abuse the source code as you like for your own applications.</p>\n<h2>Install the Pelican and Markdown libraries</h2>\n<p>Start by creating a new virtual environment for your project. My virtualenv\nis named <code>staticsite</code> but you can name yours whatever matches the project\nyou are creating.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv staticsite\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source staticsite/bin/activate\n</pre></div>\n<p>The virtualenv will prepend its name to your command prompt when it is\nactivated.</p>\n<p><img src=\"/img/170609-static-sites-pelican/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Create and activate the Python virtual environment.\"></p>\n<p>Install the appropriate dependencies after your virtualenv is activated.\nUse the <code>pip</code> command to install Pelican and Markdown, which will also\ninstall Jinja2 because Pelican specifies it as a dependency.</p>\n<div class=\"highlight\"><pre><span></span>pip install <span class=\"nv\">pelican</span>==<span class=\"m\">3</span>.7.1 <span class=\"nv\">markdown</span>==<span class=\"m\">2</span>.6.8\n</pre></div>\n<p>Run the <code>pip</code> command and after everything is installed you should see output\nsimilar to the following \"Successfully installed\" message.</p>\n<div class=\"highlight\"><pre><span></span>Installing collected packages: pygments, pytz, six, feedgenerator, blinker, unidecode, MarkupSafe, jinja2, python-dateutil, docutils, pelican, markdown\n  Running setup.py install for feedgenerator ... done\n  Running setup.py install for blinker ... done\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for markdown ... done\nSuccessfully installed MarkupSafe-1.0 blinker-1.4 docutils-0.13.1 feedgenerator-1.9 jinja2-2.9.6 markdown-2.6.8 pelican-3.7.1 pygments-2.2.0 python-dateutil-2.6.0 pytz-2017.2 six-1.10.0 unidecode-0.4.20\n</pre></div>\n<p>Now that our dependencies are installed into the virtualenv we can start\nbuilding our static site.</p>\n<h2>Generate a Basic Site</h2>\n<p>Create a new directory to store your project. My site will contain some of\nmy favorite <a href=\"https://www.youtube.com/watch?v=uYRZV8dV10w\">retro synthwave</a>\nartists as examples, but of course your site can contain whatever subjects\nthat you want.</p>\n<p>Change into the project directory after creating it.</p>\n<div class=\"highlight\"><pre><span></span>mkdir retrosynth\ncd retrosynth\n</pre></div>\n<p>Run the <code>pelican-quickstart</code> command within the new project directory.</p>\n<div class=\"highlight\"><pre><span></span>(staticsite) $ pelican-quickstart\n</pre></div>\n<p>The quickstart script will rattle off a bunch of questions. Follow\nalong with the answers below or modify them for your own site name and\ndesired configuration.</p>\n<div class=\"highlight\"><pre><span></span>Welcome to pelican-quickstart v3.7.1.\n\nThis script will help you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n\n&gt; Where do you want to create your new web site? [.]  \n&gt; What will be the title of this web site? RetroSynthwave\n&gt; Who will be the author of this web site? Matt Makai\n&gt; What will be the default language of this web site? [en] \n&gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n\n&gt; Do you want to enable article pagination? (Y/n) n\n&gt; What is your time zone? [Europe/Paris] America/New_York\n&gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)y\n&gt; Do you want an auto-reload &amp; simpleHTTP script to assist with theme and site development? (Y/n) y\n&gt; Do you want to upload your website using FTP? (y/N) n\n&gt; Do you want to upload your website using SSH? (y/N) n\n&gt; Do you want to upload your website using Dropbox? (y/N) n\n&gt; Do you want to upload your website using S3? (y/N) y\n&gt; What is the name of your S3 bucket? [my_s3_bucket] \n&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n\n&gt; Do you want to upload your website using GitHub Pages? (y/N) n\nDone. Your new project is available at /Users/matt/devel/py/retrosynth\n(staticsite) $ \n</pre></div>\n<p>What did we just create using Pelican's quickstart script? Check out\nthe new files in the directory.</p>\n<div class=\"highlight\"><pre><span></span>(staticsite) $ ls\nMakefile        develop_server.sh   pelicanconf.py\ncontent         fabfile.py          publishconf.py\n</pre></div>\n<p>The quickstart created five files and one new directory:</p>\n<ul>\n<li><code>Makefile</code>: <code>make</code> command convenience tasks for common operations such as\nrunning a development server, building a site and cleaning extraneous\nbuild files</li>\n<li><code>fabfile.py</code>: A <a href=\"http://www.fabfile.org/\">Fabric</a> file that has some of\nthe same types of commands as the <code>Makefile</code>. Fabric is a wonderful code\nlibrary but for now I recommend skipping the Fabric file because\nunfortunately Fabric does not yet support Python 3.</li>\n<li><code>develop_server.sh</code>: shell script for running the development server</li>\n<li><code>pelicanconf.py</code>: settings file for your Pelican project. If you are used\nto earlier versions of Pelican this file was instead named <code>settings.py</code></li>\n<li><code>publishconf.py</code>: another (optional) settings file that can be considered\nas a \"production\" settings file when you move past the development phase\nand want to deploy your site</li>\n<li><code>content</code>: location for your markup files, which should be stored under\n<code>pages</code> and <code>posts</code> directories</li>\n</ul>\n<p>We can use these files as the base for our new static site. Let's see what\nit looks like by default by running it via the <code>devserver</code> task in the\nMakefile.</p>\n<div class=\"highlight\"><pre><span></span>make devserver\n</pre></div>\n<p>The Pelican development server will start serving up your site with a\ndaemon process. Go to <a href=\"http://localhost:8000\">localhost:8000</a> in your web\nbrowser and you will see the first version of your static site.</p>\n<p><img src=\"/img/170609-static-sites-pelican/default-style.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Default styling on the Pelican static site.\"></p>\n<p>What if you don't have <code>make</code> installed on your system? Change into the\n<code>output</code> directory and use the <code>python -m http.server</code> command to use the\nbuilt-in Python 3 HTTP server for your generated files.</p>\n<p>When you want to kill the development server look for a file named\n<code>pelican.pid</code>under your project directory. The <code>pelican.pid</code> file is created\nby Pelican and contains the process ID for your development server.</p>\n<div class=\"highlight\"><pre><span></span>(staticsite) $ cat pelican.pid \n1365\n</pre></div>\n<p>Use the <code>ps</code> and <code>grep</code> commands to view the process then stop the process\nwith the <code>kill</code> command as follows. Remember that your process ID will almost\ndefinitely be different from the <code>1365</code> ID for my process.</p>\n<p>Kill the development server now so that we can use different commands to\nserve our site after we create our initial content.</p>\n<div class=\"highlight\"><pre><span></span>(staticsite) $ ps -A | grep 1365\n 1365 ttys003    0:01.43 /Library/Frameworks/Python.framework/Versions/3.6/Resources/Python.app/Contents/MacOS/Python /Users/matt/Envs/staticsite/bin/pelican --debug --autoreload -r /Users/matt/devel/py/retrosynth/content -o /Users/matt/devel/py/retrosynth/output -s /Users/matt/devel/py/retrosynth/pelicanconf.py\n 1411 ttys003    0:00.00 grep 1365\n(staticsite) $ kill 1365\n(staticsite) $ ps -A | grep 1365\n 1413 ttys003    0:00.00 grep 1365\n</pre></div>\n<p>It is up to you whether you want to use the development server or not\nwhile creating your site. Every time I want to view my changes for\nFull Stack Python I regenerate the site using my own Makefile that\nwraps the <code>pelican</code> command. The <code>python -m http.server</code> command constantly\nserves up each build's changes.</p>\n<p>Alright, now that we have our starter files we can get to work creating\nsome initial content.</p>\n<h2>Write Some Content</h2>\n<p>Pelican can accept both <a href=\"/markdown.html\">Markdown</a> and reStructureText\nmarkup files as input.</p>\n<p>Make a new subdirectory under the <code>content</code> named <code>posts</code>. Change into\nthe <code>posts</code> directory. Create a new file named <code>gunship.markdown</code> with\nthe following content.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nl\">title</span>: Gunship\n<span class=\"nl\">slug</span>: gunship\n<span class=\"nl\">category</span>: bands\n<span class=\"nl\">date</span>: 2017-<span class=\"mo\">06</span>-09\n<span class=\"nl\">modified</span>: 2017-<span class=\"mo\">06</span>-09\n\n\n[Gunship](<span class=\"nl\">https</span>://www.gunshipmusic.com/) is a *retro synthwave* artist out of the UK.\n\n[Revel in Your Time](<span class=\"nl\">https</span>:<span class=\"c1\">//www.youtube.com/watch?v=uYRZV8dV10w), </span>\n[Tech Noir](<span class=\"nl\">https</span>:<span class=\"c1\">//www.youtube.com/watch?v=-nC5TBv3sfU), </span>\n[Fly for Your Life](<span class=\"nl\">https</span>:<span class=\"c1\">//www.youtube.com/watch?v=Jv1ZN8c4_Gs) </span>\nand \n[The Mountain](<span class=\"nl\">https</span>:<span class=\"c1\">//www.youtube.com/watch?v=-HYRTJr8EyA) </span>\nare all quality songs by Gunship. Check out those amazing music videos!\n\nAlso take a look at other retro synthwave artists such as\n[Trevor Something](<span class=\"nl\">https</span>://trevorsomething.bandcamp.com/), \n[Droid Bishop](<span class=\"nl\">https</span>://droidbishop.bandcamp.com/),\n[FM-84](<span class=\"nl\">https</span>://fm84.bandcamp.com/)\nand \n[Daniel Deluxe](<span class=\"nl\">https</span>://danieldeluxe.bandcamp.com/).\n</pre></div>\n<p>Our <code>make</code> file can also help us regenerate the site when changes occur\nif we choose to not use the development server.</p>\n<p>We used the <code>devserver</code> task earlier, but what other task are available\nto us via the <code>Makefile</code>?</p>\n<div class=\"highlight\"><pre><span></span>make\n</pre></div>\n<p><code>make</code> should show us all of the following tasks we can run.</p>\n<div class=\"highlight\"><pre><span></span>Makefile for a pelican Web site                                           \n\nUsage:                                                                    \n   make html                           (re)generate the web site          \n   make clean                          remove the generated files         \n   make regenerate                     regenerate files upon modification \n   make publish                        generate using production settings \n   make serve [PORT=8000]              serve site at http://localhost:8000\n   make serve-global [SERVER=0.0.0.0]  serve (as root) to :80    \n   make devserver [PORT=8000]          start/restart develop_server.sh    \n   make stopserver                     stop local server                  \n   make ssh_upload                     upload the web site via SSH        \n   make rsync_upload                   upload the web site via rsync+ssh  \n   make dropbox_upload                 upload the web site via Dropbox    \n   make ftp_upload                     upload the web site via FTP        \n   make s3_upload                      upload the web site via S3         \n   make cf_upload                      upload the web site via Cloud Files\n   make github                         upload the web site via gh-pages   \n\nSet the DEBUG variable to 1 to enable debugging, e.g. make DEBUG=1 html   \nSet the RELATIVE variable to 1 to enable relative urls\n</pre></div>\n<p>The <code>html</code> task is what we are looking for to invoke the <code>pelican</code> command\nusing our <code>pelicanconf.py</code> settings file.</p>\n<div class=\"highlight\"><pre><span></span>(staticsite) $ make html\npelican /Users/matt/devel/py/retrosynth/content -o /Users/matt/devel/py/retrosynth/output -s /Users/matt/devel/py/retrosynth/pelicanconf.py \nDone: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages in 0.14 seconds.\n</pre></div>\n<p>Our site has been regenerated and placed in the <code>output</code> directory.</p>\n<p>If you used the <code>make devserver</code> command earlier then change into the <code>output</code>\ndirectory and give Python's built-in HTTP server a shot with the following\ncommand.</p>\n<div class=\"highlight\"><pre><span></span>cd output\npython -m http.server\n</pre></div>\n<p>Our first post in all its glory...</p>\n<p><img src=\"/img/170609-static-sites-pelican/gunship-first-post.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Gunship as our first band post on retro synthwave static site.\"></p>\n<p>You can change the HTTP server port binding by adding a number after the\ncommand, if you want to serve more than one static site at a time or you\nalready have an application bound to port 8000.</p>\n<div class=\"highlight\"><pre><span></span>python -m http.server 8005\n</pre></div>\n<p>Note that if you are using Python 2 the equivalent HTTP server command is\n<code>python -m SimpleHTTPServer</code>.</p>\n<p>Our site now has some very basic content. We could expand this start into\nmany more posts and pages but let's learn how to modify the site\nconfiguration.</p>\n<h2>Edit Site Configuration</h2>\n<p>Pelican's quickstart assumed a bunch of defaults that may or may not be\napplicable to your site. Open up the <code>pelicanconf.py</code> file to change some\nof the defaults.</p>\n<p>Look for the <code>TIMEZONE</code> variable. If it's not right for your location\nthen modify it to your zone. Wikipedia has a handy\n<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">table of valid time zones values</a>.</p>\n<p>Also modify the <code>LINKS</code> tuple to include your site (or Full Stack Python!)\ninstead of including the \"you can modify those links\" link. Change the\nlast line of <code>LINKS</code> so it looks like the following tuple of tuples.</p>\n<div class=\"highlight\"><pre><span></span># Blogroll\nLINKS = (('Pelican', 'http://getpelican.com/'),\n         ('Python.org', 'http://python.org/'),\n         ('Jinja2', 'http://jinja.pocoo.org/'),\n         ('Full Stack Python', 'https://www.fullstackpython.com/'),)\n</pre></div>\n<p>Instead of using the <code>make html</code> file, this time we will invoke the\n<code>pelican</code> command directly from the command line. There is nothing wrong\nwith the <code>Makefile</code>, but it is a good idea to get comfortable with Pelican\ndirectly instead of only through build files.</p>\n<div class=\"highlight\"><pre><span></span>pelican -s pelicanconf.py -o output content\n</pre></div>\n<p>Now run the HTTP server if you do not already have it running in another\nterminal window.</p>\n<div class=\"highlight\"><pre><span></span>cd output\npython -m http.server\n</pre></div>\n<p>Head back to the browser and refresh to view the updated configuration.</p>\n<p><img src=\"/img/170609-static-sites-pelican/updated-configuration.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"New links created by the pelicanconf.py configuration settings file.\"></p>\n<p>What happens when we click on the blog post title? It takes us to a\nvery similar-looking page with the\n<a href=\"http://localhost:8000/gunship.html\">localhost:8000/gunship.html</a> URL.</p>\n<p><img src=\"/img/170609-static-sites-pelican/gunship-post.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Gunship subpage for the site.\"></p>\n<p>Alright, we updated some basic site-wide data, but our site really could\nuse a change of paint.</p>\n<h2>Modify Site Theme</h2>\n<p>Changing the site theme is really where you can turn a standard blog into\nwhatever type of site you want to build. While the default Pelican\nconfiguration creates a blog template, you do not need to have a\nchronological structure if it is not right for your website.</p>\n<p>Create a new directory under your project directory that is named\n<code>theme</code>. Within <code>theme</code> create another directory named <code>templates</code>.\n<code>templates</code> is where our <a href=\"/jinja2.html\">Jinja2</a> templates will be stored and\ncan override the default theme.</p>\n<p>Start by creating a file named <code>base.html</code> which will store the boilerplate\nused by templates across the site. </p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html <span class=\"na\">lang</span>=<span class=\"s\">\"en\"</span>&gt;\n&lt;head&gt;\n &lt;title&gt;<span class=\"cp\">{%</span> block <span class=\"nv\">title</span> <span class=\"cp\">%}{%</span> endblock <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span>title&gt;\n<span class=\"p\">&lt;/</span>head&gt;\n&lt;body&gt;\n &lt;div <span class=\"na\">class</span>=<span class=\"s\">\"container\"</span>&gt;\n  <span class=\"cp\">{%</span> block <span class=\"nv\">content</span> <span class=\"cp\">%}{%</span> endblock <span class=\"cp\">%}</span>\n <span class=\"p\">&lt;/</span>div&gt; \n<span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>Within <code>theme/templates</code> create a file named <code>article.html</code> that will have a\ndifferent theme for blog posts than the rest of the site. Fill <code>article.html</code>\nwith the following Jinja2 markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> extends \"base.html\" <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> block <span class=\"nv\">title</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">article.title</span> <span class=\"cp\">}}{%</span> endblock <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> block <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n&lt;div <span class=\"na\">class=</span><span class=\"s\">\"row\"</span>&gt;\n &lt;div <span class=\"na\">class=</span><span class=\"s\">\"col-md-8\"</span>&gt;\n  &lt;h1&gt;<span class=\"cp\">{{</span> <span class=\"nv\">article.title</span> <span class=\"cp\">}}</span>&lt;/h1&gt;\n  &lt;label&gt;Posted on &lt;strong&gt;<span class=\"cp\">{{</span> <span class=\"nv\">article.date</span> <span class=\"cp\">}}</span>&lt;/strong&gt;&lt;/label&gt;\n  <span class=\"cp\">{{</span> <span class=\"nv\">article.content</span> <span class=\"cp\">}}</span>\n &lt;/div&gt;\n&lt;/div&gt;\n<span class=\"cp\">{%</span> endblock <span class=\"cp\">%}</span>\n</pre></div>\n<p>Next we will use a Jinja2 template to override the default <code>index.html</code> main\npage. Again within the <code>theme/templates</code> directory, create a file named\n<code>index.html</code> with the following markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> extends \"base.html\" <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> block <span class=\"nv\">title</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">SITENAME</span> <span class=\"cp\">}}{%</span> endblock <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> block <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n&lt;div <span class=\"na\">class=</span><span class=\"s\">\"row\"</span>&gt;\n &lt;div <span class=\"na\">class=</span><span class=\"s\">\"col-md-8\"</span>&gt;\n  &lt;h1&gt;<span class=\"cp\">{{</span> <span class=\"nv\">SITENAME</span> <span class=\"cp\">}}</span>&lt;/h1&gt;\n  <span class=\"cp\">{%</span> for <span class=\"nv\">article</span> in <span class=\"nv\">articles</span> <span class=\"cp\">%}</span>\n   &lt;h2&gt;&lt;a <span class=\"na\">href=</span><span class=\"s\">\"/</span><span class=\"cp\">{{</span> <span class=\"nv\">article.slug</span> <span class=\"cp\">}}</span><span class=\"s\">.html\"</span>&gt;<span class=\"cp\">{{</span> <span class=\"nv\">article.title</span> <span class=\"cp\">}}</span>&lt;/a&gt;&lt;/h2&gt;\n   &lt;label&gt;Posted on &lt;strong&gt;<span class=\"cp\">{{</span> <span class=\"nv\">article.date</span> <span class=\"cp\">}}</span>&lt;/strong&gt;&lt;/label&gt;\n   <span class=\"cp\">{{</span> <span class=\"nv\">article.content</span>|truncate(<span class=\"m\">110</span>) <span class=\"cp\">}}</span>\n  <span class=\"cp\">{%</span> else <span class=\"cp\">%}</span>\n   No posts yet!\n  <span class=\"cp\">{%</span> endfor <span class=\"cp\">%}</span>\n &lt;/div&gt;\n&lt;/div&gt;\n<span class=\"cp\">{%</span> endblock <span class=\"cp\">%}</span>\n</pre></div>\n<p>Regenerate the site and make sure you are serving it with the development\nserver or the <code>python -m http.server</code> command.</p>\n<p>Make sure to use the new <code>-t theme</code> flag to specify that the Jinja2\ntemplates within the <code>theme</code> directory should be applied to the site.</p>\n<div class=\"highlight\"><pre><span></span>pelican -s pelicanconf.py -o output -t theme content\n</pre></div>\n<p>Go to <a href=\"http://localhost:8000\">localhost:8000</a> and refresh the page.\nThe styling on the main page is now different because it uses the <code>index.html</code>\ntheme.</p>\n<p><img src=\"/img/170609-static-sites-pelican/index-no-styling.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"The index.html page without any styling applied.\"></p>\n<p>Click on the title of the Gunship post. This page uses the <code>article.html</code>\ntemplate, although it's hard to tell because there is no\n<a href=\"/cascading-style-sheets.html\">CSS</a> applied to the page.</p>\n<p><img src=\"/img/170609-static-sites-pelican/gunship-no-styling.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Articles have an entirely different theme based on article.html markup.\"></p>\n<p>Pretty sparse! We can at least add the Bootstrap CSS to the HTML to\nalign our content.</p>\n<p>Within <code>base.html</code>, add the following line for Bootstrap under\n<code>&lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;</code> and above <code>&lt;/head&gt;</code>.</p>\n<div class=\"highlight\"><pre><span></span>&lt;!-- Latest compiled and minified Bootstrap CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;\n</pre></div>\n<p>Regenerate the site and refresh the Gunship page.</p>\n<p><img src=\"/img/170609-static-sites-pelican/gunship-bootstrap-css.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Articles page after Bootstrap CSS has been added.\"></p>\n<p>Well at least our design has moved from 1996 to 2001. I am sure you can\ndo a whole lot more to improve your own site's design.</p>\n<p>The new <code>base.html</code> does not provide much of a theme yet but it at least\nprovides a fresh start for completely customized sites.</p>\n<h2>What's next?</h2>\n<p>You generated your first <a href=\"/pelican.html\">Pelican</a> static website using\n<a href=\"/markdown.html\">Markdown</a> and <a href=\"/jinja2.html\">Jinja2</a>. Additional modifications\ncan be made to the Jinja2 templates and the content contained in the Markdown\nfiles. </p>\n<p>Do you want to deploy your new static website to GitHub Pages or an S3 bucket?\nWell, that's a story for another <a href=\"/blog.html\">Full Stack Python tutorial</a>...</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. </p>\n<p>See something wrong in this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170609-static-sites-pelican.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "The Full Stack Python Blog", "body": "<div class=\"c9\">\n<p><a href=\"https://www.fullstackpython.com/\">Full Stack Python</a> began\n<a href=\"/change-log.html\">way back in December 2012</a>\nwhen I started writing the initial <a href=\"/deployment.html\">deployment</a>,\n<a href=\"/servers.html\">server</a>, <a href=\"/operating-systems.html\">operating system</a>,\n<a href=\"/web-servers.html\">web server</a> and <a href=\"/wsgi-servers.html\">WSGI server</a> pages.\nThe site has has broadly expanded out into a\n<a href=\"/table-of-contents.html\">many other subjects</a> outside the deployment\ntopics I originally started this site to explain.</p>\n<p>However, I frequently wanted to write a Python walkthrough that was not a\ngood fit for the page format I use for each topic. Many of those walkthroughs\nbecame <a href=\"https://www.twilio.com/blog/author/mmakai\">Twilio blog posts</a>\nbut not all of them were quite the right fit on there. I'll still write\nmore <a href=\"/twilio.html\">Twilio</a> tutorials, but this\n<a href=\"/blog.html\">Full Stack Python blog</a> is the spot for technical posts that\nfall outside the Twilio domain.</p>\n<p>Let me know what you think and what tutorials you'd like to see in the\nfuture. </p>\n<p>Hit me up on Twitter <a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n</div>"},
{"title": "How to Send SMS Text Messages with Python", "body": "<div class=\"c9\">\n<p>Short Message Service (SMS) text messages are ubiquitous for communication\nall over the world. It is easy to send SMS text messages from a\n<a href=\"/why-use-python.html\">Python</a> application using a\n<a href=\"/application-programming-interfaces.html\">web application programming interface (API)</a>.\nLet's take a look at the tools we need to quickly add SMS capability to our\nPython apps.</p>\n<h2>Tools We Need</h2>\n<p>This guide works with both Python 2 and 3, so make sure you have one of\nthose two versions installed.</p>\n<ul>\n<li>Either <a href=\"/python-2-or-3.html\">Python 2 or 3</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li>A free <a href=\"www.twilio.com/referral/w9pugq\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/sending-messages\">SMS web API</a></li>\n<li>Open source\n<a href=\"https://pypi.org/project/twilio\">Twilio Python helper library</a>,\n<a href=\"https://github.com/twilio/twilio-python/tree/6.0.0\">version 6.0.0</a>\nor later</li>\n</ul>\n<p>If you need assistance getting pip and virtualenv installed, check out the\nfirst few steps of the\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide that'll show how to install system packages for those tools.</p>\n<h2>Using a Web API</h2>\n<p>We're going to use a web API to make sending SMS easier and more reliable.\nHead to the\n<a href=\"www.twilio.com/referral/w9pugq\">Twilio website and sign up for a free trial account</a>\nawesome for more than just sending text messages!) then sign into your\nexisting account.</p>\n<p><img src=\"/img/160511-send-sms-python/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The Twilio trial account allows you to send text messages to your own\nvalidated phone number. When you want to send SMS to any phone number in\nyour country or other countries then you can upgrade your account to send\nmessages for fractions of a cent.</p>\n<p>After signing up, you will get a free phone number in your country. We can\nuse that phone number without any configuration to send outbound text\nmesssages. You can also receive text messages but that requires changing\nthe Request URL webhook in the phone number configuration screen - we'll\ncover that in a future blog post.</p>\n<h2>Installing Our Dependency</h2>\n<p>Our code will use a helper library to make it easier to send text messages\nfrom Python. We are going to install the helper library from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> into a virtualenv. First we need to\ncreate the virtualenv. In your terminal use the following command to create\na new virtualenv. If you need to install virtualenv take a look at the\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide.</p>\n<div class=\"highlight\"><pre><span></span>virtualenv sendsms\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source sendsms/bin/activate\n</pre></div>\n<p>The command prompt will change after we properly activate the virtualenv\nto something like this:</p>\n<p><img src=\"/img/160511-send-sms-python/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Now install the Twilio Python helper library. We are using the 6.0.0\nor above library version, which is important because the syntax in\nthis post is backwards-incompatible with 5.x and previous Twilio helper\nlibrary versions.</p>\n<div class=\"highlight\"><pre><span></span>pip install twilio&gt;=6.0.0\n</pre></div>\n<p>The helper library is now installed and we can use it with the Python code\nwe create and execute.</p>\n<h2>Sending SMS From Python</h2>\n<p>Fire up the Python interpreter in the terminal using the <code>python</code> command,\nor create a new file named <code>send_sms.py</code>. </p>\n<p>We need to grab our account credentials from the Twilio Console to connect\nour Python code to our Twilio account. Go to the\n<a href=\"https://www.twilio.com/console\">Twilio Console</a> and copy the Account SID\nand Authentication Token into your Python code.</p>\n<p><img src=\"/img/160511-send-sms-python/console-tokens.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Enter the following code into the interpreter or into the new Python file.\nYou can also copy and paste the code from the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/send-sms-text-messages-python/send_sms.py\">blog-code-examples Git repository</a>\nin the\n<a href=\"https://github.com/fullstackpython\">Full Stack Python GitHub organization</a>.</p>\n<div class=\"highlight\"><pre><span></span># we import the Twilio client from the dependency we just installed\nfrom twilio.rest import Client\n\n# the following line needs your Twilio Account SID and Auth Token\nclient = Client(\"ACxxxxxxxxxxxxxx\", \"zzzzzzzzzzzzz\")\n\n# change the \"from_\" number to your Twilio number and the \"to\" number\n# to the phone number you signed up for Twilio with, or upgrade your\n# account to send SMS to any phone number\nclient.messages.create(to=\"+19732644152\", \n                       from_=\"+12023351278\", \n                       body=\"Hello from Python!\")\n</pre></div>\n<p>All the lines above that start with <code>#</code> are comments. Once you enter that\ncode into the interpreter or run the Python script using\n<code>python send_sms.py</code> the SMS will be sent.</p>\n<p>In a few seconds you should see a message appear on your phone. I'm on\niOS so here's how the text message I received looked.</p>\n<p><img src=\"/img/160511-send-sms-python/hello-from-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>That's it! You can add this code to any Python code to send text messages.\nJust keep your Auth Token secret as it'll allow anyone that has it to use\nyour account to send and receive messages.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160511-send-sms-text-message-python.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS", "body": "<div class=\"c9\">\n<p><a href=\"/ubuntu.html\">Ubuntu</a> released the newest Long Term Support (LTS)\nversion of its <a href=\"/operating-systems.html\">operating system</a> in April 2016.\nThe update brings Ubuntu to version 16.04 and its latest code name is\n\"Xenial Xerus\". 16.04 is the first Ubuntu release to include\n<a href=\"/python-2-or-3.html\">Python 3</a> as the default Python installation.</p>\n<p>Let's use this newest Ubuntu release along with Python version 3.5 to\nstart a new <a href=\"/django.html\">Django</a> web application project and run it with\n<a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a>.</p>\n<h2>Tools We Need</h2>\n<p>We will need a few tools to complete our project. Don't worry about\ninstalling these just yet as we'll get to them as we progress through the\ntutorial. The tools and their current versions as of April 2017 are:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04.2 LTS (Xenial Xerus)</a></li>\n<li><a href=\"/why-use-python.html\">Python</a> version\n<a href=\"https://docs.python.org/3/whatsnew/3.5.html\">3.5.1</a>\n(default in Ubuntu 16.04.2). Python 3.6 has been released but\nUbuntu 16.04.2 comes with 3.5.1 by default so we'll use the version 3.5.1\nin this post.</li>\n<li><a href=\"/django.html\">Django</a> web framework version\n<a href=\"https://docs.djangoproject.com/en/1.11/releases/1.11/\">1.11</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.7.1</a></li>\n</ul>\n<p>If you are running Mac OS X or Windows, use virtualization software such\nas <a href=\"https://www.parallels.com/products/desktop/\">Parallels</a>\n(this is what I use, but it's Mac OS X-only) or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu .iso file</a>. Either the amd64 or\ni386 version of 16.04 is fine, but I use amd64 for development and testing\nin this blog post.</p>\n<p>When we boot up for the first time, we should see a desktop screen like\nthis one.</p>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/ubuntu-desktop.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Open up terminal to proceed with the setup.</p>\n<h2>System Packages</h2>\n<p>We can see the python3 version Ubuntu comes with, as well as where its\nexecutable is stored.</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\nwhich python3\n</pre></div>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/which-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our Ubuntu installation first needs system packages for Python development.\nYou'll be prompted for your superuser password because restricted system\naccess is required to install packages through apt.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install python3-pip python3-dev\n</pre></div>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/install-packages.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Enter <code>y</code> and let the system package installation process run.</p>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/packages-installed.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The basic system packages we need are now installed so we can proceed to\nour Python-specific dependencies.</p>\n<h2>Virtualenv</h2>\n<p>Virtualenv and pip for isolating and handling\n<a href=\"/application-dependencies.html\">application dependencies</a> were just\ninstalled via system packages so we can now use them to obtain Django and\nGunicorn.</p>\n<p>Create a directory to store virtualenvs then put a new virtualenv in it.</p>\n<div class=\"highlight\"><pre><span></span># make sure pip and setuptools are the latest version\npip3 install --upgrade pip setuptools\n# the tilde \"~\" specifies the user's home directory, like /home/matt\ncd ~\nmkdir venvs\n# specify the system python3 installation\npython3 -m venv venvs/djproject\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djproject/bin/activate\n</pre></div>\n<p>We should see our prompt change so that we know the virtualenv is properly\nactivated.</p>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/venv-activated.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our virtualenv with Python 3 is activated so we can install whatever\ndependencies we want, such as Django and Gunicorn. </p>\n<h2>Django and Gunicorn</h2>\n<p>Time to install Django and Green Unicorn into our virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django gunicorn\n</pre></div>\n<p>No errors is a good sign everything worked for us.</p>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/good-sign.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Create a new Django project named <code>djproject</code>, or whatever you want to name\nyour project. Then change into the directory for the new project.</p>\n<div class=\"highlight\"><pre><span></span>django-admin startproject djproject\ncd djproject\n</pre></div>\n<p>We could run Django with the development server using the\n<code>python manage.py runserver</code> command. However, start Django up with\nGunicorn instead.</p>\n<div class=\"highlight\"><pre><span></span>gunicorn djproject.wsgi\n</pre></div>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/gunicorn-run.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Awesome, now we can bring up our shell project in the web browser at\nthe <code>localhost:8000</code> or <code>127.0.0.1:8000</code> address.</p>\n<p><img src=\"/img/160509-ubuntu-django-gunicorn/it-worked.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Ready for development!</p>\n<h2>Ready for Development</h2>\n<p>Those are the basics for starting development with Django and Gunicorn on\nUbuntu 16.04. If you need an even more in-depth step-by-step tutorial to\ndeploy your Python web application to a production environment, check out the\n<a href=\"http://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.</p>\n<p>To figure out what to do next for your Python project, read the topics\nfound on the <a href=\"/table-of-contents.html\">table of contents</a> page.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160509-django-gunicorn-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Send MMS Picture Messages with Python", "body": "<div class=\"c9\">\n<p>Multimedia Message Service (MMS) picture and video messages are a common\nextension to the Short Message Service (SMS) system for sending text\nmessages. Using a\n<a href=\"/application-programming-interfaces.html\">web application programming interface (API)</a>\nwith Python makes it easy to send MMS messages from a web application or\nscript. In this short tutorial we'll learn how to add MMS sending capability\nto a new or existing Python application.</p>\n<h2>Tools We Need</h2>\n<p>Either <a href=\"/python-2-or-3.html\">Python 2 or 3</a> works for the code in this\ntutorial. Just make sure you have one of those two versions installed on\nyour system by going to the terminal and typing <code>python --version</code>.\nThe other dependencies for this tutorial include:</p>\n<ul>\n<li><a href=\"https://www.python.org/\">Python</a> version <a href=\"/python-2-or-3.html\">2 or 3</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle one\n<a href=\"/application-dependencies.html\">application dependency</a></li>\n<li>A free <a href=\"https://www.twilio.com/try-twilio\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/sending-messages\">MMS web API</a></li>\n<li><a href=\"https://pypi.org/project/twilio\">Twilio Python helper library</a>,\n<a href=\"https://github.com/twilio/twilio-python/tree/6.0.0\">version 6.0.0</a>\nor later</li>\n</ul>\n<p>If you are unsure of how to get pip and virtualenv installed, take a look\nat the first few steps of the\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide.</p>\n<h2>Twilio Web API</h2>\n<p>Our simple Python example application will use the Twilio web API to send\npicture messages.\nGo to the Twilio website\n<a href=\"https://www.twilio.com/try-twilio\">sign up for a free trial account</a>. If\nyou already have a Twilio account (and you should because it makes it easy\nto add almost any type of communications to applications!) then sign into\nyour existing account.</p>\n<p><img src=\"/img/160515-mms-python/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>In trial mode Twilio can send MMS to a validated phone number associated\nwith the account. When you're ready to send MMS messages to any phone in\nany country then you will have to upgrade your account.</p>\n<p>After signing up for a Twilio account, you will receive your own phone\nnumber that'll be used to send messages. That phone number can send outbound\nMMS messages without any configuration. It can also receive messages but\nthat requires\n<a href=\"https://www.twilio.com/docs/quickstart/python/sms/hello-monkey\">modifying the Request URL webhook</a>\nin the phone number details screen.</p>\n<h2>Installing Our Dependency</h2>\n<p>We'll use the <a href=\"https://pypi.org/project/twilio\">twilio helper library</a>\nas a dependency for our Python code. The helper library can be installed\nvia the <code>pip</code> command, which pulls the code from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> into our local virtualenv. In this\ntutorial we'll call our virtualenv <code>pymms</code> but you can name it whatever\nyou want for your application.</p>\n<p>We have to create the virtualenv before using it. In your terminal enter:</p>\n<div class=\"highlight\"><pre><span></span>virtualenv pymms\n</pre></div>\n<p>If you need to install virtualenv take a look at the\n<a href=\"/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Django and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide.</p>\n<p>Activate the virtualenv with the <code>source</code> command.</p>\n<div class=\"highlight\"><pre><span></span>source pymms/bin/activate\n</pre></div>\n<p>The command prompt will change to look like this after it is activated:</p>\n<p><img src=\"/img/160515-mms-python/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Now install the\n<a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python helper library</a>.\nMake sure you install the\nversion 6.0.0 or later current version because the syntax for this\ncode changed a bit from earlier helper library versions before 6.0.0.</p>\n<div class=\"highlight\"><pre><span></span>pip install twilio&gt;=6.0.0\n</pre></div>\n<p>Once the helper library installs we can use it in our Python code.</p>\n<h2>Sending MMS From Python</h2>\n<p>Launch the the Python interpreter by executing the <code>python</code> command in\nyour terminal. You can also create a new file named <code>send_mms.py</code> if you\nwant to re-use the code after we give it a try. </p>\n<p>We need to grab our account credentials from the Twilio Console to connect\nour Python code to our Twilio account. Go to the\n<a href=\"https://www.twilio.com/console\">Twilio Console</a> and copy the Account SID\nand Authentication Token into your Python code.</p>\n<p><img src=\"/img/160515-mms-python/console-tokens.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Enter the following code into the new Python file, or copy it from\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">this GitHub repository that contains all blog code examples</a>.</p>\n<div class=\"highlight\"><pre><span></span># import the Twilio client from the dependency we just installed\nfrom twilio.rest import Client\n\n# the following line needs your Twilio Account SID and Auth Token\nclient = Client(\"ACxxxxxxxxxxxxxx\", \"zzzzzzzzzzzzz\")\n\n# this is the URL to an image file we're going to send in the MMS\nmedia = \"https://raw.githubusercontent.com/mattmakai/fullstackpython.com/master/static/img/logos/f.png\"\n\n# change the \"from_\" number to your Twilio number and the \"to\" number\n# to the phone number you signed up for Twilio with, or upgrade your\n# account to send MMS to any phone number that MMS is available\nclient.api.account.messages.create(to=\"+19732644152\",\n                                   from_=\"+12023351278\",\n                                   body=\"MMS via Python? Nice!\",\n                                   media_url=media)\n</pre></div>\n<p>All the lines above that start with <code>#</code> are comments to give you some\ncontext for what each line is doing. After entering that code into the\ninterpreter or running the Python script with <code>python send_mms.py</code>\nTwilio will send your MMS.</p>\n<p>In a few seconds you should see a message appear on your phone - note that\nMMS can take a little longer because your phone has to download the image.\nI use an iPhone so here is what the message looked like when I received it:</p>\n<p><img src=\"/img/160515-mms-python/mms-result.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>That is everything need to send MMS to a phone. Pretty awesome result for\na few lines of Python code, right? This code can be added to any Python\nprogram to send outbound MMS.</p>\n<p>One final note: keep your Twilio Auth Token secret otherwise anyone who\ngets it will be able to send and receive messages through your account.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160515-sending-mms-picture-messages-python.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Use Redis with Python 3 and redis-py on Ubuntu 16.04", "body": "<div class=\"c9\">\n<p><a href=\"/redis.html\">Redis</a> is an in-memory key-value pair\n<a href=\"/no-sql-datastore.html\">NoSQL data store</a> often used\nfor <a href=\"/web-frameworks.html\">web application</a> sessions,\ntransient <a href=\"/data.html\">data</a> and as a broker for\n<a href=\"/task-queues.html\">task queues</a>. redis-py is a common Python code\nlibrary for interacting with Redis. Let's learn how to get Redis up\nand running on <a href=\"/ubuntu.html\">Ubuntu</a> and then start using it in a simple\nPython application.</p>\n<h2>Tools We Need</h2>\n<p>This tutorial is tested with Python 3.5 but either\n<a href=\"/python-2-or-3.html\">Python 2 or 3</a> should work for everything written\nhere. Just make sure one version is installed on your system by going to\nthe terminal and typing <code>python --version</code>. Other than Python itself,\nhere is the software we are going to use throughout the rest of this post:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04</a> (these\ninstructions should work fine with earlier Ubuntu versions as well)</li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle the\nredis-py <a href=\"/application-dependencies.html\">application dependency</a></li>\n<li><a href=\"http://redis.io\">Redis</a></li>\n<li><a href=\"https://redis-py.readthedocs.io/en/latest/\">redis-py</a></li>\n</ul>\n<p>If you aren't sure how how to install pip and virtualenv, review the\nfirst few steps of the\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide.</p>\n<h2>Install Redis</h2>\n<p>There are a few ways to install Redis, such as\n<a href=\"http://redis.io/topics/quickstart\">downloading and compiling from source</a>.\nHowever, on Ubuntu we can install a system package through <code>apt</code>. The\nadvantage of this method is that the <code>apt</code> process will take care of\ninstalling <code>redis-server</code> as a system service. Open the terminal and run\nthe following command:</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install redis-server\n</pre></div>\n<p>Enter your <code>sudo</code> password and when you are prompted whether you want\nto install the new package enter 'yes'.</p>\n<p><img src=\"/img/160516-redis-ubuntu-1604/apt-get-redis.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>After a few moments the downloading and processing should be complete\nand you will be back at the prompt.</p>\n<p><img src=\"/img/160516-redis-ubuntu-1604/apt-get-redis-done.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Redis is now installed and the Redis server is running in the background\nas a system service. Even though we installed the <code>redis-server</code> package,\nthe installation also comes with the Redis command line client. The client\nis useful for connecting directly to the Redis server without any Python\ncode. Give <code>redis-cli</code> a try by typing this into the command prompt:</p>\n<div class=\"highlight\"><pre><span></span>redis-cli\n</pre></div>\n<p>The Redis client connects to the localhost server and gives a new prompt\nto show it's ready for commands:</p>\n<p><img src=\"/img/160516-redis-ubuntu-1604/redis-cli.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Give the prompt a try by using Redis commands such as <code>keys *</code> or <code>set a 1</code>.\nThe full list of Redis commands is provided in the\n<a href=\"http://redis.io/commands\">project documentation</a>.</p>\n<h2>Virtualenv and Install redis-py</h2>\n<p>We need to figure out our <code>python3</code> location, then create a virtualenv,\nactivate the virtualenv and then install redis-py with <code>pip</code>.\nDetermine your <code>python3</code> executable location with the <code>which</code> command.</p>\n<div class=\"highlight\"><pre><span></span>which python3\n</pre></div>\n<p>You'll see some output like the following screenshot.</p>\n<p><img src=\"/img/160516-redis-ubuntu-1604/which-python-3.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Create a new virtualenv either in your home directory or wherever you\nstore your project virtualenvs. Specify the full path to your <code>python3</code>\ninstallation. </p>\n<div class=\"highlight\"><pre><span></span># specify the system python3 installation\nvirtualenv --python=/usr/bin/python3 venvs/redistest\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/redistest/bin/activate\n</pre></div>\n<p>Next we can install the redis-py Python package from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> using the <code>pip</code> command.</p>\n<div class=\"highlight\"><pre><span></span>pip install redis\n</pre></div>\n<p><img src=\"/img/160516-redis-ubuntu-1604/pip-install-redis.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Alright, now it is installed in our virtualenv. Let's write some simple\nPython code to try out give redis-py!</p>\n<h2>Working with Redis from Python</h2>\n<p>Fire up the Python REPL with the <code>python</code> or <code>python3</code> command. You can also\nwrite the following code in a Python file such as \"testredis.py\" then\nexecute it with <code>python testredis.py</code>.</p>\n<div class=\"highlight\"><pre><span></span>import redis\n# create a connection to the localhost Redis server instance, by\n# default it runs on port 6379\nredis_db = redis.StrictRedis(host=\"localhost\", port=6379, db=0)\n# see what keys are in Redis\nredis_db.keys()\n# output for keys() should be an empty list \"[]\"\nredis_db.set('full stack', 'python')\n# output should be \"True\"\nredis_db.keys()\n# now we have one key so the output will be \"[b'full stack']\"\nredis_db.get('full stack')\n# output is \"b'python'\", the key and value still exist in Redis\nredis_db.incr('twilio')\n# output is \"1\", we just incremented even though the key did not\n# previously exist\nredis_db.get('twilio')\n# output is \"b'1'\" again, since we just obtained the value from\n# the existing key\nredis_db.delete('twilio')\n# output is \"1\" because the command was successful\nredis_db.get('twilio')\n# nothing is returned because the key and value no longer exist\n</pre></div>\n<p>That is a quick introduction to some commonly-used Redis commands\ninvoked by their Python bindings through the redis-py library. Take a look\nat the\n<a href=\"https://redis-py.readthedocs.io/en/latest/\">redis-py official documentation</a>\nto learn more about the extensive command list you can use to create,\nread, modify and delete keys and values in Redis.</p>\n<p>Questions? Tweet <a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor post a message on the\n<a href=\"https://www.facebook.com/fullstackpython\">Full Stack Python Facebook page</a>.\nSee something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160516-install-redis-use-python-3-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS", "body": "<div class=\"c9\">\n<p><a href=\"/ubuntu.html\">Ubuntu</a>'s latest Long Term Support (LTS)\n<a href=\"/operating-systems.html\">operating system</a> was released last year, in\nApril 2016. The 16.04 update for Ubuntu is known as \"Xenial Xerus\" and\nit is the first Ubuntu release to include <a href=\"/python-2-or-3.html\">Python 3</a>\nas the default Python installation.</p>\n<p>We can use the Ubuntu release along with Python version 3.5 to\nstart a new <a href=\"/flask.html\">Flask</a> web application project and run it with\n<a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a>.</p>\n<h2>Tools We'll Need</h2>\n<p>Our project will use the Ubuntu 16.04 release along with a few other\nlibraries. You don't have to install these tools just yet, we will get\nto them as we progress through the walkthrough. Our requirements\nand their current versions as of April 2017 are:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04.2 LTS (Xenial Xerus)</a></li>\n<li><a href=\"/why-use-python.html\">Python</a> version\n<a href=\"https://docs.python.org/3/whatsnew/3.5.html\">3.5.1</a>\n(default in Ubuntu 16.04.2)</li>\n<li><a href=\"/flask.html\">Flask</a> web framework version\n<a href=\"http://flask.pocoo.org/docs/0.12/\">0.12</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.7.1</a></li>\n</ul>\n<p>If you're running on Mac OS X or Windows, use virtualization software such\nas <a href=\"https://www.parallels.com/products/desktop/\">Parallels</a> or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu .iso file</a>. Either the amd64 or\ni386 version of 16.04 is fine. I'm using amd64 for development and testing\nin this tutorial.</p>\n<p>Once you boot up Ubuntu, you should see a screen like this one.</p>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/ubuntu-desktop.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Open up a terminal window to proceed with the setup.</p>\n<h2>System Packages</h2>\n<p>We can see the python3 system version Ubuntu comes with and where its\nexecutable is stored using these commands.</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\nwhich python3\n</pre></div>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/which-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our Ubuntu installation requires a few system packages. We will get prompted\nfor the superuser password because restricted system access is needed\nto install packages through\n<a href=\"https://en.wikipedia.org/wiki/Advanced_Packaging_Tool\">apt</a>.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install python3-dev python3-pip\n</pre></div>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/install-packages.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Enter <code>y</code> to let the system package installation process do its job.</p>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/packages-installed.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The packages we need are now installed. We can continue on to install our\nPython-specific dependencies.</p>\n<h2>Virtualenv</h2>\n<p>In the previous section, <a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>\nand <a href=\"https://pypi.org/project/pip\">pip</a> were installed to handle our\n<a href=\"/application-dependencies.html\">application dependencies</a>.\nWe can now use them to download and install Flask and Gunicorn.</p>\n<p>Create a directory for the virtualenvs. Then create a new virtualenv.</p>\n<div class=\"highlight\"><pre><span></span># make sure pip and setuptools are the latest version\npip3 install --upgrade pip setuptools\n# the tilde \"~\" specifies the user's home directory, like /home/matt\ncd ~\nmkdir venvs\n# specify the system python3 installation\npython3 -m venv venvs/flaskproj\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/flaskproj/bin/activate\n</pre></div>\n<p>Our prompt will change after we properly activate the virtualenv.</p>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/venv-activated.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our virtualenv is now activated with Python 3. We can install whatever\ndependencies we want, in our case Flask and Gunicorn. </p>\n<h2>Flask and Gunicorn</h2>\n<p>We can finally install Flask and Green Unicorn via the pip command.</p>\n<div class=\"highlight\"><pre><span></span>pip install flask gunicorn\n</pre></div>\n<p>It is a good sign if we receive no errors like we see in the following\nscreenshot.</p>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/good-sign.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Create a new directory under our home directory that will store our\nFlask project. Change directory into the new folder.</p>\n<div class=\"highlight\"><pre><span></span>mkdir ~/flaskproj\ncd ~/flaskproj\n</pre></div>\n<p>Create a new file named <code>__init__.py</code> within our <code>flaskproj</code> directory so\nwe can test to make sure Flask is working properly. I prefer to use\n<a href=\"/vim.html\">Vim</a> but <a href=\"/emacs.html\">Emacs</a> and other\n<a href=\"/development-environments.html\">development environments</a> work great as\nwell.</p>\n<p>Within <code>__init__.py</code> write the following code.</p>\n<div class=\"highlight\"><pre><span></span>from flask import Flask, Response\n\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return Response(\"It works!\"), 200\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>We could run our app with the Flask development server using the\n<code>python __init__.py</code> command. Instead run the Flask app with\nGunicorn. Go to the directory above the <code>flaskproj</code> folder, in our\ncase we can enter <code>cd ~</code> then use the <code>gunicorn</code> command:</p>\n<div class=\"highlight\"><pre><span></span>gunicorn flaskproj:app\n</pre></div>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/gunicorn-run.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Sweet, we can bring up our shell Flask app in the web browser at\nthe <code>localhost:8000</code> or <code>127.0.0.1:8000</code> address.</p>\n<p><img src=\"/img/160510-ubuntu-flask-gunicorn/it-works.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Now we're ready for some real <a href=\"/flask.html\">Flask</a> development!</p>\n<h2>Ready for Development</h2>\n<p>That's a simple setup for developing with Flask and Gunicorn on\nUbuntu 16.04. If you need an in-depth step-by-step tutorial to\ndeploy your <a href=\"/wsgi-servers.html\">WSGI-powered web application</a> to a\nproduction environment, check out the\n<a href=\"http://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.</p>\n<p>To determine what to code next for your Python project, read the topics\nfound on the <a href=\"/table-of-contents.html\">table of contents</a> page.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160510-flask-gunicorn-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Responding to SMS Text Messages with Python & Flask", "body": "<div class=\"c9\">\n<p>Short Message Service (SMS) text messages are\n<a href=\"/blog/send-sms-text-messages-python.html\">easy to send from Python applications</a>\nwith a\n<a href=\"/application-programming-interfaces.html\">web application programming interface (API)</a>.\nFlask applications can also receive incoming text messages and respond\nback to the sender with just a few lines of Python code.</p>\n<h2>Tools We Need</h2>\n<p>This tutorial is fine for both Python 2 and 3. Make sure you have one of\nthose two versions installed on your system.</p>\n<ul>\n<li>Either <a href=\"/python-2-or-3.html\">Python 2 or 3</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li>The <a href=\"/flask.html\">Flask</a> micro web framework</li>\n<li>A free <a href=\"www.twilio.com/referral/w9pugq\">Twilio account</a> to use their\n<a href=\"https://www.twilio.com/docs/api/rest/sending-messages\">SMS web API</a></li>\n<li>Open source\n<a href=\"https://pypi.org/project/twilio\">Twilio Python helper library</a></li>\n<li><a href=\"https://ngrok.com/\">Ngrok</a> for localhost tunneling to our Flask\napplication while it's running on our local development environment</li>\n</ul>\n<p>If you need assistance getting pip and virtualenv installed, take a look at\nthe first few steps in the\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide, which shows how to install system packages for those tools.</p>\n<h2>Installing Our Dependencies</h2>\n<p>Our code will use a helper library to make it easier to respond to text\nmessages from Python. The helper library dependency along with the Flask\ncode library can be installed from <a href=\"https://pypi.python.org/pypi\">PyPI</a> into\na virtualenv. In your terminal use the following command to generate a new\nvirtualenv. </p>\n<div class=\"highlight\"><pre><span></span>virtualenv respondsms\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source respondsms/bin/activate\n</pre></div>\n<p>The command prompt will change after we properly activate the virtualenv\nto something like this:</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Install Flask and the Twilio Python helper library into the virtualenv with\nthe <code>pip</code> command. </p>\n<div class=\"highlight\"><pre><span></span>pip install flask twilio==5.7.0\n</pre></div>\n<p>The dependencies are installed so that we can use it with our Python code.\nNow we can write our Python application.</p>\n<h2>Building Our Flask Web App</h2>\n<p>Our Flask application will have two routes: one to make sure the web app\nis running and another that handles incoming HTTP POST requests. Create\na new file named <code>app.py</code> in your home directory or where you choose to\nstore your Python project files.</p>\n<p>Within <code>app.py</code> write the following code. You can also see\n<a href=\"https://gist.github.com/mattmakai/8ab434ccb604d3ba5bde817a183e0bde\">this code in a GitHub Gist</a>\nif that's easier to copy and paste.</p>\n<div class=\"highlight\"><pre><span></span>from flask import Flask, Response, request\nfrom twilio import twiml\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef check_app():\n    # returns a simple string stating the app is working\n    return Response(\"It works!\"), 200\n\n\n@app.route(\"/twilio\", methods=[\"POST\"])\ndef inbound_sms():\n    response = twiml.Response()\n    # we get the SMS message from the request. we could also get the \n    # \"To\" and the \"From\" phone number as well\n    inbound_message = request.form.get(\"Body\")\n    # we can now use the incoming message text in our Python application\n    if inbound_message == \"Hello\":\n        response.message(\"Hello back to you!\")\n    else:\n        response.message(\"Hi! Not quite sure what you meant, but okay.\")\n    # we return back the mimetype because Twilio needs an XML response\n    return Response(str(response), mimetype=\"application/xml\"), 200\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>The inline comments on the lines starting with <code>#</code> explain what the lines\nbelow them do. Flask applications define URL routes with the <code>@app.route</code>\ndecorator. Our application needs two routes therefore we have two of those\ndecorators defined.</p>\n<p>Give the application a try by running it with <code>python app.py</code>. If you have\ntrouble running the program, make sure your virtualenv is still active so\nthat the application can use the Flask and Twilio code libraries we installed\nearlier.</p>\n<p>Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should\nsee \"It works!\" on the screen.</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/app-local.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>There is one problem with our application running on our local development\nenvironment: there's no way for our server to receive HTTP POST requests\nunless we use a localhost tunnel.</p>\n<h2>Localhost Tunneling with Ngrok</h2>\n<p><a href=\"https://ngrok.com\">Ngrok</a> provides a localhost tunnel so that outside\nservices can connect to a server running in your local development\nenvironment. Download and install Ngrok.</p>\n<p>We can now run Ngrok locally and connect our Flask app running on port 5000.\nWithin the directory where you extracted Ngrok, run this command.</p>\n<div class=\"highlight\"><pre><span></span>./ngrok http 5000\n</pre></div>\n<p><img src=\"/img/160530-respond-sms-python-flask/start-ngrok.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Awesome, now we can use that Ngrok Forwarding URL to access our application\nfrom any machine that has an internet connection. Replace the URL in the\nweb browser with your own Forwarding URL, like I did in this screenshot.</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/access-ngrok.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>We just need a phone number that'll hit our application with a POST request\nto respond to text messages.</p>\n<h2>Obtaining Our Phone Number</h2>\n<p>We can use our Flask application's route to respond to incoming web API\nrequests based on incoming SMS messages to a Twilio phone number. Go to the\n<a href=\"www.twilio.com/referral/w9pugq\">Twilio website and sign up for a free trial account</a>\nto use their API. If you already have a Twilio account then sign into your\nexisting account.</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/try-twilio.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The Twilio trial account allows you to send and receive text messages to\nyour own validated phone number. To send and respond to SMS to and from any\nphone number then you need to upgrade your account. Trial accounts are\ngreat for initial development before your application goes live.</p>\n<p>When you sign up, you receive a free Twilio phone number. We can\nconfigure that phone number to forward the SMS information to our web\napplication by setting up the response webhook.</p>\n<p>Go to the\n<a href=\"https://www.twilio.com/console/phone-numbers\">manage phone numbers screen</a>\nand click on the phone number you want to configure for responding to\ninbound text messages.</p>\n<p>Scroll down to near the bottom of the page and look for the \"Messaging\"\nheader. Modify the \"A Message Comes in\" text box so that it has your\nngrok Forwarding URL plus the \"/twilio\" route, as shown in this screenshot.</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/number-configuration.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Now press the red \"Save\" button at the bottom to make our changes take\neffect.</p>\n<p>Our application is ready to go - time to give our phone number a try!\nSend \"Hello\" or whatever text you want to your phone number. Here is what\nthe result looks like on my iPhone.</p>\n<p><img src=\"/img/160530-respond-sms-python-flask/success.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>This simple Flask application is a good start to build more complicated\nresponses such as\n<a href=\"https://www.twilio.com/blog/2014/06/using-natural-language-processing-for-better-sms-interfaces-using-twilio-and-pythons-textblob.html\">adding natural language processing</a>,\n<a href=\"https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html\">building SMS Slack bots</a>\nor\n<a href=\"https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html\">coding SMS-powered NES Game Genies</a>.</p>\n<h2>What's next?</h2>\n<p>Sweet, now our Flask web app automatically responds to incoming SMS text\nmessages! It's pretty crazy to think that entire businesses such as\n<a href=\"http://techcrunch.com/2016/03/07/superphone/\">SuperPhone</a> and\n<a href=\"https://www.remind.com/\">Remind</a> are built off code that started out very\nsimilar to the code we just wrote.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160530-respond-sms-text-messages-python-flask.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Build Your First Slack Bot with Python", "body": "<div class=\"c9\">\n<p><a href=\"/bots.html\">Bots</a> are a useful way to interact with chat services such as\n<a href=\"https://slack.com/\">Slack</a>. If you have never built a bot before, this\npost provides an easy starter tutorial for combining the\n<a href=\"https://api.slack.com/\">Slack API</a> with Python to create your first bot.</p>\n<p>We will walk through setting up your development environment, obtaining a\nSlack API bot token and coding our simple bot in Python.</p>\n<h2>Tools We Need</h2>\n<p>Our bot, which we will name \"StarterBot\", requires Python and the Slack API.\nTo run our Python code we need:</p>\n<ul>\n<li>Either <a href=\"/python-2-or-3.html\">Python 2 or 3</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/stable/\">virtualenv</a> to handle Python\n<a href=\"/application-dependencies.html\">application dependencies</a></li>\n<li><a href=\"https://slack.com/\">Free Slack account</a> - you need to be signed into at\nleast one workspace where you have access to building apps.</li>\n</ul>\n<p>It is also useful to have the <a href=\"https://api.slack.com/\">Slack API docs</a> handy\nwhile you're building this tutorial.</p>\n<p>All the code for this tutorial is available open source under the MIT license\nin the <a href=\"https://github.com/mattmakai/slack-starterbot\">slack-starterbot</a> public\nrepository.</p>\n<h2>Establishing Our Environment</h2>\n<p>We now know what tools we need for our project so let's get our development\nenvironment set up. Go to the terminal (or Command Prompt on Windows) and\nchange into the directory where you want to store this project. Within\nthat directory, create a new virtualenv to isolate our application\ndependencies from other Python projects.</p>\n<div class=\"highlight\"><pre><span></span>virtualenv starterbot\n</pre></div>\n<p>Activate the virtualenv:</p>\n<div class=\"highlight\"><pre><span></span>source starterbot/bin/activate\n</pre></div>\n<p>Your prompt should now look like the one in this screenshot.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/virtualenv-activate.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Command prompt with starterbot's virtualenv activated.\"></p>\n<p>The official <code>slackclient</code> API helper library built by Slack can send and\nreceive messages from a Slack channel. Install the slackclient library with\nthe <code>pip</code> command:</p>\n<div class=\"highlight\"><pre><span></span>pip install slackclient==1.3.2\n</pre></div>\n<p>When <code>pip</code> is finished you should see output like this and you'll be\nback at the prompt.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/pip-install-slackclient.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Output from using the pip install slackclient command with a virtualenv activated.\"></p>\n<p>We also need to <a href=\"https://api.slack.com/apps/new\">create a Slack App</a> to recieve\nan API token for your bot. Use \"Starter Bot\" as your App name. If you are signed\ninto more than one workspace, pick a Development Workspace from the dropdown.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/create-slack-app.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Create a Slack App form filled\"></p>\n<p>After submitting the form, keep the app configuration page open.</p>\n<h2>Slack APIs and App Configuration</h2>\n<p>We want our Starter Bot to appear like any other user in your team - it will\nparticipate in conversations inside channels, groups, and DMs. In a Slack\nApp, this is called a <a href=\"https://api.slack.com/bot-users\">bot user</a>, which\nwe set up by choosing \"Bot Users\" under the \"Features\" section. After\nclicking \"Add a Bot User\", you should choose a display name, choose a\ndefault username, and save your choices by clicking \"Add Bot User\". You'll\nend up with a page that looks like the following:</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/add-bot-user.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Added a bot user to the Slack App\"></p>\n<p>The <code>slackclient</code> library makes it simple to use Slack's\n<a href=\"https://api.slack.com/rtm\">RTM API</a> and <a href=\"https://api.slack.com/web\">Web API</a>.\nWe'll use both to implement Starter Bot, and they each require authentication.\nConveniently, the bot user we created earlier can be used to authenticate for\nboth APIs.</p>\n<p>Click on the \"Install App\" under the \"Settings\" section. The button on this page\nwill install the App into our Development Workspace. Once the App is installed,\nit displays a <em>bot user oauth access token</em> for authentication as the bot user.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/copy-bot-access-token.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"After installing on the development workspace, you can copy the bot user oauth access token\"></p>\n<p>A common practice for Python developers is to export secret tokens as\nenvironment variables. Back in your terminal, export the Slack token with the\nname <code>SLACK_BOT_TOKEN</code>:</p>\n<div class=\"highlight\"><pre><span></span>export SLACK_BOT_TOKEN='your bot user access token here'\n</pre></div>\n<p>Nice, now we are authorized to use the Slack RTM and Web APIs as a bot user.</p>\n<h2>Coding Our Starter Bot</h2>\n<p>We've got everything we need to write the Starter Bot code. Create a new file\nnamed <code>starterbot.py</code> and include the following code in it.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport time\nimport re\nfrom slackclient import SlackClient\n</pre></div>\n<p>With our dependencies imported we can use them to obtain the environment\nvariable values and then instantiate the Slack client.</p>\n<div class=\"highlight\"><pre><span></span># instantiate Slack client\nslack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))\n# starterbot's user ID in Slack: value is assigned after the bot starts up\nstarterbot_id = None\n\n# constants\nRTM_READ_DELAY = 1 # 1 second delay between reading from RTM\nEXAMPLE_COMMAND = \"do\"\nMENTION_REGEX = \"^&lt;@(|[WU].+?)&gt;(.*)\"\n</pre></div>\n<p>The code instantiates the <code>SlackClient</code> client with our <code>SLACK_BOT_TOKEN</code>\nexported as an environment variable. It also declares a variable we can use to\nstore the Slack user ID of our Starter Bot. A few constants are also declared,\nand each of them will be explained as they are used in the code that follows.</p>\n<div class=\"highlight\"><pre><span></span>if __name__ == \"__main__\":\n    if slack_client.rtm_connect(with_team_state=False):\n        print(\"Starter Bot connected and running!\")\n        # Read bot's user ID by calling Web API method `auth.test`\n        starterbot_id = slack_client.api_call(\"auth.test\")[\"user_id\"]\n        while True:\n            command, channel = parse_bot_commands(slack_client.rtm_read())\n            if command:\n                handle_command(command, channel)\n            time.sleep(RTM_READ_DELAY)\n    else:\n        print(\"Connection failed. Exception traceback printed above.\")\n</pre></div>\n<p>The Slack client connects to the Slack RTM API. Once it's connected, it calls a\nWeb API method (<a href=\"https://api.slack.com/methods/auth.test\"><code>auth.test</code></a>) to find\nStarter Bot's user ID.</p>\n<p>Each bot user has a user ID for each workspace the Slack App is installed\nwithin. Storing this user ID will help the program understand if someone has\nmentioned the bot in a message.</p>\n<p>Next, the program enters an infinite loop, where each time the loop runs the\nclient recieves any events that arrived from Slack's RTM API. Notice that\nbefore the loop ends, the program pauses for one second so that it doesn't loop\ntoo fast and waste your CPU time.</p>\n<p>For each event that is read, the <code>parse_bot_commands()</code> function determines if\nthe event contains a command for Starter Bot. If it does, then <code>command</code> will\ncontain a value and the <code>handle_command()</code> function determines what\nto do with the command.</p>\n<p>We've laid the groundwork for processing Slack events and calling Slack methods\nin the program. Next, add three new functions above the previous snippet to\ncomplete handling commands:</p>\n<div class=\"highlight\"><pre><span></span>def parse_bot_commands(slack_events):\n    \"\"\"\n        Parses a list of events coming from the Slack RTM API to find bot commands.\n        If a bot command is found, this function returns a tuple of command and channel.\n        If its not found, then this function returns None, None.\n    \"\"\"\n    for event in slack_events:\n        if event[\"type\"] == \"message\" and not \"subtype\" in event:\n            user_id, message = parse_direct_mention(event[\"text\"])\n            if user_id == starterbot_id:\n                return message, event[\"channel\"]\n    return None, None\n\ndef parse_direct_mention(message_text):\n    \"\"\"\n        Finds a direct mention (a mention that is at the beginning) in message text\n        and returns the user ID which was mentioned. If there is no direct mention, returns None\n    \"\"\"\n    matches = re.search(MENTION_REGEX, message_text)\n    # the first group contains the username, the second group contains the remaining message\n    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)\n\ndef handle_command(command, channel):\n    \"\"\"\n        Executes bot command if the command is known\n    \"\"\"\n    # Default response is help text for the user\n    default_response = \"Not sure what you mean. Try *{}*.\".format(EXAMPLE_COMMAND)\n\n    # Finds and executes the given command, filling in response\n    response = None\n    # This is where you start to implement more commands!\n    if command.startswith(EXAMPLE_COMMAND):\n        response = \"Sure...write some more code then I can do that!\"\n\n    # Sends the response back to the channel\n    slack_client.api_call(\n        \"chat.postMessage\",\n        channel=channel,\n        text=response or default_response\n    )\n</pre></div>\n<p>The <code>parse_bot_commands()</code> function takes events from Slack and determines\nif they are commands directed at Starter Bot. There are many\n<a href=\"https://api.slack.com/events\">event types</a> that our bot will encounter, but to\nfind commands we only want to consider\n<a href=\"https://api.slack.com/events/message\">message events</a>. Message events also have\nsubtypes, but the commands we want to find won't have any subtype defined. The\nfunction filters out uninteresting events by checking these properties. Now we\nknow the event represents a message with some text, but we want to find out\nif Starter Bot is being mentioned in the text. The <code>parse_direct_mention()</code>\nfunction will figure out of the message text starts with a mention, and then\nwe compare that to the user ID we stored earlier for Starter Bot. If they are\nthe same, then we know this is a bot command, and return the command text with\nthe channel ID.</p>\n<p>The <code>parse_direct_mentions()</code> function uses a regular expression to determine\nif a user is being mentioned <em>at the beginning</em> of the message. It returns\nthe user ID and the remaining message (and <code>None, None</code> if no mention was\nfound).</p>\n<p>The last function, <code>handle_command()</code> is where in the future you'll add all the\ninteresting commands, humor, and personality for Starter Bot. For now, it has\njust one example command: <em>do</em>. If the command starts with a known command, it\nwill have an appropriate response. If not, a default response is used. The\nresponse is sent back to Slack by calling the\n<a href=\"https://api.slack.com/methods/chat.postMessage\"><code>chat.postMessage</code></a> Web API\nmethod with the channel.</p>\n<p>Here is how the entire program should look when it's all put together\n(you can also\n<a href=\"https://github.com/mattmakai/slack-starterbot/blob/master/starterbot.py\">view the file in GitHub</a>):</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport time\nimport re\nfrom slackclient import SlackClient\n\n\n# instantiate Slack client\nslack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))\n# starterbot's user ID in Slack: value is assigned after the bot starts up\nstarterbot_id = None\n\n# constants\nRTM_READ_DELAY = 1 # 1 second delay between reading from RTM\nEXAMPLE_COMMAND = \"do\"\nMENTION_REGEX = <span class=\"s2\">\"^&lt;@(|[WU].+?)&gt;(.*)\"</span>\n\ndef parse_bot_commands(slack_events):\n    \"\"\"\n        Parses a list of events coming from the Slack RTM API to find bot commands.\n        If a bot command is found, this function returns a tuple of command and channel.\n        If its not found, then this function returns None, None.\n    \"\"\"\n    for event in slack_events:\n        if event[\"type\"] == \"message\" and not \"subtype\" in event:\n            user_id, message = parse_direct_mention(event[\"text\"])\n            if user_id == starterbot_id:\n                return message, event[\"channel\"]\n    return None, None\n\ndef parse_direct_mention(message_text):\n    \"\"\"\n        Finds a direct mention (a mention that is at the beginning) in message text\n        and returns the user ID which was mentioned. If there is no direct mention, returns None\n    \"\"\"\n    matches = re.search(MENTION_REGEX, message_text)\n    # the first group contains the username, the second group contains the remaining message\n    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)\n\ndef handle_command(command, channel):\n    \"\"\"\n        Executes bot command if the command is known\n    \"\"\"\n    # Default response is help text for the user\n    default_response = \"Not sure what you mean. Try *{}*.\".format(EXAMPLE_COMMAND)\n\n    # Finds and executes the given command, filling in response\n    response = None\n    # This is where you start to implement more commands!\n    if command.startswith(EXAMPLE_COMMAND):\n        response = \"Sure...write some more code then I can do that!\"\n\n    # Sends the response back to the channel\n    slack_client.api_call(\n        \"chat.postMessage\",\n        channel=channel,\n        text=response or default_response\n    )\n\nif __name__ == \"__main__\":\n    if slack_client.rtm_connect(with_team_state=False):\n        print(\"Starter Bot connected and running!\")\n        # Read bot's user ID by calling Web API method `auth.test`\n        starterbot_id = slack_client.api_call(\"auth.test\")[\"user_id\"]\n        while True:\n            command, channel = parse_bot_commands(slack_client.rtm_read())\n            if command:\n                handle_command(command, channel)\n            time.sleep(RTM_READ_DELAY)\n    else:\n        print(\"Connection failed. Exception traceback printed above.\")\n</pre></div>\n<p>Now that all of our code is in place we can run our Starter Bot on the\ncommand line with the <code>python starterbot.py</code> command.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/starterbot-running.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Console output when the StarterBot is running and connected to the API.\"></p>\n<p>In Slack, create a new channel and invite Starter Bot or invite it to an\nexisting channel.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/create-channel.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"In the Slack user interface create a new channel and invite StarterBot.\"></p>\n<p>Now start giving Starter Bot commands in your channel.</p>\n<p><img src=\"/img/160604-simple-python-slack-bot/working-starterbot.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Give StarterBot commands in your Slack channel.\"></p>\n<p><em><strong>Additional Note:</strong></em> Currently there's an <a href=\"https://github.com/slackapi/python-slackclient/issues/334\">issue</a> with the <code>websocket</code> package and the CA certificate it uses, so if you encounter an error like:</p>\n<div class=\"highlight\"><pre><span></span>...\nssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)\n...\nslackclient.server.SlackConnectionError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)\nConnection failed. Exception traceback printed above.\n</pre></div>\n<p>There are a couple of things that can be done:\n1. Downgrading the websocket-client library to <code>0.47.0</code>\n2. Or, download the certificate (<code>wget https://www.tbs-certificats.com/issuerdata/DigiCertGlobalRootCA.crt</code>), then set the environment variable <code>export WEBSOCKET_CLIENT_CA_BUNDLE=DigiCertGlobalRootCA.crt</code></p>\n<h2>Wrapping Up</h2>\n<p>Alright, now you've got a simple Starter Bot with a bunch of places in the\ncode you can add whatever features you want to build.</p>\n<p>There is a whole lot more that could be done using the Slack RTM API and Python.\nCheck out these posts to learn what you could do:</p>\n<ul>\n<li>Attach a persistent <a href=\"/databases.html\">relational database</a> or\n<a href=\"/no-sql-datastore.html\">NoSQL back-end</a> such as\n<a href=\"/postgresql.html\">PostgreSQL</a>, <a href=\"/mysql.html\">MySQL</a> or <a href=\"/sqlite.html\">SQLite</a>\nto save and retrieve user data</li>\n<li>Add another channel to interact with the bot\n<a href=\"https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html\">via SMS</a>\nor\n<a href=\"https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html\">phone calls</a></li>\n<li><a href=\"/api-integration.html\">Integrate other web APIs</a> such as\n<a href=\"https://developer.github.com/v3/\">GitHub</a> or <a href=\"/twilio.html\">Twilio</a></li>\n<li>Explore other <a href=\"https://api.slack.com\">Slack Platform APIs</a> and the <a href=\"https://medium.com/slack-developer-blog/getting-started-with-slacks-apis-f930c73fc889\">reasons you might use one over another</a>.</li>\n<li>Build an <a href=\"https://github.com/slackapi/Slack-Python-Onboarding-Tutorial\">onboarding bot using the Slack Events API</a></li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160604-build-first-slack-bot-python.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Creating Bar Chart Visuals with Bokeh, Bottle and Python 3", "body": "<div class=\"c9\">\n<p>The <a href=\"/bokeh.html\">Bokeh</a> open source Python visualization library assists\ndevelopers with creating web browser visuals. You can build charts for\nweb applications <em>without coding any JavaScript</em>, like you'd need to do\nto use libraries such as <a href=\"https://d3js.org/\">d3.js</a> and plotly.</p>\n<p>Bokeh can create many common and custom visualizations using only\nPython, such as this bar chart we will create in this tutorial:</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-48.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 48 bars.\"></p>\n<p>Let's use the\n<a href=\"/bottle.html\">Bottle</a> <a href=\"/web-frameworks.html\">web framework</a> with Bokeh to\nbuild custom Python web app bar charts.</p>\n<h2>Our Tools</h2>\n<p>This tutorial works with either <a href=\"/python-2-or-3.html\">Python 2 or 3</a>,\nbut Python 3 is strongly recommended for new applications. I used\n<a href=\"https://www.python.org/downloads/release/python-362/\">Python 3.6.2</a> while\nwriting this post. In addition to Python throughout this tutorial we\nwill also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a>: </p>\n<ul>\n<li><a href=\"/bottle.html\">Bottle</a> web framework,\n<a href=\"https://github.com/bottlepy/bottle/tree/0.12.13\">version 0.12.13</a></li>\n<li><a href=\"/bokeh.html\">Bokeh</a> data visualization library,\n<a href=\"https://github.com/bokeh/bokeh/releases/tag/0.12.6\">version 0.12.6</a></li>\n<li><a href=\"/pandas.html\">pandas</a> data structures and analysis library,\n<a href=\"https://github.com/pandas-dev/pandas/releases/tag/v0.20.3\">version 0.20.3</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come\npackaged with Python 3, to install and isolate the Bottle, Bokeh,\nand pandas libraries from other Python projects you are working on</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Bottle on Ubuntu 16.04 LTS</a>.</p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">bar-charts-bokeh-bottle-python-3 directory of the blog-code-examples repository</a>.\nUse the source code as you want to for your own projects.</p>\n<h2>Installing Bottle and Bokeh</h2>\n<p>Create a new virtual environment for this project to isolate our\ndependencies using the following command in the terminal. I usually run the\nvenv command within a separate <code>venvs</code> directory where all my virtualenvs\nare store.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv bottlechart\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source bottlechart/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/activate-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Activating our Python virtualenv for this project on the command line.\"></p>\n<p>Keep in mind that you need to activate the virtualenv in every new terminal\nwindow where you want to use the virtualenv to run the project.</p>\n<p>Bokeh and Bottle are installable into the now-activated virtualenv\nusing pip. Run this command to get the appropriate Bokeh and Bottle\nversions.</p>\n<div class=\"highlight\"><pre><span></span>pip install bokeh==0.12.6 bottle==0.12.13 pandas==0.20.3\n</pre></div>\n<p>Our required dependencies will be installed within our virtualenv after\na brief download and installation period.</p>\n<div class=\"highlight\"><pre><span></span>Installing collected packages: bottle, six, chardet, certifi, idna, urllib3, requests, PyYAML, python-dateutil, MarkupSafe, Jinja2, numpy, tornado, bkcharts, bokeh, pytz, pandas\n  Running setup.py install for bottle ... done\n  Running setup.py install for PyYAML ... done\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for tornado ... done\n  Running setup.py install for bkcharts ... done\n  Running setup.py install for bokeh ... done\nSuccessfully installed Jinja2-2.9.6 MarkupSafe-1.0 PyYAML-3.12 bkcharts-0.2 bokeh-0.12.6 bottle-0.12.13 certifi-2017.7.27.1 chardet-3.0.4 idna-2.5 numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 requests-2.18.2 six-1.10.0 tornado-4.5.1 urllib3-1.22\n</pre></div>\n<p>We can now begin coding our web app.</p>\n<h2>Building the Bottle App</h2>\n<p>First we'll code a basic Bottle application and then we will add the\nbar charts to the rendered page.</p>\n<p>Create a folder for your project named <code>bottle-bokeh-charts</code>. Within\n<code>bottle-bokeh-charts</code> create a new file named <code>app.py</code> with the following\ncode: </p>\n<div class=\"highlight\"><pre><span></span>import os\nimport bottle\nfrom bottle import route, run, template\n\n\napp = bottle.default_app()\n\nTEMPLATE_STRING = \"\"\"\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Bar charts with Bottle and Bokeh&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;h1&gt;Bugs found over the past {{ bars_count }} days&lt;/h1&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@route('/&lt;num_bars:int&gt;/')\ndef chart(num_bars):\n    \"\"\"Returns a simple template stating the number of bars that should\n    be generated when the rest of the function is complete.\n    \"\"\"\n    if num_bars &lt;= 0:\n        num_bars = 1\n    return template(TEMPLATE_STRING, bars_count=num_bars)\n\n\nif __name__ == '__main__':\n    run(host='127.0.0.1', port=8000, debug=False, reloader=True)\n</pre></div>\n<p>The code shown above provides a short <a href=\"/bottle.html\">Bottle</a> application\nwith a single route, defined with the <code>chart</code> function. <code>chart</code> receives\nan arbitrary integer value as input. The <code>template</code> function within\n<code>chart</code> uses the HTML template defined in <code>TEMPLATE_STRING</code> to render\nan HTML page as a response to incoming requests.</p>\n<p>The last two lines in the allow us to run the Bottle application\nin debug mode on port 8000.\n<strong>Never use debug mode for production deployments!</strong>\n<a href=\"/wsgi-servers.html\">WSGI servers</a> like\n<a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a> are built for handling real\ntraffic and will be easier to configure without major security\nholes.</p>\n<p>We can now test out our application.</p>\n<p>Make sure your virtualenv is still activated and that you are in the\nbase directory of your project where <code>app.py</code> is located. Run <code>app.py</code>\nusing the <code>python</code> command.</p>\n<div class=\"highlight\"><pre><span></span>(bottlechart)$ python app.py\n</pre></div>\n<p>Go to <a href=\"http://localhost:8000/16/\">localhost:8000/16/</a> in your web browser.\nYou should see a header message about the number of bugs found over the\npast 16 days. However, there's no bar chart to accompany that message\njust yet.</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/basic-app-no-chart.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"A simple Bottle app without the bar chart.\"></p>\n<p>Our single Bottle route is in place but it is not very exciting. Time\nto create a nice-looking bar chart.</p>\n<h2>Creating A Bar Chart with Bokeh</h2>\n<p>We'll build on our basic Bottle app foundation using some new Python code\nto engage the <a href=\"/bokeh.html\">Bokeh</a> library. </p>\n<p>Open <code>app.py</code> back up and add the following highlighted import lines.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport bottle\n<span class=\"highlight\">import random</span>\n<span class=\"highlight\">from bokeh.models import (HoverTool, FactorRange, Plot, LinearAxis, Grid,</span>\n<span class=\"highlight\">                          Range1d)</span>\n<span class=\"highlight\">from bokeh.models.glyphs import VBar</span>\n<span class=\"highlight\">from bokeh.plotting import figure</span>\n<span class=\"highlight\">from bokeh.charts import Bar</span>\n<span class=\"highlight\">from bokeh.embed import components</span>\n<span class=\"highlight\">from bokeh.models.sources import ColumnDataSource</span>\nfrom bottle import route, run, template\n</pre></div>\n<p>The rest of our application will use these imports to generate random\ndata and the bar chart.</p>\n<p>Our bar chart will have \"software bugs found\" for its theme. The data will\nrandomly generate each time the page is generated. In a real application\nyou would of course likely have a more stable and useful data source.</p>\n<p>Continue modifying <code>app.py</code> so the section after the imports looks like\nthe following code. </p>\n<div class=\"highlight\"><pre><span></span>app = bottle.default_app()\n\nTEMPLATE_STRING = \"\"\"\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Bar charts with Bottle and Bokeh&lt;/title&gt;\n<span class=\"highlight\">  &lt;link href=\"http://cdn.pydata.org/bokeh/release/bokeh-0.12.6.min.css\" </span>\n<span class=\"highlight\">        rel=\"stylesheet\"&gt;</span>\n<span class=\"highlight\">  &lt;link href=\"http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.6.min.css\" </span>\n<span class=\"highlight\">        rel=\"stylesheet\"&gt;</span>\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;h1&gt;Bugs found over the past {{ bars_count }} days&lt;/h1&gt;\n<span class=\"highlight\">  {{ !the_div }}</span>\n<span class=\"highlight\">  &lt;script src=\"http://cdn.pydata.org/bokeh/release/bokeh-0.12.6.min.js\"&gt;&lt;/script&gt;</span>\n<span class=\"highlight\">  &lt;script src=\"http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.6.min.js\"&gt;&lt;/script&gt;</span>\n<span class=\"highlight\">  {{ !the_script }}</span>\n &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@route('/&lt;num_bars:int&gt;/')\ndef chart(num_bars):\n    \"\"\"Returns a simple template stating the number of bars that should\n    be generated when the rest of the function is complete.\n    \"\"\"\n    if num_bars &lt;= 0:\n        num_bars = 1\n<span class=\"highlight\">    data = {\"days\": [], \"bugs\": [], \"costs\": []}</span>\n<span class=\"highlight\">    for i in range(1, num_bars + 1):</span>\n<span class=\"highlight\">        data['days'].append(i)</span>\n<span class=\"highlight\">        data['bugs'].append(random.randint(1,100))</span>\n<span class=\"highlight\">        data['costs'].append(random.uniform(<span class=\"mf\">1.00</span>, <span class=\"mf\">1000.00</span>))</span>\n\n<span class=\"highlight\">    hover = create_hover_tool()</span>\n<span class=\"highlight\">    plot = create_bar_chart(data, \"Bugs found per day\", \"days\",</span>\n<span class=\"highlight\">                            \"bugs\", hover)</span>\n<span class=\"highlight\">    script, div = components(plot)</span>\n<span class=\"highlight\">    return template(TEMPLATE_STRING, bars_count=num_bars,</span>\n<span class=\"highlight\">                    the_div=div, the_script=script)</span>\n</pre></div>\n<p>The <code>chart</code> function gains three new lists that are randomly generated by\n<a href=\"https://docs.python.org/3/library/random.html\">Python 3's super-handy random module</a>.</p>\n<p><code>chart</code> calls two functions, <code>create_hover_tool</code> and <code>create_bar_chart</code>.\nWe haven't written those functions yet, so let's do that now. Add these\ntwo new functions below the <code>chart</code> function, but before the\n<code>if __name__ == '__main__':</code> line.</p>\n<div class=\"highlight\"><pre><span></span>def create_hover_tool():\n    # we'll code this function in a moment\n    return None\n\n\ndef create_bar_chart(data, title, x_name, y_name, hover_tool=None,\n                     width=1200, height=300):\n    \"\"\"Creates a bar chart plot with the exact styling for the centcom\n       dashboard. Pass in data as a dictionary, desired plot title,\n       name of x axis, y axis and the hover tool HTML.\n    \"\"\"\n    source = ColumnDataSource(data)\n    xdr = FactorRange(factors=data[x_name])\n    ydr = Range1d(start=0,end=max(data[y_name])*<span class=\"mf\">1.5</span>)\n\n    tools = []\n    if hover_tool:\n        tools = [hover_tool,]\n\n    plot = figure(title=title, x_range=xdr, y_range=ydr, plot_width=width,\n                  plot_height=height, h_symmetry=False, v_symmetry=False,\n                  min_border=10, toolbar_location=\"above\", tools=tools,\n                  responsive=True, outline_line_color=\"#666666\")\n\n    glyph = VBar(x=x_name, top=y_name, bottom=0, width=.8,\n                 fill_color=\"#6599ed\")\n    plot.add_glyph(source, glyph)\n\n    xaxis = LinearAxis()\n    yaxis = LinearAxis()\n\n    plot.add_layout(Grid(dimension=0, ticker=xaxis.ticker))\n    plot.add_layout(Grid(dimension=1, ticker=yaxis.ticker))\n    plot.toolbar.logo = None\n    plot.min_border_top = 0\n    plot.xgrid.grid_line_color = None\n    plot.ygrid.grid_line_color = \"#999999\"\n    plot.yaxis.axis_label = \"Bugs found\"\n    plot.ygrid.grid_line_alpha = <span class=\"mf\">0.1</span>\n    plot.xaxis.axis_label = \"Days after app deployment\"\n    plot.xaxis.major_label_orientation = 1\n    return plot\n</pre></div>\n<p>That's a lot of new code. The <code>create_hover_tool</code> function does not do\nanything just yet other than returning. <code>None</code>, which is used when no\nhover tool is desired for the graph.</p>\n<p>Within the <code>create_bar_chart</code> function we take in our randomly-generated\ndata source and convert it into a <code>ColumnDataSource</code> object that is one\ntype of input object we can pass to Bokeh functions. We specify two ranges\nfor the chart's x and y axes.</p>\n<p>The <code>tools</code> list will remain empty because we do not yet have a hover tool.\nA lot of the magic happens in the lines where we create <code>plot</code> using the\n<code>figure</code> function. We specify all the parameters we want our graph to have\nsuch as the size, toolbar, borders and whether or not the graph should be\nresponsive upon changing the web browser size.</p>\n<p>The <code>VBar</code> object creates vertical bars to add them to the plot with\nthe <code>add_glyph</code> function.</p>\n<p>The last lines of the function change the graph's appearance. For\nexample, we took away the <code>Bokeh</code> logo by specifying\n<code>plot.toolbar.logo = None</code> and added labels to both axes. I recommend\nkeeping the\n<a href=\"http://bokeh.pydata.org/en/latest/docs/reference/plotting.html#bokeh-plotting\">bokeh.plotting</a>\ndocumentation open so you know what your options are for customizing the\ncharts and visualizations.</p>\n<p>Let's test our app by trying a 6-bar chart. The Bottle app should\nautomatically reload when you save <code>app.py</code> with the new code. If you shut\ndown the development server, start it back up using <code>python app.py</code>.</p>\n<p>When you start up the development server you will receive the following\nwarning because we are using the latest (at the time of this writing) 0.12.6\nBokeh release. </p>\n<div class=\"highlight\"><pre><span></span>/Users/matt/Envs/bottlechart/lib/python3.6/site-packages/bokeh/util/deprecation.py:34: BokehDeprecationWarning: \nThe bokeh.charts API has moved to a separate 'bkcharts' package.\n\nThis compatibility shim will remain until Bokeh 1.0 is released.\nAfter that, if you want to use this API you will have to install\nthe bkcharts package explicitly.\n</pre></div>\n<p>Eventually a separate <code>bkcharts</code> project will be required but for now\nwe can keep our code as is.</p>\n<p>Open your browser to <a href=\"http://localhost:8000/6/\">localhost:8000/6/</a>.</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-6.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 6 bars.\"></p>\n<p>That one looks a bit sparse, so we can crank it up by 3x to 18 bars\nby going to <a href=\"http://localhost:5000/18/\">localhost:5000/18/</a>.</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-18.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 18 bars.\"></p>\n<p>Now another 5x to 90 bars with\n<a href=\"http://localhost:8000/90/\">localhost:5000/90/</a>.</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-90.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 90 bars.\"></p>\n<p>Looking good so far! What about that hover tool we skipped over though?\nWe can add the hover tool with just a few more lines of code in the\n<code>create_hover_tool</code> function.</p>\n<h2>Creating a Hover Tool</h2>\n<p>Add these highlighted lines to <code>app.py</code> within the <code>create_hover_tool</code>\nfunction.</p>\n<div class=\"highlight\"><pre><span></span>def create_hover_tool():\n<span class=\"highlight\">    \"\"\"Generates the HTML for the Bokeh's hover data tool on our graph.\"\"\"</span>\n<span class=\"highlight\">    hover_html = \"\"\"</span>\n<span class=\"highlight\">      &lt;div&gt;</span>\n<span class=\"highlight\"><span class=\"s2\">        &lt;span class=\"hover-tooltip\"&gt;$x&lt;/span&gt;</span></span>\n<span class=\"highlight\">      &lt;/div&gt;</span>\n<span class=\"highlight\">      &lt;div&gt;</span>\n<span class=\"highlight\">        &lt;span class=\"hover-tooltip\"&gt;@bugs bugs&lt;/span&gt;</span>\n<span class=\"highlight\">      &lt;/div&gt;</span>\n<span class=\"highlight\">      &lt;div&gt;</span>\n<span class=\"highlight\"><span class=\"s2\">        &lt;span class=\"hover-tooltip\"&gt;<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"705430131f030403\">[email\u00a0protected]</a>{0.00}&lt;/span&gt;</span></span>\n<span class=\"highlight\">      &lt;/div&gt;</span>\n<span class=\"highlight\">    \"\"\"</span>\n<span class=\"highlight\">    return HoverTool(tooltips=hover_html)</span>\n</pre></div>\n<p>Embedding HTML within your Python application isn't usually a great\nidea but it works for small snippets like this hover tool.\nThe hover tool uses <code>$x</code> to show the bar's x axis, <code>@bugs</code> to show the\n\"bugs\" field from our data source, and <code><a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"c4e084a7abb7b0b7\">[email\u00a0protected]</a>{0.00}</code> to show the \"costs\"\nfield formatted as a dollar amount with exactly 2 decimal places.</p>\n<p>Ensure that you changed <code>return None</code> to\n<code>return HoverTool(tooltips=hover_html)</code> in your function so the results of\nthe new code are reflected in the refreshed graph.</p>\n<p>Go back to the browser and reload the\n<a href=\"http://localhost:8000/122\">localhost:8000/122/</a> page.</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-122.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 122 bars.\"></p>\n<p>Well done! Try playing around with the number of bars in the URL and the\nwindow size to see what the graph looks like under different conditions.</p>\n<p>The chart gets crowded with more than 100. However, you can try to create\nas many bars as you want if your computer can handle the rendering.\nThis screenshot shows what the completely impractical amount of 40,000\nbars looks like:</p>\n<p><img src=\"/img/170725-bottle-bokeh-bar-charts/chart-example-40000.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Responsive Bokeh bar chart with 40000 bars.\"></p>\n<p>You may need to do some more work to get the chart to be useful for displaying\nmore than a couple hundred bars at a time.</p>\n<h2>What now?</h2>\n<p>We created a nice little configurable bar chart using the Bokeh code library. </p>\n<p>Next you can change the input data source, work with other types of charts\nor modify the chart color scheme.</p>\n<p>There is a lot more than Bokeh can do. Take a look at the\n<a href=\"http://bokeh.pydata.org/en/latest/\">official project documentation</a> ,\n<a href=\"https://github.com/bokeh/bokeh\">GitHub repository</a>,\nthe <a href=\"/bokeh.html\">Full Stack Python Bokeh page</a> or take a look at\n<a href=\"/table-of-contents.html\">other topics on Full Stack Python</a>.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see something wrong in this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170725-bar-charts-bottle-bokeh.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix.</p>\n</div>"},
{"title": "Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS", "body": "<div class=\"c9\">\n<p>The <a href=\"/ubuntu.html\">Ubuntu 16.04 Long Term Support (LTS)</a> Linux\n<a href=\"/operating-systems.html\">operating system</a> was released in April 2016.\nThis latest Ubuntu release is named \"Xenial Xerus\" and\nit is the first Ubuntu release to include <a href=\"/python-2-or-3.html\">Python 3</a>,\ninstead of Python 2.x, as the default Python installation.</p>\n<p>We can quickly start a new <a href=\"/bottle.html\">Bottle</a> web application project\nand run it with <a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> on\nUbuntu 16.04.</p>\n<h2>Tools We Need</h2>\n<p>Our setup requires the Ubuntu 16.04 release along with a few other code\nlibraries. Don't install these tools just yet since we'll get to them as\nwe go through the walkthrough. Our requirements and their current versions\nas of April 2017 are:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04.2 LTS (Xenial Xerus)</a></li>\n<li><a href=\"/why-use-python.html\">Python</a> version\n<a href=\"https://docs.python.org/3/whatsnew/3.5.html\">3.5.1</a>\n(default in Ubuntu 16.04.2)</li>\n<li><a href=\"/bottle.html\">Bottle</a> web framework version\n<a href=\"http://bottlepy.org/docs/stable/\">0.13</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.7.1</a></li>\n</ul>\n<p>If you are developing on Mac OS X or Windows, make sure to use\nvirtualization software such\nas <a href=\"https://www.parallels.com/products/desktop/\">Parallels</a> or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu .iso file</a>. Either the amd64 or\ni386 version of 16.04 is fine. I use the amd64 version for my own local\ndevelopment.</p>\n<p>A desktop screen like this one appears when you boot up Ubuntu.</p>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/ubuntu-desktop.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Open a terminal window to install the system packages.</p>\n<h2>System Packages</h2>\n<p>We can see the python3 system version Ubuntu comes with and where its\nexecutable is stored using these commands.</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\nwhich python3\n</pre></div>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/which-python.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our Ubuntu installation requires a few system packages. We will get prompted\nfor the superuser password because restricted system access is needed\nto install packages through\n<a href=\"https://en.wikipedia.org/wiki/Advanced_Packaging_Tool\">apt</a>.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install python3-pip python3-dev\n</pre></div>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/install-packages.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Enter <code>y</code> to let the system package installation process do its job.</p>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/packages-installed.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>The packages we need are now installed. We can continue on to install our\nPython-specific dependencies.</p>\n<h2>Virtualenv</h2>\n<p>In the previous section, <a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>\nand <a href=\"https://pypi.org/project/pip\">pip</a> were installed to handle our\n<a href=\"/application-dependencies.html\">application dependencies</a>.\nWe can now use them to download and install Bottle and Gunicorn.</p>\n<p>Create a directory for the virtualenvs. Then create a new virtualenv.</p>\n<div class=\"highlight\"><pre><span></span># make sure pip and setuptools are the latest version\npip3 install --upgrade pip setuptools\n# the tilde \"~\" specifies the user's home directory, like /home/matt\ncd ~\nmkdir venvs\n# specify the system python3 installation\nvirtualenv --python=/usr/bin/python3 venvs/bottleproj\npython3 -m venv venvs/bottleproj\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/bottleproj/bin/activate\n</pre></div>\n<p>Our prompt will change after we properly activate the virtualenv.</p>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/venv-activated.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our virtualenv is now activated with Python 3. We can install whatever\ndependencies we want, in our case Bottle and Gunicorn. </p>\n<h2>Bottle and Gunicorn</h2>\n<p>We can now install Bottle and Green Unicorn via the <code>pip</code> command.</p>\n<div class=\"highlight\"><pre><span></span>pip install bottle gunicorn\n</pre></div>\n<p>No errors like we see in the following screenshot is a good sign.</p>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/good-sign.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Use the <code>mkdir</code> command to create a new directory to keep our Bottle\nproject then use the <code>cd</code> (change directory) command to move into the\nnew folder.</p>\n<div class=\"highlight\"><pre><span></span>mkdir ~/bottleproj\ncd ~/bottleproj\n</pre></div>\n<p>Create a new file named <code>app.py</code> within our <code>bottleproj</code> directory so\nwe can test to make sure Bottle is working properly. I prefer to use\n<a href=\"/vim.html\">Vim</a> but <a href=\"/emacs.html\">Emacs</a> and other\n<a href=\"/development-environments.html\">development environments</a> work great as\nwell.</p>\n<p>Within the new <code>app.py</code> file write the following code.</p>\n<div class=\"highlight\"><pre><span></span>import bottle\nfrom bottle import route, run, Response\n\n# a basic URL route to test whether Bottle is responding properly\n@route('/')\ndef index():\n    return Response(\"It works!\")\n\n# these two lines are only used for python app.py\nif __name__ == '__main__':\n    run(host='0.0.0.0', port=8000, debug=True, reloader=True)\n\n# this is the hook for Gunicorn to run Bottle\napp = bottle.default_app()\n</pre></div>\n<p>We could run our app with the Bottle development server using the\n<code>python app.py</code> command. Let's instead run our Bottle app with\nGunicorn.</p>\n<div class=\"highlight\"><pre><span></span>gunicorn -w 2 app:app\n</pre></div>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/gunicorn-run.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Sweet, we can bring up our shell Bottle app in the web browser at\nthe <code>localhost:8000</code> or <code>127.0.0.1:8000</code> address.</p>\n<p><img src=\"/img/160513-ubuntu-bottle-gunicorn/it-works.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Time to develop a full-fledged web application with <a href=\"/bottle.html\">Bottle</a>!</p>\n<h2>Ready for Development</h2>\n<p>Now you have a simple setup to develop Bottle web apps using Gunicorn as\nthe <a href=\"/wsgi-servers.html\">WSGI server</a> on Ubuntu 16.04. If you need a\nfull step-by-step tutorial to deploy your Python web application to a\nproduction environment, check out the\n<a href=\"http://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.</p>\n<p>To decide what to do next with your Python project, check out the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents</a> page.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160513-bottle-gunicorn-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Install and Use MySQL on Ubuntu 16.04", "body": "<div class=\"c9\">\n<p><a href=\"/mysql.html\">MySQL</a> is a common open source\n<a href=\"/databases.html\">relational database</a> for creating, reading, updating\nand deleting data in <a href=\"/web-frameworks.html\">Python web applications</a>.\nLet's learn how to install MySQL on <a href=\"/ubuntu.html\">Ubuntu 16.04</a> and then\nrun a few SQL queries within the command line client.</p>\n<p>We will not go over connecting via Python applications using\n<a href=\"/object-relational-mappers-orms.html\">object-relational mappers (ORMs)</a>\nbut these steps can be used as a prerequisite to working with an ORM such\nas SQLAlchemy or Peewee.</p>\n<h2>Tools We Need</h2>\n<p>In this tutorial we'll use the following components:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04.2</a> (this tutorial\nshould also work on other Ubuntu versions)</li>\n<li><a href=\"http://dev.mysql.com/doc/\">MySQL</a></li>\n</ul>\n<h2>Install MySQL</h2>\n<p>We can install MySQL by using the <code>apt</code> package manager. First make sure\nyour packages list are up to date. Open the terminal and run this <code>apt</code>\ncommand.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get update\n</pre></div>\n<p>We need to install the <code>mysql-server</code> package, which downloads the required\nfiles, configures the initial database set up and handles running MySQL\nas a system service. Run this <code>apt</code> command to get the process started.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install mysql-server\n</pre></div>\n<p>Enter 'y' when prompted with whether or not you want to install the\nnew package.</p>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/apt-install-prompt.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>An administrative screen asking for a new root password will appear in the\nmiddle of the package installation process. Enter your chosen new password\ntwice and the installation will continue.</p>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/new-root-password.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>In a moment the installation will finish and you'll be back at the command\nprompt.</p>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/apt-finished.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>MySQL is now installed with a root user. However, we do not want to have our\napplications connect to the database with that user, so next we will\ncreate a new non-root user.</p>\n<h2>Securing MySQL</h2>\n<p>MySQL is installed with a basic configuration meant for development and testing\npurposes. However, the configuration is not secure for production enviroments,\ntherefore it comes with a utility to handle basic security. Run the\nfollowing command and answer the questions based on your environment\nrequirements.</p>\n<div class=\"highlight\"><pre><span></span>sudo mysql_secure_installation\n</pre></div>\n<p>When you finish running the script you should see the following output and\nbe back at the command prompt.</p>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/mysql-secure-installation.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Our MySQL instance has basic security in place but we need to create a\nnon-root user for applications to interact with the database.</p>\n<h2>Creating MySQL Users</h2>\n<p>To create a non-root user, connect to the MySQL instance with the\n<code>mysql</code> command line client.</p>\n<div class=\"highlight\"><pre><span></span>mysql -u root -p\n</pre></div>\n<p>Now use the <code>CREATE USER</code> command to generate a new user. Make sure to\nchange \"mynewuser\" and \"goodPassword\" with your own values.</p>\n<div class=\"highlight\"><pre><span></span>CREATE USER 'mynewuser'@'localhost' IDENTIFIED BY 'goodPassword';\n</pre></div>\n<p>No output after the command is good - that means the command succeeded.</p>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/create-user.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>We need to apply privileges to the new user so it can handle basic database\noperations. Again, make sure to replace the default username in this command\nwith your new username.</p>\n<div class=\"highlight\"><pre><span></span>GRANT ALL PRIVILEGES ON * . * TO 'mynewuser'@'localhost';\n</pre></div>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/grant-all.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>It's a good idea to reload the privileges to make sure our new user's\npermissions are in place.</p>\n<div class=\"highlight\"><pre><span></span>FLUSH PRIVILEGES;\n</pre></div>\n<p>Now that our permissions are reloaded we can connect with the new user.</p>\n<h2>New User Connection</h2>\n<p>We're set to connect to the database with our new user. Exit the MySQL\nclient with \"Ctrl-d\". Reconnect using a slightly different command than\nwe used earlier.</p>\n<div class=\"highlight\"><pre><span></span>mysql -u mynewuser -p\n</pre></div>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/mysql-new-user.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Connect to MySQL as the new user we just created.\"></p>\n<p>Create a new database with the <code>CREATE DATABASE</code> command.</p>\n<div class=\"highlight\"><pre><span></span>CREATE DATABASE fullstackpython;\n</pre></div>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/create-database.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Create a new MySQL database with our new user.\"></p>\n<p>Connect to the new database with the <code>USE</code> command.</p>\n<div class=\"highlight\"><pre><span></span>use fullstackpython;\n</pre></div>\n<p><img src=\"/img/160528-mysql-ubuntu-1604/use-command.png\" width=\"100%\" class=\"technical-diagram img-rounded\" alt=\"Connect to the newly-created database with the USE command.\"></p>\n<p>Create a simple new table with the <code>CREATE TABLE</code> command.</p>\n<div class=\"highlight\"><pre><span></span>CREATE TABLE pages (name VARCHAR(50), url VARCHAR(1024));\n</pre></div>\n<p>Our table is ready to go - we can interact with it using the\n<code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> and <code>DELETE</code> SQL commands.</p>\n<h2>What's next?</h2>\n<p>We now have our MySQL instance installed and ready for interaction.\nTake a look at the <a href=\"/mysql.html\">MySQL</a>,\n<a href=\"/databases.html\">relational databases</a> and\n<a href=\"/object-relational-mappers-orms.html\">object-relational mappers (ORMs)</a>\npages for more tutorials.</p>\n<p>Questions? Tweet <a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor post a message on the\n<a href=\"https://www.facebook.com/fullstackpython\">Full Stack Python Facebook page</a>. </p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160528-install-mysql-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04", "body": "<div class=\"c9\">\n<p><a href=\"/postgresql.html\">PostgreSQL</a> is a powerful open source\n<a href=\"/databases.html\">relational database</a> frequently used to create, read,\nupdate and delete <a href=\"/web-frameworks.html\">Python web application</a> data.\n<a href=\"http://initd.org/psycopg/\">Psycopg2</a> is a PostgreSQL database\ndriver that serves as a Python client for access to the PostgreSQL server.\nThis post explains how to install PostgreSQL on <a href=\"/ubuntu.html\">Ubuntu 16.04</a>\nand run a few basic SQL queries within a Python program.</p>\n<p>We won't cover\n<a href=\"/object-relational-mappers-orms.html\">object-relational mappers (ORMs)</a>\nin this tutorial but these steps can be used as a prerequisite to working\nwith an ORM such as SQLAlchemy or Peewee.</p>\n<h2>Tools We Need</h2>\n<p>Our walkthrough should work with either <a href=\"/python-2-or-3.html\">Python 2 or 3</a>\nalthough all the steps were tested specifically with Python 3.5. Besides\nthe Python interpreter, here are the other components we'll use:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/16.04/\">Ubuntu 16.04.2</a> (these\nsteps should also work fine with other Ubuntu versions)</li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to handle the\n<a href=\"https://pypi.org/project/psycopg2/2.6.1\">psycopg2</a>\n<a href=\"/application-dependencies.html\">application dependency</a></li>\n<li><a href=\"http://www.postgresql.org/\">PostgreSQL</a></li>\n</ul>\n<p>If you aren't sure how to install pip and virtualenv, review the\nfirst few steps of the\n<a href=\"/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html\">how to set up Python 3, Bottle and Green Unicorn on Ubuntu 16.04 LTS</a>\nguide.</p>\n<h2>Install PostgreSQL</h2>\n<p>We'll install PostgreSQL via the <code>apt</code> package manager. There are a few\npackages we need since we want to both run PostgreSQL and use the psycopg2\ndriver with our Python programs. PostgreSQL will also be installed as a\nsystem service so we can start, stop and reload its configuration when\nnecessary with the <code>service</code> command. Open the terminal and run: </p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install postgresql libpq-dev postgresql-client postgresql-client-common\n</pre></div>\n<p>Enter your <code>sudo</code> password when prompted and enter 'yes' when <code>apt</code> asks\nif you want to install the new packages.</p>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/apt-get-postgresql.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>After a few moments <code>apt</code> will finish downloading, installing and\nprocessing.</p>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/apt-get-postgresql-done.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>We now have PostgreSQL installed and the PostgreSQL service is running\nin the background. However, we need to create a user and a database instance\nto really start using it. Use the <code>sudo</code> command to switch to the new\n\"postgres\" account.</p>\n<div class=\"highlight\"><pre><span></span>sudo -i -u postgres\n</pre></div>\n<p>Within the \"postgres\" account, create a user from the command line with the\n<code>createuser</code> command. PostgreSQL will prompt you with several questions.\nAnswer \"n\" to superuser and \"y\" to the other questions.</p>\n<div class=\"highlight\"><pre><span></span>createuser matt -P --interactive\n</pre></div>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/createuser.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Awesome, now we have a PostgreSQL user that matches our Ubuntu login\naccount. Exit out of the postgres account by pressing the \"Ctrl\" key along\nwith \"d\" into the shell. We're back in our own user account.</p>\n<p>Create a new database we can use for testing. You can name it \"testpython\"\nor whatever you want for your application.</p>\n<div class=\"highlight\"><pre><span></span>createdb testpython\n</pre></div>\n<p>Now we can interact with \"testpython\" via the PostgreSQL command line tool.</p>\n<h2>Interacting with PostgreSQL</h2>\n<p>The <code>psql</code> command line client is useful for connecting directly to our\nPostgreSQL server without any Python code. Try out <code>psql</code> by using this\ncommand at the prompt: </p>\n<div class=\"highlight\"><pre><span></span>psql testpython\n</pre></div>\n<p>The PostgreSQL client will connect to the localhost server. The client is\nnow ready for input:</p>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/postgresql-cli.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Try out PostgreSQL's command prompt a try with commands such as <code>\\dt</code> and\n<code>\\dd</code>. We can also run SQL queries such as \"SELECT * from testpython\",\nalthough that won't give us back any data yet because we have not inserted\nany into the database. A full list of PostgreSQL commands can be\nfound in the\n<a href=\"http://www.postgresql.org/docs/9.6/static/app-psql.html\">psql documentation</a>.</p>\n<h2>Installing psycopg2</h2>\n<p>Now that PostgreSQL is installed and we have a non-superuser account, we\ncan install the <a href=\"http://initd.org/psycopg/\">psycopg2</a> package. Let's\nfigure out where our <code>python3</code> executable is located, create a virtualenv\nwith <code>python3</code>, activate the virtualenv and then install the psycopg2 package\nwith <code>pip</code>. Find your <code>python3</code> executable using the <code>which</code> command.</p>\n<div class=\"highlight\"><pre><span></span>which python3\n</pre></div>\n<p>We will see output like what is in this screenshot.</p>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/which-python-3.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Create a new virtualenv in either your home directory or wherever you\nstore your Python virtualenvs. Specify the full path to your <code>python3</code>\ninstallation. </p>\n<div class=\"highlight\"><pre><span></span># specify the system python3 installation\nvirtualenv --python=/usr/bin/python3 venvs/postgrestest\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/postgrestest/bin/activate\n</pre></div>\n<p>Next we can install the psycopg2 Python package from\n<a href=\"https://pypi.python.org/pypi\">PyPI</a> using the <code>pip</code> command.</p>\n<div class=\"highlight\"><pre><span></span>pip install psycopg2\n</pre></div>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/pip-install-psycopg2.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>Sweet, we've got our PostgreSQL driver installed in our virtualenv! We can\nnow test out the installation by writing a few lines of Python code.</p>\n<h2>Using PostgreSQL from Python</h2>\n<p>Launch the Python REPL with the <code>python</code> or <code>python3</code> command. You can also\nwrite the following code in a Python file such as \"testpostgres.py\" then\nexecute it with <code>python testpostgres.py</code>. Make sure to replace the \"user\"\nand \"password\" values with your own.</p>\n<div class=\"highlight\"><pre><span></span>import psycopg2\n\ntry:\n    connect_str = \"dbname='testpython' user='matt' host='localhost' \" + \\\n                  \"password='myOwnPassword'\"\n    # use our connection values to establish a connection\n    conn = psycopg2.connect(connect_str)\n    # create a psycopg2 cursor that can execute queries\n    cursor = conn.cursor()\n    # create a new table with a single column called \"name\"\n    cursor.execute(\"\"\"CREATE TABLE tutorials (name char(40));\"\"\")\n    # run a SELECT statement - no data in there, but we can try it\n    cursor.execute(\"\"\"SELECT * from tutorials\"\"\")\n    conn.commit() # &lt;--- makes sure the change is shown in the database\n    rows = cursor.fetchall()\n    print(rows)\n    cursor.close()\n    conn.close()\nexcept Exception as e:\n    print(\"Uh oh, can't connect. Invalid dbname, user or password?\")\n    print(e)\n</pre></div>\n<p>When we run the above code we won't get anything fancy, just an empty\nlist printed out. However, in those few lines of code we've ensured our\nconnection to our new database works and we can create new tables in it as\nwell as query them.</p>\n<p><img src=\"/img/160518-postgresql-ubuntu-1604/output.png\" width=\"100%\" class=\"technical-diagram img-rounded\"></p>\n<p>That's just enough of a hook to get started writing more complicated SQL\nqueries using psycopg2 and PostgreSQL. Make sure to check out the\n<a href=\"/postgresql.html\">PostgreSQL</a>,\n<a href=\"/databases.html\">relational databases</a> and\n<a href=\"/object-relational-mappers-orms.html\">object-relational mappers (ORMs)</a>\npages for more tutorials.</p>\n<p>Questions? Tweet <a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor post a message on the\n<a href=\"https://www.facebook.com/fullstackpython\">Full Stack Python Facebook page</a>. </p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160518-install-postgresql-python-3-ubuntu-1604.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "PyDev of the Week, Django 2.0 and Twilio Voices", "body": "<div class=\"c9\">\n<p><a href=\"https://www.blog.pythonlibrary.org/category/pydevoftheweek/\"><strong>PyDev of the Week</strong></a>\nis a developer interview series by\n<a href=\"https://github.com/driscollis\">Mike Driscoll</a> that asks Python programmers\nhow they started coding, the projects they're working on and what advice\nthey have for beginners. Mike was kind enough to\n<a href=\"https://www.blog.pythonlibrary.org/2017/10/30/pydev-of-the-week-matthew-makai/\">interview me in the latest PyDev of the Week post</a>.</p>\n<p>In the PyDev interview I gave a big shoutout to the fine folks working on the\n<a href=\"/django.html\">Django project</a>, which is\ncurrently beta testing the major upcoming\n<a href=\"https://docs.djangoproject.com/en/2.0/releases/2.0/\"><strong>Django 2.0 release</strong></a>.\nDjango 2.0 is the first release to support only Python 3, specifically\n<a href=\"https://docs.djangoproject.com/en/2.0/releases/2.0/#python-compatibility\">Python 3.4, 3.5 and 3.6</a>.\nThe <a href=\"https://www.djangoproject.com/weblog/2017/oct/16/django-20-beta-1-released/\">Django 2.0 beta 1 release</a>\nneeds\n<a href=\"https://code.djangoproject.com/query?version=2.0&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=component&amp;col=version&amp;desc=1&amp;order=id\">feedback on bugs in the issue tracker</a>.</p>\n<p>One bit I missed calling out in the PyDev interview is a new program I'm\nworking on called <a href=\"http://www.twiliovoices.com\"><strong>Twilio Voices</strong></a>. Twilio\nVoices pays developers to write great technical tutorials for the\n<a href=\"https://www.twilio.com/blog\">Twilio blog</a>. We have already published a slew\nof awesome Python walkthroughs such as:</p>\n<ul>\n<li><a href=\"https://www.twilio.com/blog/2017/06/hacked-my-universitys-registration-system-python-twilio.html\">How I Hacked My University's Registration System with Twilio SMS</a> by Samuel Taylor</li>\n<li><a href=\"https://www.twilio.com/blog/2017/08/geospatial-analysis-python-geojson-geopandas.html\">Getting Started on Geospatial Analysis with Python, GeoJSON and GeoPandas</a> by Lesley Cordero</li>\n<li><a href=\"https://www.twilio.com/blog/2017/08/json-serialization-in-python-using-serpy.html\">JSON Serialization in Python using serpy</a> by Siddhant Goel</li>\n<li><a href=\"https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html\">Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding</a> by Thomas Curtis</li>\n<li><a href=\"https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html\">Never Forget A Friend\u2019s Birthday with Python, Flask and Twilio</a>\nby Bob Belderbos</li>\n</ul>\n<p>Take a look at the <a href=\"http://www.twiliovoices.com/\">Twilio Voices page</a> and\nsubmit the interest form if you want to get paid to write code tutorials\nin any programming language of your choice. We'll take care of promoting your\nposts to the broader developer community.</p>\n<p>As always, send me an email or <a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\nto let me know how to improve\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>\nas I continue to\n<a href=\"/table-of-contents.html\">fill in the table of contents</a>\nwith <a href=\"/change-log.html\">new pages</a>\nand\n<a href=\"/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "DevOps, Continuous Delivery... and You", "body": "<div class=\"c9\">\n<p>This blog post contains the slides along with a loose transcript and\nadditional resources from my technical talk on DevOps and Continuous\nDelivery concepts given at my alma mater, the University of Virginia,\nto the <a href=\"https://www.commerce.virginia.edu/ms-mit\">M.S. in Management of Information Technology program</a> on November 2nd and 4th of 2017.</p>\n<p>Links to learn more about the concepts presented in this talk can\nbe found in the sidebar and at the bottom of this page.</p>\n<hr>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.001.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Title slide for technical talk.\">\nHey folks, my name is <a href=\"/about-author.html\">Matt Makai</a>. I am a\n<a href=\"https://www.twilio.com/blog/2014/02/introducing-developer-evangelist-matt-makai.html\">software developer at Twilio</a>\nand the creator of <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>,\nwhich over 125,000 developers read each month to learn how to\n<a href=\"/web-development.html\">build</a>, <a href=\"/deployment.html\">deploy</a> and\n<a href=\"/devops.html\">operate</a> <a href=\"/why-use-python.html\">Python-based applications</a>.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.004.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What's the point of Agile?\">\nYou've talked about using the Agile software development methodology\non your teams, but what's the purpose? Why does Agile development matter\nto you and your organization?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.005.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Cargo ship with containers.\">\nAgile matters because it allows you to ship more code, faster than\ntraditional \"waterfall\" methodology approaches. </p>\n<p>Shipping is a common allegory in software development nowadays, because\ncode that is not in production, in the hands of your users, doesn't create\nvalue for anyone.</p>\n<p>If code is not running in production, it's not creating value. New\ncode created by your Agile development teams every couple of weeks does\nnot create more value until it is executing in production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.006.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Docker logo.\">\nShipping code is so important to high functioning companies that the\nmaritime theme is used across all sorts of projects, including in the Docker\nlogo.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.007.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Kubernetes logo.\">\nAs well as in the Kubernetes logo in the form of a ship steering wheel.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.008.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Agile sprints need to ship code into production to create anything of value.\">\nHere is a super high-level diagram of the ideal scenario we need for\nAgile development teams. Create working code and get it shipped as soon\nas possible into production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.009.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Move fast and break things.\">\nFacebook's internal motto used to be \"Move fast and break things.\" They\nthought that if you aren't breaking things then you aren't moving fast\nenough. </p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.010.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"If you do not have the right processes and tools in place eventually production will break.\">\nAnd eventually if you're constantly shipping to production and you do not\nhave the appropriate processes and tools in place, your applications\nwill break. The breakage has nothing to do with the Agile methodology\nitself.</p>\n<p>Your team and organization will come to a fork in the road when you\nend up with a broken environment.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.011.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Fight the urge to put manual processes in place that slow you down. You must automate.\">\nTraditionally, organizations have tried to prevent breakage by putting\nmore manual tools and processes in place. Manual labor slows... down...\nyour... ability... to... execute.</p>\n<p>This is one path provided by the fork in the road. Put your \"Enterprise\nChange Review Boards\" in place. Require production sign-offs by some\nExecutive Vice President who has never written a line of code in his life.\nPut several dozen \"technical architects\" in a room together to argue over\nwho gets to deploy their changes to production that month.</p>\n<p>The manual path is insanity. Eventually the best developers in your\norganization will get frustrated and leave. Executives will ask why\nnothing ever gets done. Why does it take our organization three years\nto ship a small change to a critical application?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.012.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Some teams try to get around the production problem by shipping to dev, but they still are not creating value.\">\nSome development teams try to get around the manual production challenges\nby shipping everything to a development environment. The dev environment is\nunder their control.</p>\n<p>But what's the huge glaring problem in this situation?</p>\n<p>If you are not shipping to production, then you are not creating any value\nfor your users. The teams have made a rational decision to ship to development\nbut the organization still suffers due to the manual controls.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.013.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"This session is about DevOps and Continuous Delivery.\">\nThe problems we are talking about are created by the Agile methodology\nbecause they become acute when your development team is producing code at\nhigh velocity. Once code is created faster, you need a way to reliably,\nconsistently put the code into production so that it can create value for\nits users.</p>\n<p>DevOps and Continuous Delivery are the broad terms that encompass how to\nreliably ship code to production and operate it when the code is running in\nproduction.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.014.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What DevOps is NOT.\">\nWe are going to use the terms \"DevOps\" and \"Continuous Delivery\" a lot today,\nso let's start by defining what they mean. In fact, the term \"DevOps\" has\nalready accumulated a lot of buzzword baggage, so we'll start by defining\nwhat DevOps is <em>not</em>.</p>\n<p>First,DevOps is not a new role. If you go hire a bunch of people and call them\n\"DevOps engineers\" then sit them in the middle of your developers and system\nadmin/ops folks, you are going to have a bad time. You just added a new layer\nbetween the two groups you need to pull closer together.</p>\n<p>Second, DevOps is not a specific tool or application. You do not need to\nuse Docker or Puppet to do DevOps in your organization. The processes that\nmake DevOps work are made much easier by some tools such as cloud platforms\nwhere infrastructure is transient, but even those platforms are not required\nto do DevOps right.</p>\n<p>Third, DevOps is not tied to a specific programming language ecosystem. You\ndo not need to use Node.js or Ruby on Rails. You can still use DevOps\nin a COBOL- or J2EE-only organization.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.015.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What DevOps IS.\">\nWith those misconceptions out of the way, let's talk about what DevOps IS.\nFirst, at the risk of being way too obvious, DevOps is the combination of the\ntwo words Development and Operations. This combination is not a random\npairing, it's an intentional term. </p>\n<p>Second, DevOps means your application developers handle operations. Not\nnecessarily <em>all</em> operations work, but ops work that deals with the code they\nwrite and deploy as part of their sprints. The developers also will likely\nbecome intimately familiar with the underlying infrastructure such as the\nweb application servers, <a href=\"/web-servers.html\">web servers</a> and\n<a href=\"/deployment.html\">deployment</a> code for\n<a href=\"/configuration-management.html\">configuration management</a> tools.</p>\n<p>Third, DevOps allows your organization to be more efficient in handling\nissues by ensuring the correct person is handling errors and application\nfailures.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.016.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"What Continuous Delivery is.\">\nWe are not going to go through Continuous Delivery (CD) by defining what it is\nnot, but there are a couple bits to say about it. First, CD is a collection of\nengineering practices aimed at automating the delivery of code from\nversion control check-in until it is running in a production environment.</p>\n<p>The benefit of the automation CD approach is that your organization will have\nfar greater confidence in the code running in production even as the code\nitself changes more frequently with every deployment.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.017.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Move fast and BUILD things.\">\nFacebook's original motto changed a few years ago to \"Move Fast and Build\nThings\" because they realized that breaking production was not a byproduct\nof moving fast, it was a result of immature organizational processes and\ntools. DevOps and Continuous Delivery are why organizations can now deploy\nhundreds or thousands of times to production every day but have increasing,\nnot decreasing, confidence in their systems as they continue to move faster.</p>\n<p>Let's take a look at a couple of example scenarios that drive home what\nDevOps and CD are all about, as well as learn about some of the processes,\nconcepts and tools that fall in this domain.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.018.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"San Francisco skyline at night.\">\nHere is a beautiful evening picture of the city I just moved away from, San\nFrancisco.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.019.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Twilio billboard, ask your developer!\">\nThe company I work for, <a href=\"https://www.twilio.com/\">Twilio</a> is located in\nSan Francisco. If you ever fly into the SFO airport and catch a ride towards\ndowntown, you will see our billboard on the right side of the road. </p>\n<p>Twilio makes it easy for software developers to add communications, such as\nphone calling, messaging and video, into their applications. We are a\ntelecommunications company built with the power of software that eliminates\nthe need for customers to buy all the expensive legacy hardware that they\nused to have to acquire. As a telecomm company, we can never go down, or\nour customers are hosed and then our business is hosed.</p>\n<p>However, we have had challenges in our history that have forced us to\nconfront the fork in the road between manual processes and moving faster via\ntrust in our automation.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.020.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"August 2013.\">\nIn August 2013, Twilio faced an infrastructure failure.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.021.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How customers pay for Twilio.\">\nFirst, some context. When a developer signs up for Twilio, she puts some\ncredit on their account and the credit is drawn upon by making phone calls,\nsending messages and such. When credit runs low we can re-charge your card\nso you get more credit.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.022.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Hacker News post on Twilio not billing correctly.\">\nThere was a major production issue with the recurring charges in August 2013.\nOur engineers were alerted to the errors and the issue blew up on the top of\n<a href=\"https://news.ycombinator.com/\">Hacker News</a>, drawing widespread atttention.</p>\n<p>So now there is a major production error... what do we do? </p>\n<p>(Reader note: this section is primarily audience discussion based on their\nown experiences handling these difficult technical situations.)</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.023.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Billing incident update blog post.\">\nOne step is to figure out when the problem started and whether or not it\nis over. If it's not over, triage the specific problems and start\ncommunicating with customers. Be as accurate and transparent as possible.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.024.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Redis logo.\">\nThe specific technical issue in this case was due to our misconfiguration of\nRedis instances.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.025.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'Root cause?'\">\nWe know the particular technical failure was due to our Redis mishandling,\nbut how do we look past the specific bit and get to a broader understanding\nof the processes that caused the issue?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.026.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Billing incident response from Twilio developer evangelist.\">\nLet's take a look at the resolution of the situation and then learn about\nthe concepts and tools that could prevent future problems.</p>\n<p>In this case, we communicated with our customers as much about the problem\nas possible. As a developer-focused company, we were fortunate that by being\ntransparent about the specific technical issue, many of our customers gained\nrespect for us because they had also faced similar misconfigurations in their\nown environments.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.027.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Twilio status page.\">\nTwilio became more transparent with the status of services, especially with\nshowing partial failures and outages.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.028.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Twilio number of production deployments.\">\nTwilio was also deliberate in avoiding the accumulation of manual processes\nand controls that other organizations often put in place after failures. We\ndoubled down on resiliency through automation to increase our ability to\ndeploy to production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.029.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'tools and concepts'.\">\nWhat are some of the tools and concepts we use at Twilio to prevent future\nfailure scenarios?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.030.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Eventually you ship code into production that breaks your application.\">\nIf you do not have the right tools and processes in place, eventually you\nend up with a broken production environment after shipping code. What is\none tool we can use to be confident that the code going into production is\nnot broken?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.031.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'automated testing' with example code coverage in the background.\">\nAutomated <a href=\"/testing.html\">testing</a>, in its many forms, such as unit testing,\nintegration testing, security testing and performance testing, helps to\nensure the integrity of the code. You need to automate because manual\ntesting is too slow.</p>\n<p>Other important tools that fall into the automated testing bucket but are\nnot traditionally thought of as a \"test case\" include code coverage and\n<a href=\"/code-metrics.html\">code metrics</a> (such as Cyclomatic Complexity).</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.032.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Automated tests in dev only deploy to production when they are successful.\">\nAwesome, now you only deploy to production when a big batch of automated\ntest cases ensure the integrity of your code. All good, right?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.033.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Bugs can still occur in production.\">\nErr, well no. Stuff can still break in production, espcially in environments\nwhere for various reasons you do not have the same exact data in test\nthat you do in production. Your automated tests and code metrics will\nsimply not catch every last scenario that could go wrong in production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.034.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'monitoring and alerting' with New Relic dashboard in the background.\">\nWhen something goes wrong with your application, you need monitoring to\nknow what the problem is, and alerting to tell the right folks. Traditionally,\nthe \"right\" people were in operations. But over time many organizations\nrealized the ops folks ended up having to call the original application\ndevelopers who wrote the code that had the problem. </p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.035.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"When something breaks in prod, your developers know about it and can fix the problem.\">\nA critical piece to DevOps is about ensuring the appropriate developers\nare carrying the pagers. It sucks to carry the pager and get woken up in the\nmiddle of the night, but it's a heck of a lot easier to debug the code that\nyour team wrote than if you are a random ops person who's never seen the\ncode before in her life.</p>\n<p>Another by-product of having application developers carry the \"pagers\" for\nalerts on production issues is that over time the code they write is more\ndefensive. Errors are handled more appropriately, because otherwise you know\nsomething will blow up on you later on at a less convenient time. </p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.036.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"When production is running smoothly with many tests, do that increase the chance of black swan-type events?\">\nTypically you find though that there are still plenty of production errors\neven when you have defensive code in place with a huge swath of the most\nimportant parts of your codebase being constantly tested.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.037.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'Chaos engineering' with the chaos engineering monkey logo in the background.\">\nThat's where a concept known as \"chaos engineering\" can come in. Chaos\nengineering breaks parts of your production environment on a schedule and\neven unscheduled basis. This is a very advanced technique- you are not going\nto sell this in an environment that has no existing automated test coverage\nor appropriate controls in place.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.038.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Chaos engineering introduces intentional failures in your infrastructure both on a scheduled and unschedule basis.\">\nBy deliberately introducing failures, especially during the day when your\nwell-caffeinated team can address the issues and put further safeguards in\nplace, you make your production environment more resilient.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.039.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads '1. other peoples money' with money in the background.\">\nWe talked about the failure in Twilio's payments infrastructure several years\nago that led us to ultimately become more resilient to failure by putting\nappropriate automation in place.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.040.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads '2. other peoples lives' with people in the background.\">\nScrewing with other people's money is really bad, and so is messing with\npeople's lives.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.041.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'War on Terror' with an exploded vehicle in the background.\">\nLet's discuss a scenario where human lives were at stake. </p>\n<p>To be explicit about this next scenario, I'm only going to talk about public\ninformation, so my cleared folks in the audience can relax.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.042.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"U.S. military and civilian casualties in Iraq.\">\nDuring the height of U.S forces' Iraq surge in 2007, more improvised explosive\ndevices were killing and maiming soldiers and civilians than ever before. It\nwas an incredible tragedy that contributed to the uncertainty of the time in\nthe country.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.043.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Biometrics devices.\">\nHowever, efforts in biometrics were one part of the puzzle that helped to\nprevent more attacks, as shown in this picture from General Petraeus' report\nto Congress.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.044.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Eclipse IDE.\">\nOne major challenge with the project was a terrible manual build process that\nliterally involved clicking buttons in an integrated\n<a href=\"/development-environments.html\">development environment</a> to create the\napplication artifacts. The process was too manual and the end result was that\nthe latest version of the software took far too long to get into production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.045.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"The situation did not have reasonable deployments to dev or to production.\">\nWe did not have automated deployments to a development environment, staging\nor production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.046.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Start somewhere, automate your deployments to dev environment.\">\nOur team had to start somewhere, but with a lack of approved tools, all we\nhad available to us was shell scripts. But shell scripts were a start. We were\nable to make a very brittle but repeatable, automated deployment process to\na development environment?</p>\n<p>There is still a huge glaring issue though: until the code is actually\ndeployed to production it does not provide any value for the users.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.047.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Some environments have tricky issues with automated prod deployments like disconnected networks.\">\nIn this case, we could never fully automate the deployment because we had to\nburn to a CD before moving to a physically different computer network. The\nteam could automate just about everything else though, and that really mattered\nfor iteration and speed to deployment.</p>\n<p>You do the best you can with the tools at your disposal.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.048.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'Tools and concepts'.\">\nWhat are the tools and concepts behind automating deployments?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.049.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Several development teams commit to a Git repository.\">\nSource code is stored in a\n<a href=\"/source-control.html\">source control (or version control)</a> repository.\nSource control is the start of the automation process, but what do we need\nto get the code into various environments using a repeatable, automated\nprocess?</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.050.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'continuous integration' with a screenshot of Jenkins dashboard in the background.\">\nThis is where <a href=\"/continuous-integration.html\">continuous integration</a> comes\nin. Continuous integration takes your code from the version control system,\nbuilds it, tests it and calculate the appropriate code metrics before the\ncode is deployed to an environment.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.051.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Add a continuous integration server to build the code that is committed to your source control repository.\">\nNow we have a continuous integration server hooked up to source control, but\nthis picture still looks odd.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.052.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"How do we automate the building of these environments and the deployments themselves?\">\nTechnically, continuous integration does not handle the details of the build\nand how to configure individual execution environments.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.053.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Text that reads 'configuration management' with a screenshot of Ansible AWX in the background.\">\n<a href=\"/configuration-management.html\">Configuration management</a> tools handle the\nsetup of application code and environments.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.054.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Agile sprints deliver code to a development environment and then automate the deployment into production.\">\nThose two scenarios provided some context for why DevOps and Continuous\nDelivery matter to organizations in varying industries. When you have high\nperforming teams working via the Agile development methodology, you will\nencounter a set of problems that are not solvable by doing Agile \"better\". You\nneed the tools and concepts we talked about today as well as a slew of other\nengineering practices to get that new code into production.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.055.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Review list of continuous delivery tools.\">\nThe tools and concepts we covered today were\n<a href=\"/testing.html\">automated testing</a>, <a href=\"/monitoring.html\">monitoring</a>, chaos\nengineering, <a href=\"/continuous-integration.html\">continuous integration</a> and\n<a href=\"/configuration-management.html\">configuration management</a>.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.056.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"A list of more concepts and tools for continuous delivery.\">\nThere are many other practices you will need as you continue your journey.\nYou can learn about\n<a href=\"/table-of-contents.html\">all of them on Full Stack Python</a>.</p>\n<p><img src=\"/img/171101-devops-cd-you/devops-cd-you.057.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border: 1px solid #aaa\" alt=\"Thank you slide.\"></p>\n<p>That's all for today. My name is <a href=\"/about-author.html\">Matt Makai</a>\nand I'm a software developer at <a href=\"/twilio.html\">Twilio</a> and the\nauthor of <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>.\nThank you very much.</p>\n<hr>\n<p>Additional resources to learn more about the following topics can be found\non their respective pages:</p>\n<ul>\n<li><a href=\"/deployments.html\">Deployments</a></li>\n<li><a href=\"/continuous-integration.html\">Continuous integration</a></li>\n<li><a href=\"/serverless.html\">Serverless computing</a></li>\n<li><a href=\"/aws-lambda.html\">AWS Lambda</a></li>\n<li><a href=\"/static-site-generator.html\">Static site generators</a></li>\n<li><a href=\"/monitoring.html\">Monitoring</a></li>\n<li><a href=\"/devops.html\">DevOps</a></li>\n<li><a href=\"/configuration-management.html\">Configuration management</a></li>\n<li><a href=\"/platform-as-a-service.html\">Platform-as-a-Service (PaaS)</a></li>\n<li><a href=\"/docker.html\">Docker</a></li>\n<li><a href=\"/web-application-security.html\">Web application security</a></li>\n<li><a href=\"/testing.html\">Testing</a></li>\n<li><a href=\"/source-control.html\">Source control</a></li>\n<li><a href=\"/git.html\">Git</a></li>\n<li><a href=\"/code-metrics.html\">Code metrics</a></li>\n<li><a href=\"/no-sql-datastore.html\">NoSQL</a></li>\n</ul>\n</div>"},
{"title": "How to Provision Ubuntu 16.04 Linux Servers on Linode", "body": "<div class=\"c9\">\n<p>Your live web application must be <a href=\"/deployment.html\">deployed</a> and run\nsomewhere other than your local\n<a href=\"/development-environments.html\">development environment</a>. That deployment\nlocation is known as a \"production environment\" and it is built out of\none or more <a href=\"/servers.html\">servers</a>.</p>\n<p>Let's learn how to provision an <a href=\"/ubuntu.html\">Ubuntu Linux 16.04 LTS</a>\n<a href=\"/virtual-private-servers-vps.html\">virtual private server (VPS)</a> on Linode\nthat can be used for production or development purposes.</p>\n<h2>Signing up for Linode</h2>\n<p>We need a Linode account to provision a server, so start by pointing your\nweb browser to <a href=\"https://www.linode.com/\">Linode.com</a>. Their\nlanding page will look something like the following image.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/linode-landing-page.jpg\" class=\"technical-diagram img-rounded\" width=\"100%\"></p>\n<p><a href=\"https://manager.linode.com/session/signup\">Sign up</a> for an account.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/linode-sign-up.png\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>You should receive an email for account confirmation. Fill out the\nappropriate information and add initial credit to your account. If you\nwant to enter a referral code, mine is\n<code>bfeecaf55a83cd3dd224a5f2a3a001fdf95d4c3d</code>. Your account will go for\na quick review to ensure you are not a malicious spam bot and then\nyour account will be fully activated.</p>\n<p>Once your account is activated refresh the page. The new page will allow\nyou to add a Linode instance.</p>\n<p>Provisioning a server for $5 or $10/month (depending on\nhow much memory and storage you want) is more than enough for small-scale\nPython web applications.</p>\n<p>Select the 1024 option and the data center location of your choice. I chose\nNewark, NJ because I grew up in northern NJ and otherwise the location is not\nimportant for my deployment. If your most of your users are located in a\nspecific region then you should select the data center location closest to\nthem.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/select-instance.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>Click the \"Add this Linode!\" button and a dashboard will appear that\nshows the Linode is being provisioned.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/dashboard.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>Refresh the page and look for the status to change to \"Brand New.\" Write\ndown or copy the IP address as it will be needed later to SSH into the\nserver, then click on the name of the Linode. A page will appear to\nshow more information about your new virtual private server.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/dashboard-provisioned.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>Click the \"Rebuild\" link.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/rebuild.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>Select Ubuntu 16.04, which is the current Long Term Support (LTS) release\nand has a 5 year support lifecycle. This version will receive security\nupdates until April 2021 as shown on the\n<a href=\"https://www.ubuntu.com/info/release-end-of-life\">Ubuntu wiki page for LTS releases</a>.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/ubuntu-lts-releases.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>Enter a root password. Make sure you type the password in carefully and\nremember it! The password will be needed when you log into the server\nas the root user. The \"Deployment Disk Size\" and \"Swap Disk\" can be left as\ntheir default values.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/deploy-distribution.png\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>When the build process begins Linode will send us back to our server's\ndashboard page. The progress bars will show the status and in a couple of\nminutes the server will be ready to boot up.</p>\n<h2>Boot and Log In</h2>\n<p>Click the \"Boot\" button and the Ubuntu boot process will get started.\nBooting should take less than a minute. Bring up your local command line\nas we will need it to connect to the remote machine.</p>\n<p><img src=\"/img/170920-provision-ubuntu-linode/boot.jpg\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" width=\"100%\"></p>\n<p>SSH into your server with <code>ssh <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"4d3f2222390d\">[email\u00a0protected]</a>{ip.address.here}</code> where\n<code>{ip.address.here}</code> is your server's IP address, which can be found on the\nLinode dashboard. For example, if your new Linode's IP address\nis 66.175.209.129, you'll enter <code>ssh <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"60120f0f142056564e5157554e5250594e515259\">[email\u00a0protected]</a></code>.</p>\n<p>You'll likely receive a prompt like the following warning. This prompt\nstates that you've never connected to this server before and it asks if\nyou are sure that this host's signature matches the server on which you\nintend to connect. Enter <code>yes</code> then enter the root password you created\nduring the earlier Linode server provisioning step.</p>\n<div class=\"highlight\"><pre><span></span>The authenticity of host '66.175.209.192 (66.175.209.192)' can<span class=\"err\">'</span>t be established.\nRSA key fingerprint is <span class=\"m\">51</span>:3c:ba:bc:c3:83:1a:36:b1:2d:e3:f6:6d:f0:11:56.\nAre you sure you want to continue connecting (yes/no)? yes\n</pre></div>\n<p>A message like \"Welcome to Ubuntu 16.04.3 LTS\" will appear followed by a\nprompt. Now we can enter commands on the remote machine to get the\nserver secured and setup.</p>\n<h2>Next Steps</h2>\n<p>You are all set to start configuring your server. You will want to\nimmediately create\n<a href=\"https://www.fullstackpython.com/blog/ssh-keys-ubuntu-linux.html\">SSH keys</a>\nand disable password logins as well as install tools like\n<a href=\"https://www.fail2ban.org/wiki/index.php/Main_Page\">fail2ban</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>See something wrong in this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170920-provision-ubuntu-16-04-server-linode.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "GitPython and New Git Tutorials", "body": "<div class=\"c9\">\n<p><a href=\"/blog/first-steps-gitpython.html\"><strong>First Steps with GitPython</strong></a>\nis a quick tutorial that shows how to get started using the awesome\n<a href=\"https://gitpython.readthedocs.io/en/stable/\">GitPython</a> library for\nprogrammatically interacting with Git repositories in your Python\napplications. In the spirit of the\n<a href=\"https://github.com/jhund/filterrific/issues/147#issuecomment-341867147\">thank you maintainers</a>\nissue ticket I wrote about last newsletter, I opened a quick\n<a href=\"https://github.com/gitpython-developers/GitPython/issues/709\">\"non-issue\" ticket for the GitPython developers</a>\nto thank them. Give them a thank you +1 if you've used the project and also\nfound it useful.</p>\n<p>The <a href=\"/git.html\"><strong>Git</strong></a> page on Full Stack\nPython has also just been updated with new resources. A few of my favorite\nnew tutorials list on the <a href=\"/git.html\">Git page</a>\nare:</p>\n<ul>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules\">Flight rules for Git</a></li>\n<li><a href=\"https://philna.sh/blog/2017/01/04/git-back-to-the-future/\">Git back to the future</a></li>\n<li><a href=\"https://jqassistant.org/shadows-of-the-past-analysis-of-git-repositories/\">Shadows Of The Past: Analysis Of Git Repositories</a></li>\n<li><a href=\"https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html\">The anatomy of a Git commit</a></li>\n</ul>\n<p>I also split out the Git page resources into beginner, more advanced, specific\nuse case and workflow sections so it's easier to parse based on whether you're\na Git veteran or still up-and-coming in that area of your development skills.</p>\n<p>Got questions or comments about\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\nto let me know how to improve the site\nas I continue to\n<a href=\"/table-of-contents.html\">fill in the table of contents</a>\nwith <a href=\"/change-log.html\">new pages</a>\nand\n<a href=\"/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "How to Monitor Python Web Applications", "body": "<div class=\"c9\">\n<p>A quick way to check for errors and issues in your operational\n<a href=\"/web-development.html\">Python web application</a> is to drop-in one of many\nawesome hosted <a href=\"/monitoring.html\">monitoring</a> tools.</p>\n<p>Let's learn to quickly add <a href=\"https://rollbar.com\">Rollbar monitoring</a>\nto a web app to visualize when our application is running properly and\nwhen it has issues. This tutorial will use <a href=\"/bottle.html\">Bottle</a> as the\nexample <a href=\"/web-frameworks.html\">web framework</a> along with Rollbar as the\nmonitoring service but you can also check out the list of other tools\non the <a href=\"/monitoring.html\">monitoring page</a>.</p>\n<h2>Our Tools</h2>\n<p>We can use either <a href=\"/python-2-or-3.html\">Python 2 or 3</a> to build this\ntutorial, but Python 3 is <em>strongly</em> recommended for all new applications.\n<a href=\"https://www.python.org/downloads/release/python-362/\">Python 3.6.2</a>\nwas used to build this tutorial. We will also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a> throughout\nthe post: </p>\n<ul>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come installed\nwith Python 3, to install and isolate the Bottle and Rollbar libraries\nfrom your other projects</li>\n<li><a href=\"/bottle.html\">Bottle</a> web framework,\n<a href=\"https://bottlepy.org/docs/0.12/\">version 0.12.13</a></li>\n<li><a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">pyrollbar</a> monitoring\ninstrumentation library,\n<a href=\"https://github.com/rollbar/pyrollbar/tree/v0.13.13\">version 0.13.13</a>\nin Bottle applications so pyrollbar can report on all errors</li>\n<li>A <a href=\"https://rollbar.com/\">free Rollbar account</a> where we will send error\ndata and view it when it is captured</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Bottle on Ubuntu 16.04 LTS</a>.</p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">monitor-python-bottle-apps directory of the blog-code-examples repository</a>.\nUse and abuse the source code as you desire for your own applications.</p>\n<h2>Installing Dependencies</h2>\n<p>Create a new virtual environment for this project using the following\ncommand. I recommend keeping a separate directory for virtualenvs under\n<code>~/Envs/</code> so you will know where all your project virtualenvs are located.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv monitorpython\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source monitorpython/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/activate-python-virtualenv.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Activating our Python virtual environment on the command line.\"></p>\n<p>Remember that you need to activate your virtualenv in every new terminal\nwindow where you want to use the virtualenv to run the project.</p>\n<p>We can now install Bottle and Rollbar into the activated\nvirtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install bottle==0.12.13 rollbar==0.13.13\n</pre></div>\n<p>Look for output like the following to confirm the\ndependencies installed correctly.</p>\n<div class=\"highlight\"><pre><span></span>Installing collected packages: bottle, urllib3, certifi, idna, chardet, requests, six, rollbar\n  Running setup.py install for bottle ... done\n    Running setup.py install for rollbar ... done\n    Successfully installed bottle-0.12.13 certifi-2017.7.27.1 chardet-3.0.4 idna-2.6 requests-2.18.4 rollbar-0.13.13 six-1.11.0 urllib3-1.22\n</pre></div>\n<p>We have our dependencies ready to go so now we can build\nour Python web application.</p>\n<h2>Our Python Web App</h2>\n<p>Create a folder for your project named <code>monitor-python-apps</code>. <code>cd</code> into\nthe folder and then create a file named <code>app.py</code> with the following\ncode.</p>\n<div class=\"highlight\"><pre><span></span>import bottle\nimport os\nimport re\nfrom bottle import route, template\n\n\nTEMPLATE_STRING = \"\"\"\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Full Stack Python Web App&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;h1&gt;{{ h1 }}&lt;/h1&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nMIN_MSG_LENGTH = 2\n\n\n@route(\"/&lt;msg&gt;/\")\ndef show_message(msg):\n    \"\"\"Display a message if the msg value is greater than 2 characters\n    in the path.\n    \"\"\"\n    valid_length = len(msg) &gt;= MIN_MSG_LENGTH\n    valid_name = re.match(<span class=\"s1\">'^[a-z\\-]+$'</span>, msg.lower()) is not None\n    if valid_length and valid_name:\n        return template(TEMPLATE_STRING, h1=msg)\n    else:\n        error_msg = \"Sorry, only alpha characters and hyphens allowed.\"\n        raise Exception(error_msg)\n\n\nif __name__ == \"__main__\":\n    bottle.run(host='localhost', port=8080)\n</pre></div>\n<p>The above application code has a few standard Bottle imports so we can\ncreate a Bottle web app and handle URL routes. </p>\n<p>We have a single function, <code>show_message</code>, that handles a single Bottle\nURL route. <code>show_message</code> checks if the URL path contains only alphabetic\ncharacters and hyphens for a message to display. If the message passes\nthe conditions then a page is rendered with that message\nin an <code>h1</code> element. If <code>msg</code> does not pass the condition test then an\nexception is thrown that only alpha characters and hyphens are allowed.</p>\n<p>Save <code>app.py</code> and we can run our code. Execute <code>app.py</code> using the <code>python</code>\ncommand as follows (make sure your virtualenv is still activated in the\nterminal where you are running this command):</p>\n<div class=\"highlight\"><pre><span></span>python app.py\n</pre></div>\n<p>The Bottle development server should start up and display a few lines\nof output.</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/run-bottle-app.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Run the local Bottle development server.\"></p>\n<p>Try to access a URL with a path that contains only alphabetic characters and\nhyphens, such as\n<a href=\"http://localhost:8080/hello-world/\">localhost:8080/hello-world/</a>.</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/localhost-hello-world.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Testing at /hello-world/ returns an HTTP 200 response.\"></p>\n<p>The application was successful in displaying \"hello-world\" but what if we\ntry a URL that contains numbers in addition to the alphabetic characters,\nsuch as\n<a href=\"http://localhost:8080/fullstackpython/\">localhost:8080/fullstackpython123/</a>?</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/localhost-500.png\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"We receive a 500 error when numbers are added to the URL.\"></p>\n<p>An HTTP 500 error. That is surely not a good user experience.</p>\n<p>The 500 error is obvious to us right now because we are\ntesting the application locally during development. However, what happens\nwhen the app is deployed and a user gets the error in their own web\nbrowser? They will likely quit out of frustration and you will never\nknow what happened unless you add some error tracking and application\nmonitoring.</p>\n<p>Time to modify our code to add Rollbar to report errors that occur.</p>\n<h2>Monitoring for Errors with Rollbar</h2>\n<p>Go to the <a href=\"https://rollbar.com/\">Rollbar homepage in your browser</a>\nto add their tool to our Bottle app.</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/rollbar-homepage.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"The Rollbar homepage in the Chrome web browser.\"></p>\n<p>Click the \"Sign Up\" button in the upper right-hand corner. Enter your\nemail address, a username and the password you want on the sign up page.</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/sign-up-page.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Enter your account information on the sign up page.\"></p>\n<p>After the sign up page you will see the onboarding flow where you can\nenter a project name and select a programming language. For the project\nname type in \"Full Stack Python\" then select that you are monitoring a\nPython app.</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/create-new-project.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Create a new project named 'Battlegrounds' and select Python as the programming language.\"></p>\n<p>Press the \"Continue\" button at the bottom to move along. The next\nscreen shows us a few instructions to add monitoring to a Python\napplication.</p>\n<p><img src=\"/img/170723-monitor-flask-apps/project-setup.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Set up your project using your server-side access token.\"></p>\n<p>Let's change our Bottle code to let Rollbar collect and aggregate the\nerrors that pop up in our application. Modify <code>app.py</code> to include the\nfollowing highlighted lines. </p>\n<div class=\"highlight\"><pre><span></span>import bottle\nimport os\nimport re\nfrom bottle import route, template\n<span class=\"highlight\">from rollbar.contrib.bottle import RollbarBottleReporter</span>\n\n\nTEMPLATE_STRING = \"\"\"\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Full Stack Python Web App&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;h1&gt;{{ h1 }}&lt;/h1&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nMIN_MSG_LENGTH = 2\n<span class=\"highlight\">ROLLBAR_SECRET = os.environ.get(\"ROLLBAR_SECRET\")</span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\">rb_monitor = RollbarBottleReporter(access_token=ROLLBAR_SECRET,</span>\n<span class=\"highlight\">                                   environment='production')</span>\n<span class=\"highlight\">bottle.install(rb_monitor)</span>\n\n\n@route(\"/&lt;msg&gt;/\")\ndef show_message(msg):\n    \"\"\"Display a message if the msg value is greater than 2 characters\n    in the path.\n    \"\"\"\n    valid_length = len(msg) &gt;= MIN_MSG_LENGTH\n    valid_name = re.match(<span class=\"s1\">'^[a-z\\-]+$'</span>, msg.lower()) is not None\n    if valid_length and valid_name:\n        return template(TEMPLATE_STRING, h1=msg)\n    else:\n        error_msg = \"Sorry, only alpha characters and hyphens allowed.\"\n        raise Exception(error_msg)\n\n\nif __name__ == \"__main__\":\n    bottle.run(host='localhost', port=8080)\n</pre></div>\n<p>A new import <code>from rollbar.contrib.bottle import RollbarBottleReporter</code>\nis our conduit between the application and the Rollbar server. <code>rollbar</code>\nis the library we installed earlier. </p>\n<p>The <code>ROLLBAR_SECRET</code> token needs to be set in an environment variable.\nSave and quit <code>app.py</code>. Run the following command in the terminal where your\nvirtualenv is activated:</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">ROLLBAR_SECRET</span>='token here'\n</pre></div>\n<p>If you are uncertain about what your secret token is, it can be found on\nthe Rollbar onboarding screen. </p>\n<p>Note that I typically store all my environment variables in a <code>.env</code>\nfile and use a\n<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/monitor-flask-apps/template.env\">template.env</a>\nas a template for what I should fill into <code>.env</code>. <code>.env</code> can be invoked\nfrom the terminal using the <code>. .env</code> command. Make sure to <em>never</em> commit\nyour secret tokens to a source control repository though, especially if\nthe repository is public!</p>\n<p>After exporting your <code>ROLLBAR_SECRET</code> key as an environment variable\nwe can test that Rollbar is working as we run our application. Run it\nnow using <code>python</code>:</p>\n<div class=\"highlight\"><pre><span></span>python app.py\n</pre></div>\n<p>Back in your web browser press the \"Done! Go to Dashboard\" button.</p>\n<p>If an event hasn't been reported yet we'll see a waiting screen like this\none:</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/waiting.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Waiting for data on the Rollbar dashboard.\"></p>\n<p>Make sure your Bottle development server is running and try to go to\n<a href=\"http://localhost:8080/fullstackpython123/\">localhost:8080/fullstackpython123/</a>.\nA 500 server error is immediately reported on the dashboard:</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/exception-reported.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Viewing the 500 errors reported in the Rollbar dashboard.\"></p>\n<p>We even get an email with the error (which can also be turned off if you\ndon't want emails for every error):</p>\n<p><img src=\"/img/170926-monitor-python-web-apps/email-error-report.jpg\" width=\"100%\" class=\"technical-diagram img-rounded\" style=\"border:1px solid #ccc\" alt=\"Email with the Rollbar error report.\"></p>\n<p>Nice, with just a few lines of code we now have our Bottle app reporting\nerrors for any user that's working with our application.</p>\n<h2>What now?</h2>\n<p>We just learned how to catch and handle errors with Rollbar as a hosted\nmonitoring platform in a simple example\n<a href=\"/bottle.html\">Bottle application</a>. Next you will want to\nadd <a href=\"/monitoring.html\">monitoring</a> to more complicated web apps, including\nones that use <a href=\"/django.html\">Django</a> or <a href=\"/flask.html\">Flask</a>. You can also\ntry Rollbar's more advanced features to:</p>\n<ul>\n<li><a href=\"https://rollbar.com/docs/custom-grouping/\">set up rules to group errors</a></li>\n<li><a href=\"https://rollbar.com/docs/deploy-tracking/\">debug and track deployment issues</a></li>\n<li><a href=\"https://rollbar.com/docs/person-tracking/\">sort and view errors by user</a></li>\n</ul>\n<p>There is plenty more to learn about in the areas of\n<a href=\"/web-development.html\">web development</a> and\n<a href=\"/deployments.html\">deployments</a> so keep learning by reading\nabout <a href=\"/web-frameworks.html\">web frameworks</a>. You can also learn more\nabout integrating Rollbar with Python applications via\n<a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">their Python documentation</a>.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see a typo, syntax issue or just something that's confusing in this\nblog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170926-monitor-python-web-apps.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">file an issue ticket on GitHub</a>.</p>\n</div>"},
{"title": "DevOps, Thank You Maintainers and Contributing to Open Source", "body": "<div class=\"c9\">\n<p><a href=\"/blog/devops-continuous-delivery-you.html\"><strong>DevOps, Continuous Delivery... and You</strong></a>\nis a blog post with the slides and notes based on a class I taught at\nthe <a href=\"http://www.virginia.edu/\">University of Virginia</a> this past week. The\ntalk is relevant as a brief introduction to\n<a href=\"/devops.html\">DevOps</a> and Continuous Delivery,\nespecially for junior developers and less-technical managers of software\nteams. I'm experimenting with the \"talk as blog post\" style so let me know\nvia email or a tweet if you enjoy it and would want to see future technical\ntalks in that format.</p>\n<p>Speaking of feedback on projects,\n<a href=\"https://github.com/jhund/filterrific/issues/147#issuecomment-341867147\">this GitHub issue thread named \"<strong>thank you</strong>\"</a>\nis incredible to read. The issue ticket blew up on the front page of Hacker\nNews as an example of how powerful genuine positive comments can be for\nproject maintainers.</p>\n<p><a href=\"https://talkpython.fm/episodes/show/132/contributing-to-open-source\"><strong>Contributing to open source</strong></a>\nis a recent <a href=\"https://talkpython.fm/\">Talk Python to Me</a> podcast episode in\nthe same vein as thanking your maintainer. Working on open source projects\nwith your own contributions to documentation or simple bug fixes can be a\ngreat way to become a better programmer. I particularly enjoyed the\nrecommendations of the panel to cut your teeth on smaller open source projects\nrather than trying to jump into a massive codebase like\n<a href=\"https://github.com/django/django\">Django</a> or the\n<a href=\"https://github.com/python/cpython\">CPython</a> implementation. Take a listen\nto that podcast episode if you are new to open source or have been wondering\nhow to get involved.</p>\n<p>As always, send me an email or <a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\nto let me know how to improve\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>\nas I continue to\n<a href=\"/table-of-contents.html\">fill in the table of contents</a>\nwith <a href=\"/change-log.html\">new pages</a>\nand\n<a href=\"/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "5 Years of Full Stack Python", "body": "<div class=\"c9\">\n<p><strong><a href=\"https://www.fullstackpython.com/\">Full Stack Python</a></strong> began five years\nago today, on December 23, 2012, with\n<a href=\"https://github.com/mattmakai/fullstackpython.com/commit/69f5f466196f572aab187504d52bc368cde840cd\">Git commit 69f5f46</a>. </p>\n<p>I originally built the site to help out a group of junior developers that\nkept asking me similar Python web development questions via email. It seemed\nlike the answers would be useful to more people if I put them in a\npublicly-accessible location. One day over lunch with a friend before I\nstarted writing I sketched out some of my vague ideas on a napkin: </p>\n<p><img src=\"https://www.fullstackpython.com/img/visuals/fsp-napkin.jpg\" width=\"100%\" class=\"rnd\" alt=\"Original Full Stack Python concept drawing.\"></p>\n<p>The site started as a single page\n<a href=\"https://www.fullstackpython.com/static-site-generator.html\">static website</a>\nbut eventually was split into topic-specific pages such as:</p>\n<ul>\n<li><a href=\"https://www.fullstackpython.com/deployments.html\">deployments</a></li>\n<li><a href=\"https://www.fullstackpython.com/servers.html\">servers</a></li>\n<li><a href=\"https://www.fullstackpython.com/web-frameworks.html\">web frameworks</a></li>\n<li><a href=\"https://www.fullstackpython.com/wsgi-servers.html\">WSGI servers</a></li>\n<li><a href=\"https://www.fullstackpython.com/source-control.html\">source control</a></li>\n<li><a href=\"https://www.fullstackpython.com/operating-systems.html\">operating systems</a></li>\n<li><a href=\"https://www.fullstackpython.com/web-servers.html\">web servers</a></li>\n</ul>\n<p>Most pages were on deployment and web framework topics. I have made a\nconcerted effort to write more about\n<a href=\"https://www.fullstackpython.com/data.html\">data</a> and\n<a href=\"https://www.fullstackpython.com/development-environments.html\">development environment</a>\nsubjects as I continue to learn and grow my own software development skills.\nIn some ways Full Stack Python's evolution represents my own growth as a\nprogrammer.</p>\n<p>The site now has over 120,000 words and 150+ pages, split between topics\npages and <a href=\"https://www.fullstackpython.com/blog.html\">tutorial blog posts</a>.\nI've also given a few technical talks on many of these topics, such as\n<a href=\"https://www.youtube.com/watch?v=s6NaOKD40rY\">Full Stack Python</a> at\nEuroPython 2014 and\n<a href=\"https://www.youtube.com/watch?v=L5YQbNrFfyw\">WebSockets in Python</a> at\nthe San Francisco Python meetup. With so much content on the site, it's time\nto revamp many of the original pages to ensure they are still accurate and\ncontain solid resources that explain those subjects. It can be sad to see so\nmany awesome blog posts I used to reference that have succumbed to link rot.\nMaintenance takes up an increasing amount of time spent working on the site\nso please submit\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">issue tickets</a>\nwhenever you see a 404 or a link that's not the original correct resource.</p>\n<p>Full Stack Python has now been read by over 2.5 million developers, but\nit took a long time to get to that milestone. In fact there were only a few\nhundred readers within the first year. Over time with daily updates I have\nbeen fortunate to grow the readership to around 125,000 developers per month.</p>\n<p><img src=\"https://www.fullstackpython.com/img/visuals/traffic.png\" width=\"100%\" class=\"rnd\" alt=\"Full Stack Python traffic growth via Google Analytics.\"></p>\n<p>Watching the numbers go up has been fun but the best part is receiving\n\"thank you\" emails and tweets, as well as talking to readers in person at\nPyCon. Keep those emails coming as they keep me motivated to continue writing!\nIf you'll be at PyCon in April, I'll definitely be there at the\n<a href=\"https://www.twilio.com/\">Twilio</a> booth or around the community\nbooths where <a href=\"https://talkpython.fm/\">Michael Kennedy of Talk Python to Me</a>\nand other Python community folks such as <a href=\"https://dbader.org/\">Dan Bader</a>,\n<a href=\"https://www.pyimagesearch.com/\">Adrian Rosebrock of PyImageSearch</a>,\n<a href=\"https://pybit.es/\">Bob Belderbos of PyBites</a> and the\n<a href=\"https://realpython.com\">Real Python</a> guys will also be hanging out.</p>\n<p>It's been a real pleasure working on Full Stack Python over the past five\nyears and I'm really excited for what's coming for the site in the next\nfive years. The\n<a href=\"https://www.fullstackpython.com/change-log.html\">change log page</a> contains\na complete list of major modifications and\n<a href=\"https://www.fullstackpython.com/future-directions.html\">future directions</a>\nhas some insight into my thought process for creating additional content.</p>\n<p>Got questions or comments about\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\nto let me know how to improve the site\nas I continue to\n<a href=\"https://www.fullstackpython.com/table-of-contents.html\">fill in the table of contents</a>\nwith <a href=\"https://www.fullstackpython.com/change-log.html\">new pages</a>\nand\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "PyCon US 2018 CFP, Python Bytes and Pelican", "body": "<div class=\"c9\">\n<p><a href=\"https://us.pycon.org/2018/\"><strong>PyCon US 2018</strong></a> is coming up in Cleveland, Ohio\non May 9th-17th. The\n<a href=\"https://us.pycon.org/2018/speaking/talks/\">call for proposals (CFP)</a>\nwent live in the past few days so now is the time to sharpen your keyboards\nand get yourself into the proposal writing zone. </p>\n<p>When you start working on your proposal, here are some awesome resources\non building a great tech talk, public speaking and describing your session\nby writing a solid proposal:</p>\n<ol>\n<li><a href=\"https://emptysqua.re/blog/seven-tips-for-pycon/\">Seven tips to get into PyCon</a></li>\n<li><a href=\"http://akaptur.com/blog/2014/09/11/rejected-pycon-proposals/\">Rejected PyCon proposals</a></li>\n<li><a href=\"https://hynek.me/articles/speaking/\">On conference speaking</a></li>\n<li><a href=\"http://www.oreilly.com/conferences/sample_proposals.html\">Example conference proposals</a></li>\n</ol>\n<p>Looking forward to seeing you all at PyCon US in Cleveland early next year!</p>\n<p>Speaking of folks who will definitely be at PyCon,\n<a href=\"https://pythonbytes.fm/\"><strong>Python Bytes</strong></a> is an awesome weekly Python\npodcast by <a href=\"https://twitter.com/mkennedy\">Michael Kennedy</a> of\n<a href=\"https://talkpython.fm/\">Talk Python to Me</a> and\n<a href=\"https://twitter.com/brianokken\">Brian Okken</a> of\n<a href=\"http://testandcode.com/\">Test and Code</a>. Michael and Brian teamed up to\nhost and produce Python Bytes. I really enjoy listening to the rapid-fire\ndiscussion of several programming topics within a single podcast. </p>\n<p>Michael and Brian were kind enough to invite me on as a co-host for the\n<a href=\"https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python\">38th episode \"Hacking Classic Nintendo Games with Python\"</a>\nwhile Michael was on vacation.\nThe <a href=\"https://pythonbytes.fm/episodes/show/39/the-new-pypi\">following episode \"The new PyPI\"</a>\nalso had a great discussion of the\n<a href=\"/object-relational-mappers-orms.html\">Object-Relational Mappers (ORMs) page on Full Stack Python</a>.</p>\n<p>One of the projects I talked about on the Python Bytes podcast episode that\nI guest hosted is <a href=\"http://docs.getpelican.com/en/stable/\"><strong>Pelican</strong></a>, the\n<a href=\"/static-site-generator.html\">static site generator</a>\nthat turns <a href=\"/markdown.html\">Markdown</a> and some\n<a href=\"/jinja2.html\">Jinja templates</a> into the\nFull Stack Python site. Here are some additional tutorials and resources\nto get started using Pelican if you've been meaning to build a static site\nyourself:</p>\n<ol>\n<li><a href=\"/blog/generating-static-websites-pelican-jinja2-markdown.html\">How to Create Your First Static Site with Pelican and Jinja2</a></li>\n<li><a href=\"/pelican.html\">An overview of the Pelican static site generator</a></li>\n</ol>\n<p>One last bit: <a href=\"https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business\">Python for Entrepreneurs</a>\nis now fully released with all 20 hours of content. Got non-developer\nfriends who wants you to build them an app? Send them the\n<a href=\"https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business\">Python for Entrepreneurs course</a>\nso they can stop bugging you and build it themselves :)</p>\n</div>"},
{"title": "Monitoring Django Projects with Rollbar", "body": "<div class=\"c9\">\n<p>One fast way to scan for exceptions and errors in your\n<a href=\"/django.html\">Django</a> web application projects is to add a few lines of\ncode to include a hosted <a href=\"/monitoring.html\">monitoring</a> tool.</p>\n<p>In this tutorial we will learn to add the\n<a href=\"https://rollbar.com\">Rollbar monitoring service</a>\nto a web app to visualize any issues produced by our web app.\nThis tutorial will use <a href=\"/django.html\">Django</a> as the\n<a href=\"/web-frameworks.html\">web framework</a> to build the web application but\nthere are also tutorials for\nthe <a href=\"/blog/hosted-monitoring-flask-web-apps.html\">Flask</a> and\n<a href=\"/blog/monitor-python-web-applications.html\">Bottle</a> frameworks as well.\nYou can also check out a list of other hosted and open source tools on the\n<a href=\"/monitoring.html\">monitoring</a> page.</p>\n<h2>Our Tools</h2>\n<p><a href=\"/python-2-or-3.html\">Python 3</a> is strongly recommended for this tutorial\nbecause Python 2 will no longer be supported starting January 1, 2020.\n<a href=\"https://www.python.org/downloads/release/python-364/\">Python 3.6.4</a> to\nwas used to build this tutorial. We will also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a> to build\nour application:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> web framework,\n<a href=\"https://docs.djangoproject.com/en/2.0/\">version 2.0.4</a></li>\n<li><a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">rollbar</a> monitoring\ninstrumentation library,\n<a href=\"https://github.com/rollbar/pyrollbar/tree/v0.13.18\">version 0.13.18</a>,\nto report exceptions and errors</li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come installed\nwith Python 3, to install and isolate these Django and Rollbar libraries\nfrom your other applications</li>\n<li>A <a href=\"https://rollbar.com/\">free Rollbar account</a> where we will send error\ndata and view it when it is captured</li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Django on Ubuntu 16.04 LTS</a>.</p>\n<p>All code in this blog post is available open source on GitHub under the\nMIT license within the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">monitor-python-django-apps directory of the blog-code-examples repository</a>.\nUse and modify the code however you like for your own applications.</p>\n<h2>Installing Dependencies</h2>\n<p>Start the project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend keeping a separate directory\nsuch as <code>~/venvs/</code> so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv monitordjango\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source monitordjango/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/180202-monitor-django/activate-virtualenv.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Activate the virtualenv on the command line.\"></p>\n<p>Remember that you need to activate your virtualenv in every new terminal\nwindow where you want to use the virtualenv to run the project.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/2.0.4\">Django</a>\nand <a href=\"https://pypi.org/project/rollbar\">Rollbar</a> packages into the\nactivated, empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==2.0.4 rollbar==0.13.18\n</pre></div>\n<p>Look for output like the following to confirm the\ndependencies installed correctly.</p>\n<div class=\"highlight\"><pre><span></span>Collecting certifi&gt;=2017.4.17 (from requests&gt;=0.12.1-&gt;rollbar==0.13.18)\n  Downloading certifi-2018.1.18-py2.py3-none-any.whl (151kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 153kB 767kB/s \nCollecting urllib3&lt;1.23,&gt;=1.21.1 (from requests&gt;=0.12.1-&gt;rollbar==0.13.18)\n  Using cached urllib3-1.22-py2.py3-none-any.whl\nCollecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests&gt;=0.12.1-&gt;rollbar==0.13.18)\n  Using cached chardet-3.0.4-py2.py3-none-any.whl\nCollecting idna&lt;2.7,&gt;=2.5 (from requests&gt;=0.12.1-&gt;rollbar==0.13.18)\n  Using cached idna-2.6-py2.py3-none-any.whl\nInstalling collected packages: pytz, django, certifi, urllib3, chardet, idna, requests, six, rollbar\n  Running setup.py install for rollbar ... done\nSuccessfully installed certifi-2018.1.18 chardet-3.0.4 django-2.0.4 idna-2.6 pytz-2018.3 requests-2.18.4 rollbar-0.13.18 six-1.11.0 urllib3-1.22\n</pre></div>\n<p>We have our dependencies ready to go so now we can write the code for\nour Django project.</p>\n<h2>Our Django Web App</h2>\n<p><a href=\"/django.html\">Django</a> makes it easy to generate the boilerplate code\nfor new projects and apps using the <code>django-admin.py</code> commands. Go to the\ndirectory where you typically store your coding projects. For example, on\nmy Mac I use <code>/Users/matt/devel/py/</code>. Then run the following command to\nstart a Django project named <code>djmonitor</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djmonitor\n</pre></div>\n<p>The command will create a directory named <code>djmonitor</code> with several\nsubdirectories that you should be familiar with when you've previously\nworked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djmonitor\n</pre></div>\n<p>Start a new Django app for our example code.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py startapp billions\n</pre></div>\n<p>Django will create a new folder named <code>billions</code> for our project.\nLet's make sure our Django URLS work properly before before we write\nthe code for the app.</p>\n<p>Now open <code>djmonitor/djmonitor/urls.py</code> and add the highlighted lines so that URLs\nwith the path <code>/billions/</code> will be routed to the app we are working on.</p>\n<div class=\"highlight\"><pre><span></span>\"\"\" (comments section)\n\"\"\"\n<span class=\"highlight\">from django.conf.urls import include</span>\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n<span class=\"highlight\">    path('billions/', include('billions.urls')),</span>\n    path('admin/', admin.site.urls),\n]\n</pre></div>\n<p>Save <code>djmonitor/djmonitor/urls.py</code> and open <code>djmonitor/djmonitor/settings.py</code>.\nAdd the <code>billions</code> app to <code>settings.py</code> by inserting the highlighted line,\nwhich will become line number 40 after insertion:</p>\n<div class=\"highlight\"><pre><span></span># Application definition\n\nINSTALLED_APPS = [ \n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'billions',</span>\n]\n</pre></div>\n<p>Save and close <code>settings.py</code>.</p>\n<p><strong>Reminder</strong>: make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the\n<a href=\"https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/\">Django production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Next change into the <code>djmonitor/billions</code> directory. Create a new file named\n<code>urls.py</code> that will be specific to the routes for the <code>billions</code> app within\nthe <code>djmonitor</code> project.</p>\n<p>Add the following lines to the currently-blank <code>djmonitor/billions/urls.py</code>\nfile.</p>\n<div class=\"highlight\"><pre><span></span>from django.conf.urls import url                                                                                                                              \nfrom . import views\n\nurlpatterns = [ \n    url(r'(?P&lt;slug&gt;[\\wa-z-]+)', views.they, name=\"they\"),\n]\n</pre></div>\n<p>Save <code>djmonitor/billions/urls.py</code>. One more file before we can test that\nour simple Django app works. Open <code>djmonitor/billions/views.py</code>.</p>\n<div class=\"highlight\"><pre><span></span>from django.core.exceptions import PermissionDenied\nfrom django.shortcuts import render\n\n\ndef they(request, slug):\n    if slug and slug == \"are\":\n        return render(request, 'billions.html', {})\n    else:\n        raise PermissionDenied(\"Hmm, can't find what you're looking for.\")\n</pre></div>\n<p>Create a directory for your template files named <code>templates</code> under\nthe <code>djmonitor/billions</code> app directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir templates\n</pre></div>\n<p>Within <code>templates</code> create a new file named <code>billions.html</code> that contains\nthe following <a href=\"/django-templates.html\">Django template</a> markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;They... are BILLIONS!<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;a <span class=\"na\">href</span>=<span class=\"s\">\"http://store.steampowered.com/app/644930/They_Are_Billions/\"</span>&gt;They Are Billions<span class=\"p\">&lt;/</span>a<span class=\"p\">&gt;&lt;/</span>h1&gt;\n    &lt;img <span class=\"na\">src</span>=<span class=\"s\">\"https://media.giphy.com/media/2jUHXTGhGo156/giphy.gif\"</span>&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>Alright, all of our files are in place so we can test the application.\nWithin the base directory of your project run the Django development\nserver:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server will start up with no issues other than an\nunapplied migrations warning.</p>\n<div class=\"highlight\"><pre><span></span>(monitordjango) $ python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\n\nApril 08, 2018 - 19:06:44\nDjango version 2.0.4, using settings 'djmonitor.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Only the <code>/billions/</code> route will successfully hit our <code>billions</code> app. Try\nto access \"http://localhost:8000/billions/are/\". We should see our template\nrender with the gif:</p>\n<p><img src=\"/img/180202-monitor-django/localhost-dev-server.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Testing local development server at /billions/are/.\"></p>\n<p>Cool, our application successfully rendered a super-simple HTML page\nwith a GIF of one of my favorite computer games. What if we try another\npath under <code>/billions/</code> such as \"http://localhost:8000/billions/arenot/\"?</p>\n<p><img src=\"/img/180202-monitor-django/arenot-403-forbidden.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"403 Forbidden error with any path under /billions/ other than /billions/are/.\"></p>\n<p>Our 403 Forbidden is raised, which is what we expected based on our code.\nThat is a somewhat contrived block of code but let's see how we can\ncatch and report this type of error without changing our <code>views.py</code>\ncode at all. This approach will be much easier on us when modifying an\nexisting application than having to refactor the code to report on\nthese types of errors, if we even know where they exist.</p>\n<h2>Monitoring with Rollbar</h2>\n<p>Go to the <a href=\"https://rollbar.com/\">Rollbar homepage in your browser</a>\nto add their tool to our Django app.</p>\n<p><img src=\"/img/180202-monitor-django/rollbar-home.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"rollbar.com in Chrome.\"></p>\n<p>Click the \"Sign Up\" button in the upper right-hand corner. Enter your\nemail address, a username and the password you want on the sign up page.</p>\n<p><img src=\"/img/180202-monitor-django/sign-up-rollbar.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sign up for Rollbar.\"></p>\n<p>After the sign up page you will see the onboarding flow where you can\nenter a project name and select a programming language. For the project\nname type in \"Full Stack Python\" (or whatever project name you are\nworking on) then select that you are monitoring a Python-based application.</p>\n<p><img src=\"/img/180202-monitor-django/create-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create a project named 'Full Stack Python' and select Python for programming language.\"></p>\n<p>Press the \"Continue\" button at the bottom to move along. The next\nscreen shows us a few instructions on how to add monitoring.</p>\n<p><img src=\"/img/180202-monitor-django/configure-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Configure project using your server-side access token.\"></p>\n<p>Let's change our Django project code to let Rollbar collect and aggregate the\nerrors that pop up in our application. </p>\n<p>Re-open <code>djmonitor/djmonitor/settings.py</code> and look for the <code>MIDDLEWARE</code>\nlist. Add <code>rollbar.contrib.django.middleware.RollbarNotifierMiddleware</code>\nas the last item:</p>\n<div class=\"highlight\"><pre><span></span>MIDDLEWARE = [ \n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n<span class=\"highlight\">    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',</span>\n]\n</pre></div>\n<p>Do not close <code>settings.py</code> just yet. Next add the following lines\nto the bottom of the file. Change the <code>access_token</code> value to your\nRollbar server side access token and <code>root</code> to the directory where\nyou are developing your project.</p>\n<div class=\"highlight\"><pre><span></span>ROLLBAR = {\n    'access_token': 'access token from dashboard',\n    'environment': 'development' if DEBUG else 'production',\n    'branch': 'master',\n    'root': '/Users/matt/devel/py/blog-code-examples/monitor-django-apps/djmonitor',\n    'patch_debugview': False,\n}\n</pre></div>\n<p>If you are uncertain about what your secret token is, it can be found on\nthe Rollbar onboarding screen or \"Settings\" -&gt; \"Access Tokens\" within\n<a href=\"https://rollbar.com\">rollbar.com</a>.</p>\n<p>Note that I typically store all my environment variables in a <code>.env</code> </p>\n<p>We can test that Rollbar is working as we run our application. Run it\nnow using the development server.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>Back in your web browser press the \"Done! Go to Dashboard\" button.</p>\n<p>If an event hasn't been reported yet we'll see a waiting screen like this\none:</p>\n<p><img src=\"/img/180202-monitor-django/waiting-for-events.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Waiting for events data on the dashboard.\"></p>\n<p>Make sure your Django development still server is running and try to go to\n\"http://localhost:8000/billions/arenot/\". A 403 error is immediately reported\non the dashboard:</p>\n<p><img src=\"/img/180202-monitor-django/forbidden-exception.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"403 Forbidden exceptions on the Rollbar dashboard screen.\"></p>\n<p>We even get an email with the error (which can also be turned off if you\ndon't want emails for every error):</p>\n<p><img src=\"/img/180202-monitor-django/email-report.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Email report on the errors in your Django application.\"></p>\n<p>Alright we now have monitoring and error reporting all configured for our\nDjango application!</p>\n<h2>What now?</h2>\n<p>We learned to catch issues in our Django project using Rollbar and view the\nerrors in Rollbar's interface. Next try out Rollbar's more advanced monitoring\nfeatures such as:</p>\n<ul>\n<li><a href=\"https://rollbar.com/docs/person-tracking/\">sorting errors by user</a></li>\n<li><a href=\"https://rollbar.com/docs/custom-grouping/\">configuring rules on group errors</a></li>\n<li><a href=\"https://rollbar.com/docs/deploy-tracking/\">debugging deployment issues</a></li>\n</ul>\n<p>There is plenty more to learn about in the areas of\n<a href=\"/web-development.html\">web development</a> and\n<a href=\"/deployments.html\">deployments</a> so keep learning by reading\nabout <a href=\"/web-frameworks.html\">web frameworks</a>. You can also learn more\nabout integrating Rollbar with Python applications via\n<a href=\"https://rollbar.com/docs/notifier/pyrollbar/\">their Python documentation</a>.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see a typo, syntax issue or wording that's confusing in this blog\npost? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180202-monitor-django-web-apps.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">file an issue ticket on GitHub</a>.</p>\n</div>"},
{"title": "First Steps with GitPython", "body": "<div class=\"c9\">\n<p><a href=\"http://gitpython.readthedocs.io/\">GitPython</a> is a Python code library\nfor programmatically reading from and writing to <a href=\"/git.html\">Git</a>\n<a href=\"/source-control.html\">source control</a> repositories.</p>\n<p>Let's learn how to use GitPython by quickly installing it and reading from\na local cloned Git repository.</p>\n<h2>Our Tools</h2>\n<p>This tutorial should work with either <a href=\"/python-2-or-3.html\">Python 2.7 or 3</a>,\nbut Python 3, especially 3.6+, is strongly recommended for all new\napplications. I used\n<a href=\"https://www.python.org/downloads/release/python-363/\">Python 3.6.3</a> to\nwrite this post. In addition to Python, throughout this tutorial we\nwill also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a>: </p>\n<ul>\n<li><a href=\"/git.html\">Git</a>,\na <a href=\"/static-site-generator.html\">source (version) control</a> implementation,\n<a href=\"https://github.com/git/git/tree/v2.15.1\">version 2.15.1</a></li>\n<li><a href=\"https://github.com/gitpython-developers/GitPython/tree/2.1.7\">GitPython</a>\nversion <a href=\"https://github.com/gitpython-developers/GitPython/tree/2.1.7\">2.1.7</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come\npackaged with Python 3, to install and isolate the GitPython library\nfrom any of your other Python projects</li>\n</ul>\n<p>Take a look at\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS</a>\nif you need specific instructions to get a base\n<a href=\"/development-environments.html\">Python development environment</a> set up.</p>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/first-steps-gitpython\">first-steps-gitpython directory of the blog-code-examples repository</a>.\nUse and abuse the source code as you like for your own applications.</p>\n<h2>Install GitPython</h2>\n<p>Start by creating a new virtual environment for your project. My virtualenv\nis named <code>testgit</code> but you can name yours whatever matches the project\nyou are creating.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv gitpy\n</pre></div>\n<p>Activate the newly-created virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source gitpy/bin/activate\n</pre></div>\n<p>The virtualenv's name will be prepended to the command prompt after\nactivation.</p>\n<p><img src=\"/img/171129-gitpython/activate-virtualenv.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create and activate the Python virtual environment.\"></p>\n<p>Now that the virutalenv is activated we can use the <code>pip</code> command to install\nGitPython.</p>\n<div class=\"highlight\"><pre><span></span>pip install <span class=\"nv\">gitpython</span>==<span class=\"m\">2</span>.1.7\n</pre></div>\n<p>Run the <code>pip</code> command and after everything is installed you should see output\nsimilar to the following \"Successfully installed\" message.</p>\n<div class=\"highlight\"><pre><span></span>(gitpy) $ pip install <span class=\"nv\">gitpython</span>==<span class=\"m\">2</span>.1.7\nCollecting <span class=\"nv\">gitpython</span>==<span class=\"m\">2</span>.1.7\n  Downloading GitPython-2.1.7-py2.py3-none-any.whl (446kB)\n    <span class=\"m\">100</span>% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 450kB 651kB/s \nCollecting gitdb2&gt;=<span class=\"m\">2</span>.0.0 (from <span class=\"nv\">gitpython</span>==<span class=\"m\">2</span>.1.7)\n  Downloading gitdb2-2.0.3-py2.py3-none-any.whl (63kB)\n    <span class=\"m\">100</span>% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 947kB/s \nCollecting smmap2&gt;=<span class=\"m\">2</span>.0.0 (from gitdb2&gt;=<span class=\"m\">2</span>.0.0-&gt;gitpython==<span class=\"m\">2</span>.1.7)\n  Downloading smmap2-2.0.3-py2.py3-none-any.whl\nInstalling collected packages: smmap2, gitdb2, gitpython\nSuccessfully installed gitdb2-2.0.3 gitpython-2.1.7 smmap2-2.0.3\n</pre></div>\n<p>Next we can start programmatically interacting with Git repositories in our\nPython applications with the GitPython installed.</p>\n<h2>Clone Repository</h2>\n<p>GitPython can work with remote repositories but for simplicity in this\ntutorial we'll use a cloned repository on our local system.</p>\n<p>Clone a repository you want to work with to your local system. If you don't\nhave a specific one in mind use the\n<a href=\"https://github.com/mattmakai/fullstackpython.com\">open source Full Stack Python Git repository</a>\nthat is hosted on GitHub.</p>\n<div class=\"highlight\"><pre><span></span>git clone <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"5d3a34291d3a342935283f733e3230\">[email\u00a0protected]</a>:mattmakai/fullstackpython.com fsp\n</pre></div>\n<p>Take note of the location where you cloned the repository because we need\nthe path to tell GitPython what repository to handle. Change into the\ndirectory for the new Git repository with <code>cd</code> then run the <code>pwd</code> (present\nworking directory) command to get the full path.</p>\n<div class=\"highlight\"><pre><span></span>cd fsp\npwd\n</pre></div>\n<p>You will see some output like <code>/Users/matt/devel/py/fsp</code>. This path is your\nabsolute path to the base of the Git repository.</p>\n<p>Use the <code>export</code> command to set an environment variable for the absolute path\nto the Git repository.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">GIT_REPO_PATH</span>='/Users/matt/devel/py/fsp' # make sure this your own path\n</pre></div>\n<p>Our Git repository and path environment variable are all set so let's write\nthe Python code that uses GitPython.</p>\n<h2>Read Repository and Commit Data</h2>\n<p>Create a new Python file named <code>read_repo.py</code> and open it so we can start\nto code up a simple script.</p>\n<p>Start with a couple of imports and a constant:</p>\n<div class=\"highlight\"><pre><span></span>import os\nfrom git import Repo\n\n\nCOMMITS_TO_PRINT = 5\n</pre></div>\n<p>The <code>os</code> module makes it easy to read environment variables, such as our\n<code>GIT_REPO_PATH</code> variable we set earlier. <code>from git import Repo</code> gives our\napplication access to the GitPython library when we create the <code>Repo</code> object.\n<code>COMMITS_TO_PRINT</code> is a constant that limits the number of lines of output\nbased on the amount of commits we want our script to print information on.\nFull Stack Python has over 2,250 commits so there'd be a whole lot of output\nif we printed every commit.</p>\n<p>Next within our <code>read_repo.py</code> file create a function to print individual\ncommit information:</p>\n<div class=\"highlight\"><pre><span></span>def print_commit(commit):\n    print('----')\n    print(str(commit.hexsha))\n    print(\"<span class=\"se\">\\\"</span>{}<span class=\"se\">\\\"</span> by {} ({})\".format(commit.summary,\n                                     commit.author.name,\n                                     commit.author.email))\n    print(str(commit.authored_datetime))\n    print(str(\"count: {} and size: {}\".format(commit.count(),\n                                              commit.size)))\n</pre></div>\n<p>The <code>print_commit</code> function takes in a GitPython commit object and\nprints the 40-character SHA-1 hash for the commit followed by:</p>\n<ol>\n<li>the commit summary</li>\n<li>author name </li>\n<li>author email</li>\n<li>commit date and time</li>\n<li>count and update size</li>\n</ol>\n<p>Below the <code>print_commit</code> function, create another function named\n<code>print_repository</code> to print details of the <code>Repo</code> object:</p>\n<div class=\"highlight\"><pre><span></span>def print_repository(repo):\n    print('Repo description: {}'.format(repo.description))\n    print('Repo active branch is {}'.format(repo.active_branch))\n    for remote in repo.remotes:\n        print('Remote named \"{}\" with URL \"{}\"'.format(remote, remote.url))\n    print('Last commit for repo is {}.'.format(str(repo.head.commit.hexsha)))\n</pre></div>\n<p><code>print_repository</code> is similar to <code>print_commit</code> but instead prints the\nrepository description, active branch, all remote Git URLs configured\nfor this repository and the latest commit.</p>\n<p>Finally, we need a \"main\" function for when we invoke the script from the\nterminal using the <code>python</code> command. Round out our </p>\n<div class=\"highlight\"><pre><span></span>if __name__ == \"__main__\":\n    repo_path = os.getenv('GIT_REPO_PATH')\n    # Repo object used to programmatically interact with Git repositories\n    repo = Repo(repo_path)\n    # check that the repository loaded correctly\n    if not repo.bare:\n        print('Repo at {} successfully loaded.'.format(repo_path))\n        print_repository(repo)\n        # create list of commits then print some of them to stdout\n        commits = list(repo.iter_commits('master'))[:COMMITS_TO_PRINT]\n        for commit in commits:\n            print_commit(commit)\n            pass\n    else:\n        print('Could not load repository at {} :('.format(repo_path))\n</pre></div>\n<p>The main function handles grabbing the <code>GIT_REPO_PATH</code> environment variable\nand creates a Repo object based on the path if possible.</p>\n<p>If the repository is not empty, which indicates a failure to find the\nrepository, then the <code>print_repository</code> and <code>print_commit</code> functions are\ncalled to show the repository data.</p>\n<p>If you want to copy and paste all of the code found above at once, take a\nlook at the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/first-steps-gitpython/read_repo.py\"><code>read_repo.py</code> file on GitHub</a>.</p>\n<p>Time to test our GitPython-using script. Invoke the <code>read_repo.py</code> file using\nthe following command.</p>\n<div class=\"highlight\"><pre><span></span>(gitpy) $ python read_repo.py\n</pre></div>\n<p>If the virtualenv is activated and the <code>GIT_REPO_PATH</code> environment variable\nis set properly, we should see output similar to the following.</p>\n<div class=\"highlight\"><pre><span></span>Repo at ~/devel/py/fsp/ successfully loaded.\nRepo description: Unnamed repository; edit this file 'description' to name the repository.\nRepo active branch is master\nRemote named \"origin\" with URL \"<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"cfa8a6bb8fa8a6bba7baade1aca0a2\">[email\u00a0protected]</a>:mattmakai/fullstackpython.com\"\nLast commit for repo is 1fa2de70aeb2ea64315f69991ccada51afac1ced.\n----\n1fa2de70aeb2ea64315f69991ccada51afac1ced\n\"update latest blog post with code\" by Matt Makai (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"5934382d2d313c2e773438323830193e34383035773a3634\">[email\u00a0protected]</a>)\n<span class=\"m\">2017</span>-11-30 <span class=\"m\">17</span>:15:14-05:00\ncount: <span class=\"m\">2256</span> and size: <span class=\"m\">254</span>\n----\n1b026e4268d3ee1bd55f1979e9c397ca99bb5864\n\"new blog post, just needs completed code section\" by Matt Makai (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"325f5346465a57451c5f5359535b72555f535b5e1c515d5f\">[email\u00a0protected]</a>)\n<span class=\"m\">2017</span>-11-30 <span class=\"m\">09</span>:00:06-05:00\ncount: <span class=\"m\">2255</span> and size: <span class=\"m\">269</span>\n----\n2136d845de6f332505c3df38efcfd4c7d84a45e2\n\"change previous email newsletters list style\" by Matt Makai (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"6f020e1b1b070a1841020e040e062f08020e0603410c0002\">[email\u00a0protected]</a>)\n<span class=\"m\">2017</span>-11-20 <span class=\"m\">11</span>:44:13-05:00\ncount: <span class=\"m\">2254</span> and size: <span class=\"m\">265</span>\n----\n9df077a50027d9314edba7e4cbff6bb05c433257\n\"ensure picture sizes are reasonable\" by Matt Makai (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"0e636f7a7a666b7920636f656f674e69636f6762206d6163\">[email\u00a0protected]</a>)\n<span class=\"m\">2017</span>-11-14 <span class=\"m\">13</span>:29:39-05:00\ncount: <span class=\"m\">2253</span> and size: <span class=\"m\">256</span>\n----\n3f6458c80b15f58a6e6c85a46d06ade72242c572\n\"add databases logos to relational databases pagem\" by Matt Makai (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"660b0712120e0311480b070d070f26010b070f0a4805090b\">[email\u00a0protected]</a>)\n<span class=\"m\">2017</span>-11-14 <span class=\"m\">13</span>:28:02-05:00\ncount: <span class=\"m\">2252</span> and size: <span class=\"m\">270</span>\n</pre></div>\n<p>The specific commits you see will vary based on the last 5 commits I've\npushed to the GitHub repository, but if you see something like the output\nabove that is a good sign everything worked as expected.</p>\n<h2>What's next?</h2>\n<p>We just cloned a <a href=\"/git.html\">Git</a> repository and used the GitPython\nlibrary to read a slew of data about the repository and all of its commits.</p>\n<p>GitPython can do more than just read data though - it can also create and\nwrite to Git repositories! Take a look at the\n<a href=\"http://gitpython.readthedocs.io/en/stable/tutorial.html#modifying-references\">modifying references</a>\ndocumentation page in the official GitPython tutorial or check back here in\nthe future when I get a chance to write up a more advanced GitPython\nwalkthrough.</p>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. </p>\n<p>See something wrong in this blog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/171129-first-steps-gitpython.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "ReportLab and Future Community Project Launches", "body": "<div class=\"c9\">\n<p>Congratulations to fellow Python developer\n<a href=\"https://github.com/driscollis\">Mike Driscoll</a> for his successful\n<strong><a href=\"https://www.kickstarter.com/projects/34257246/reportlab-pdf-processing-with-python/\">ReportLab: PDF Processing with Python Kickstarter</a></strong>\nthat just concluded with over double his funding goal.</p>\n<p>I was excited to back Mike's project for a couple of reasons. First, I've\nused <a href=\"https://www.reportlab.com/opensource/\">ReportLab</a> on past projects\nand it is a handy library for working with PDFs. Second, it is super useful\nto have entire books written on niche Python code libraries such as ReportLab.</p>\n<p><a href=\"https://www.fullstackpython.com/\">Full Stack Python</a> will gladly back and\nspread the word about other awesome, legitimate Python community projects. Let\nme know via email (<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"e28f8396968a8795cc8f8389838ba2858f838b8ecc818d8f\">[email\u00a0protected]</a> or <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"b4d9d5c0c0d9d5dfd5ddf4d2c1d8d8c7c0d5d7dfd3c1ddd0d1c79ad7dbd9\">[email\u00a0protected]</a>)\nwhen you are getting ready to launch a Python project so I can help give a\nboost.</p>\n<p><a href=\"https://talkpython.fm/\">Michael Kennedy</a> and I know from our\n<a href=\"https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course\">own Kickstarter experience</a>\nhow much work goes into making these ideas come to fruition. It's a big\nconfidence boost to have a community tailwind at your back and I am always\nhappy to be part of that tailwind.</p>\n<p>Got questions or comments about\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\nto let me know how to improve the site\nas I continue to\n<a href=\"https://www.fullstackpython.com/table-of-contents.html\">fill in the table of contents</a>\nwith <a href=\"https://www.fullstackpython.com/change-log.html\">new pages</a>\nand\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "Developing Flask Apps in Docker Containers on macOS", "body": "<div class=\"c9\">\n<p>Adding <a href=\"/docker.html\">Docker</a> to your <a href=\"/why-use-python.html\">Python</a> and\n<a href=\"/flask.html\">Flask</a> <a href=\"/development-environments.html\">development environment</a>\ncan be confusing when you are just getting started with containers. Let's\nquickly get Docker installed and configured for developing Flask web\napplications on your local system.</p>\n<h2>Our Tools</h2>\n<p>This tutorial is written for <a href=\"/python-2-or-3.html\">Python 3</a>. It will work with\nPython 2 but I have not tested it with the\n<a href=\"https://pythonclock.org/\">soon-to-be deprecated 2.7 version</a>. </p>\n<p><a href=\"https://docs.docker.com/docker-for-mac/install/\">Docker for Mac</a> is necessary.\nI recommend the stable release unless you have an explicit purpose for the edge\nchannel.</p>\n<p>Within the Docker container we will use:</p>\n<ul>\n<li>Python 3, specifically the\n<a href=\"https://hub.docker.com/r/library/python/tags/\">slim-3.6.5 version</a>\nfrom Docker Hub</li>\n<li><a href=\"/flask.html\">Flask</a> version 1.0.2</li>\n</ul>\n<p>All of the code for the Dockerfile and the Flask app are available open source\nunder the MIT license on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/docker-flask-mac\">docker-flask-mac directory</a>\nof the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">blog-code-examples</a>\nrepository. Use the code for your own purposes as much as you like.</p>\n<h2>Installing Docker on macOS</h2>\n<p>We need to install Docker before we can spin up our Docker containers. If you\nalready have Docker for Mac installed and working, feel free to jump to the\nnext section.</p>\n<p>On your Mac,\n<a href=\"https://www.docker.com/community-edition#/download\">download the Docker Community Edition (CE) for Mac</a>\ninstaller.</p>\n<p><img src=\"/img/180309-flask-docker/docker-ce.jpg\" width=\"100%\" class=\"shot rnd\" alt=\"Download the Docker Community Edition for Mac.\"></p>\n<p>Find the newly-downloaded install within Finder and double click on the file.\nFollow the installation process, which includes granting administrative privileges\nto the installer.</p>\n<p>Open Terminal when the installer is done. Test your Docker installation with the\n<code>--version</code> flag:</p>\n<div class=\"highlight\"><pre><span></span>docker --version\n</pre></div>\n<p>If Docker is installed correctly you should see the following output:</p>\n<div class=\"highlight\"><pre><span></span>Docker version 18.03.1-ce, build 9ee9f40\n</pre></div>\n<p>Note that Docker runs through a system agent you can find in the menu bar.</p>\n<p><img src=\"/img/180309-flask-docker/docker-agent.png\" width=\"100%\" class=\"shot rnd\" alt=\"Docker agent in the menu bar.\"></p>\n<p>I have found the Docker agent to take up some precious battery life\non my Macbook Pro. If I am not developing and need to max battery time I will\nclose down the agent and start it back up again when I am ready to code. </p>\n<p>Now that Docker is installed let's get to running a container and writing\nour Flask application.</p>\n<h2>Dockerfile</h2>\n<p>Docker needs to know what we want in a container, which is where the\n<code>Dockerfile</code> comes in. </p>\n<div class=\"highlight\"><pre><span></span># this is an official Python runtime, used as the parent image\nFROM python:3.6.5-slim\n\n# set the working directory in the container to /app\nWORKDIR /app\n\n# add the current directory to the container as /app\nADD . /app\n\n# execute everyone's favorite pip command, pip install -r\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# unblock port 80 for the Flask app to run on\nEXPOSE 80\n\n# execute the Flask app\nCMD [\"python\", \"app.py\"]\n</pre></div>\n<p>Save the Dockerfile so that we can run our next command with the completed\ncontents of the file. On the commandline run:</p>\n<div class=\"highlight\"><pre><span></span>docker build -t flaskdock .\n</pre></div>\n<p>The above <code>docker build</code> file uses the <code>-t</code> flag to tag the image with\nthe name of <code>flaskdock</code>.</p>\n<p>If the build worked successfully we can see the image in with the\n<code>docker image ls</code> command. Give that a try now:</p>\n<div class=\"highlight\"><pre><span></span>docker image ls\n</pre></div>\n<p>We should then see our tag name in the images list:</p>\n<div class=\"highlight\"><pre><span></span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nflaskdock           latest              24045e0464af        2 minutes ago       165MB\n</pre></div>\n<p>Our image is ready to load up as a container so we can write a quick\nFlask app that we will use to test our environment by running it within\nthe container.</p>\n<h2>Coding A Simple Flask app</h2>\n<p>Time to put together a super simple \"Hello, World!\" Flask web app to test\nrunning Python code within our Docker container. Within the current\nproject directory, create a file named <code>app.py</code> with the following contents:</p>\n<div class=\"highlight\"><pre><span></span>from flask import Flask, Response\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello():\n    return Response(\"Hi from your Flask app running in your Docker container!\")\n\n\nif __name__ == \"__main__\":\n    app.run(\"0.0.0.0\", port=80, debug=True)\n</pre></div>\n<p>The above 7 lines of code (not counting blank PEP8-compliant lines) in\n<a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/docker-flask-mac/app.py\">app.py</a>\nallow our application to return a simple message when run with the\nFlask development server.</p>\n<p>We need just one more file to specify our <code>Flask</code> dependency. Create\na <code>requirements.txt</code> file within the same directory as <code>app.py</code>:</p>\n<div class=\"highlight\"><pre><span></span>flask==1.0.2\n</pre></div>\n<p>Make sure both the <code>app.py</code> and <code>requirements.txt</code> file are saved then\nwe can give the code a try.</p>\n<h2>Running the Container</h2>\n<p>Now that we have our image in hand along with the Python code in a file\nwe can run the image as a container with the <code>docker run</code> command. Execute\nthe following command, making sure to replace the absolute path for the\nvolume to your own directory.</p>\n<div class=\"highlight\"><pre><span></span>docker run -p 5000:80 --volume=/Users/matt/devel/py/flaskdocker:/app flaskdock\n</pre></div>\n<p>If you receive the error\n<code>python: can't open file 'app.py': [Errno 2] No such file or directory</code> then\nyou likely forgot to chance <code>/Users/matt/devel/py/flaskdocker</code> to the\ndirectory where your project files, especially <code>app.py</code>, are located.</p>\n<p><img src=\"/img/180309-flask-docker/flask-app-response.png\" width=\"100%\" class=\"shot rnd\" alt=\"Flask app responding to requests from within a Docker container.\"></p>\n<p>Everything worked when you see a simple text-based HTTP response like what\nis shown above in the screenshot of my Chrome browser.</p>\n<h2>What's Next?</h2>\n<p>We just installed Docker and configured a Flask application to run inside a\ncontainer. That is just the beginning of how you can integrate Docker into\nyour workflow. I strongly recommend reading the\n<a href=\"https://docs.docker.com/compose/django/\">Django with PostgreSQL quickstart</a>\nthat will introduce you to Docker Swarm as well as the core Docker container\nservice.</p>\n<p>Next up take a look at the <a href=\"/docker.html\">Docker</a> and\n<a href=\"/deployment.html\">deployment</a> pages for more related tutorials.</p>\n<p>Questions? Let me know via a GitHub\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see a typo, syntax issue or just something that's confusing in this\nblog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180309-flask-docker-macos.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">file an issue ticket on GitHub</a>.</p>\n</div>"},
{"title": "How to Add Maps to Django Web App Projects with Mapbox", "body": "<div class=\"c9\">\n<p>Building interactive maps into a <a href=\"/django.html\">Django</a> web application\ncan seem daunting if you do not know where to begin, but it is easier\nthan you think if you use a developer tool such as\n<a href=\"https://www.mapbox.com/\">Mapbox</a>.</p>\n<p>In this post we will build a simple Django project with a single app\nand add an interactive map like the one you see below to the webpage that\nDjango renders with the <a href=\"https://www.mapbox.com/maps/\">Mapbox Maps</a>\n<a href=\"/application-programming-interfaces.html\">API</a>.</p>\n<div id=\"map\" width=\"100%\" style=\"height:280px;margin-bottom:16px\" class=\"shot rnd outl\"></div>\n<script type=\"6121037268c53cab6f3b391a-text/javascript\">\nmapboxgl.accessToken = 'pk.eyJ1IjoibWF0dG1ha2FpIiwiYSI6ImNqZzU0OXNtYjIzdmIyeHA5OG1sNnhid2YifQ.kzJityumPUk9f9i1vkmWAg';\nvar map = new mapboxgl.Map({\n container: 'map',\n style: 'mapbox://styles/mapbox/streets-v10',\n center: [-77.03, 38.91],\n zoom: 9\n});\n</script>\n<h2>Our Tools</h2>\n<p><a href=\"/python-2-or-3.html\">Python 3</a> is strongly recommended for this tutorial\nbecause Python 2 will no longer be supported starting January 1, 2020.\n<a href=\"https://www.python.org/downloads/release/python-365/\">Python 3.6.5</a> to\nwas used to build this tutorial. We will also use the following\n<a href=\"/application-dependencies.html\">application dependencies</a> to build\nour application:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> web framework,\n<a href=\"https://docs.djangoproject.com/en/2.0/\">version 2.0.5</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/\">pip</a> and\n<a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>, which come installed\nwith Python 3, to install and isolate the Django library\nfrom your other applications</li>\n<li>A <a href=\"https://www.mapbox.com/\">free Mapbox account</a> to interact with their\n<a href=\"/application-programming-interfaces.html\">web API</a> using\n<a href=\"/javascript.html\">JavaScript</a></li>\n</ul>\n<p>If you need help getting your\n<a href=\"/development-environments.html\">development environment</a> configured\nbefore running this code, take a look at\n<a href=\"/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html\">this guide for setting up Python 3 and Django on Ubuntu 16.04 LTS</a>.</p>\n<p>This blog post's code is also available on GitHub within the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">maps-django-mapbox directory of the blog-code-examples repository</a>.\nTake the code and use it for your own purposes because it is all\nprovided under the MIT open source license.</p>\n<h2>Installing Dependencies</h2>\n<p>Start the Django project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv djangomaps\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source djangomaps/bin/activate\n</pre></div>\n<p>The command prompt will change after activating the virtualenv:</p>\n<p><img src=\"/img/180519-django-maps/virtualenv.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Activate your djangomaps virtualenv.\"></p>\n<p>Remember that you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/2.0.5\">Django</a>\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==2.0.5\n</pre></div>\n<p>Look for the following output to confirm Django installed\ncorrectly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>  Downloading https://files.pythonhosted.org/packages/23/91/2245462e57798e9251de87c88b2b8f996d10ddcb68206a8a020561ef7bd3/Django-2.0.5-py3-none-any.whl (7.1MB)\n      100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7.1MB 231kB/s \n      Collecting pytz (from django==2.0.5)\n        Using cached https://files.pythonhosted.org/packages/dc/83/15f7833b70d3e067ca91467ca245bae0f6fe56ddc7451aa0dc5606b120f2/pytz-2018.4-py2.py3-none-any.whl\n        Installing collected packages: pytz, django\n        Successfully installed django-2.0.5 pytz-2018.4\n</pre></div>\n<p>The Django dependency is ready to go so now we can create our project\nand add some awesome maps to the application.</p>\n<h2>Building Our Django Project</h2>\n<p>We can use the <a href=\"/django.html\">Django</a> <code>django-admin.py</code> tool to create\nthe boilerplate code structure to get our project started.\nChange into the directory where you develop your applications. For\nexample, I typically use <code>/Users/matt/devel/py/</code>. Then run the following\ncommand to start a Django project named <code>djmaps</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djmaps\n</pre></div>\n<p>The <code>django-admin.py</code> command will create a directory named <code>djmaps</code> along\nwith several subdirectories that you should be familiar with if you have\npreviously worked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djmaps\n</pre></div>\n<p>Create a new Django app within <code>djmaps</code>.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py startapp maps\n</pre></div>\n<p>Django will generate a new folder named <code>maps</code> for the project.\nWe should update the URLs so the app is accessible before we write\nour <code>views.py</code> code.</p>\n<p>Open <code>djmaps/djmaps/urls.py</code>. Add the highlighted lines so that URLs\nwill check the <code>maps</code> app for appropriate URL matching.</p>\n<div class=\"highlight\"><pre><span></span>\"\"\" (comments)\n\"\"\"\n<span class=\"highlight\">from django.conf.urls import include</span>\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nurlpatterns = [\n<span class=\"highlight\">    path('', include('maps.urls')),</span>\n    path('admin/', admin.site.urls),\n]\n</pre></div>\n<p>Save <code>djmaps/djmaps/urls.py</code> and open <code>djmaps/djmaps/settings.py</code>.\nAdd the <code>maps</code> app to <code>settings.py</code> by inserting the highlighted line:</p>\n<div class=\"highlight\"><pre><span></span># Application definition\n\nINSTALLED_APPS = [ \n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'maps',</span>\n]\n</pre></div>\n<p>Make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the Django\n<a href=\"https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/\">production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Save and close <code>settings.py</code>.</p>\n<p>Next change into the <code>djmaps/maps</code> directory. Create a new file named\n<code>urls.py</code> to contain routes for the <code>maps</code> app.</p>\n<p>Add these lines to the empty <code>djmaps/maps/urls.py</code> file.</p>\n<div class=\"highlight\"><pre><span></span>from django.conf.urls import url                                                                                                                              \nfrom . import views\n\nurlpatterns = [ \n    url(r'', views.default_map, name=\"default\"),\n]\n</pre></div>\n<p>Save <code>djmaps/maps/urls.py</code> and open <code>djmaps/maps/views.py</code> add the\nfollowing two highlighted lines. You can keep the boilerplate comment or\ndelete it.</p>\n<div class=\"highlight\"><pre><span></span>from django.shortcuts import render\n\n\n<span class=\"highlight\">def default_map(request):</span>\n<span class=\"highlight\">    return render(request, 'default.html', {})</span>\n</pre></div>\n<p>Next, create a directory for your template files named <code>templates</code> under\nthe <code>djmaps/maps</code> app directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir templates\n</pre></div>\n<p>Create a new file named <code>default.html</code> within <code>djmaps/maps/templates</code>\nthat contains the following <a href=\"/django-templates.html\">Django template</a> markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Interactive maps for Django web apps<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Map time!<span class=\"p\">&lt;/</span>h1&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>We can test out this static page to make sure all of our code is\ncorrect, then we'll use Mapbox to embed a customizable map within\nthe page. Change into the base directory of your Django project\nwhere the <code>manage.py</code> file is located. Execute the development\nserver with the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server will start up with no issues other than an\nunapplied migrations warning.</p>\n<div class=\"highlight\"><pre><span></span>Performing system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\n\nMay 21, 2018 - 12:47:54\nDjango version 2.0.5, using settings 'djmaps.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Open a web browser and go to <code>localhost:8000</code>.</p>\n<p><img src=\"/img/180519-django-maps/map-time.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Plain old HTML page.\"></p>\n<p>Our code works, but boy is that a plain-looking HTML page. Let's make the\nmagic happen by adding JavaScript to the template to generate maps.</p>\n<h2>Adding Maps with Mapbox</h2>\n<p>Head to <a href=\"https://www.mapbox.com/\">mapbox.com</a> in your web browser to\naccess the Mapbox homepage.</p>\n<p><img src=\"/img/180519-django-maps/mapbox-homepage.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Mapbox homepage.\"></p>\n<p>Click on \"Get Started\" or \"Get Started for free\" (the text depends on whether\nor not you already have a Mapbox account).</p>\n<p><img src=\"/img/180519-django-maps/sign-up.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sign up for a Mapbox account.\"></p>\n<p>Sign up for a new free developer account or sign in to your existing\naccount.</p>\n<p><img src=\"/img/180519-django-maps/add-mapbox.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Add Mapbox to your application.\"></p>\n<p>Click the \"JS Web\" option.</p>\n<p><img src=\"/img/180519-django-maps/method-installation.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Choose the method of installation.\"></p>\n<p>Choose \"Use the Mapbox CDN\" for the installation method. The next two screens\nshow some code that you should add to your <code>djmaps/maps/templates/default.html</code>\ntemplate file. The code will look like the following but you will need to\nreplace the <code>mapboxgl.accessToken</code> line with your own access token.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Interactive maps for Django web apps<span class=\"p\">&lt;/</span>title&gt;\n<span class=\"highlight\">    &lt;script <span class=\"na\">src</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'</span><span class=\"p\">&gt;&lt;/</span>script&gt;</span>\n<span class=\"highlight\">    &lt;link <span class=\"na\">href</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css'</span> <span class=\"na\">rel</span>=<span class=\"s\">'stylesheet'</span> /&gt;</span>\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Map time!<span class=\"p\">&lt;/</span>h1&gt;\n<span class=\"highlight\">   &lt;div <span class=\"na\">id</span>=<span class=\"s\">'map'</span> <span class=\"na\">width</span>=<span class=\"s\">\"100%\"</span> <span class=\"na\">style</span>=<span class=\"s\">'height:400px'</span><span class=\"p\">&gt;&lt;/</span>div&gt;</span>\n<span class=\"highlight\">   &lt;script&gt;</span>\n<span class=\"highlight\">    <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">accessToken</span> = <span class=\"cp\">{{</span> <span class=\"nv\">mapbox_access_token</span> <span class=\"cp\">}}</span>;</span>\n<span class=\"highlight\">    <span class=\"kd\">var</span> <span class=\"nx\">map</span> = new <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">Map</span>({</span>\n<span class=\"highlight\">     <span class=\"nx\">container</span>: 'map',</span>\n<span class=\"highlight\">     <span class=\"nx\">style</span>: 'mapbox://styles/mapbox/streets-v10'</span>\n<span class=\"highlight\">    });</span>\n<span class=\"highlight\">   <span class=\"p\">&lt;/</span>script&gt;</span>\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>Re-open <code>djmaps/maps/views.py</code> to update the parameters passed into the\nDjango template. </p>\n<div class=\"highlight\"><pre><span></span>from django.shortcuts import render\n\n\ndef default_map(request):\n<span class=\"highlight\">    # TODO: move this token to Django settings from an environment variable</span>\n<span class=\"highlight\">    # found in the Mapbox account settings and getting started instructions</span>\n<span class=\"highlight\">    # see https://www.mapbox.com/account/ under the \"Access tokens\" section</span>\n<span class=\"highlight\">    mapbox_access_token = 'pk.my_mapbox_access_token'</span>\n<span class=\"highlight\">    return render(request, 'default.html', </span>\n<span class=\"highlight\">                  { 'mapbox_access_token': mapbox_access_token })</span>\n</pre></div>\n<p>The Mapbox access token should really be stored in the Django settings\nfile, so we left a \"TODO\" note to handle that as a future step.</p>\n<p>Now we can try our webpage again. Refresh <code>localhost:8000</code> in your\nweb browser.</p>\n<p><img src=\"/img/180519-django-maps/map-time-with-map.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Screenshot of the Mapbox map showing up in our Django front end.\"></p>\n<p>Sweet, we've got a live, interactive map! It's kind of weird thought how it\nis zoomed out to view the entire world. Time to customize the map using\na few JavaScript parameters.</p>\n<h2>Customizing the Map</h2>\n<p>We can modify the map by changing parameters for the style, zoom level,\nlocation and many other attributes.</p>\n<p>We'll start by changing the location that the initial map centers in\non as well as the zoom level.</p>\n<p>Re-open <code>djmaps/maps/templates/default.html</code> and modify the first\nhighlighted lines so it ends with a commas and add the two new\nhighlighted lines shown below.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Interactive maps for Django web apps<span class=\"p\">&lt;/</span>title&gt;\n    &lt;script <span class=\"na\">src</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'</span><span class=\"p\">&gt;&lt;/</span>script&gt;\n    &lt;link <span class=\"na\">href</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css'</span> <span class=\"na\">rel</span>=<span class=\"s\">'stylesheet'</span> /&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Map time!<span class=\"p\">&lt;/</span>h1&gt;\n   &lt;div <span class=\"na\">id</span>=<span class=\"s\">'map'</span> <span class=\"na\">width</span>=<span class=\"s\">\"100%\"</span> <span class=\"na\">style</span>=<span class=\"s\">'height:400px'</span><span class=\"p\">&gt;&lt;/</span>div&gt;\n   &lt;script&gt;\n    <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">accessToken</span> = <span class=\"cp\">{{</span> <span class=\"nv\">mapbox_access_token</span> <span class=\"cp\">}}</span>;\n    <span class=\"kd\">var</span> <span class=\"nx\">map</span> = new <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">Map</span>({\n     <span class=\"nx\">container</span>: 'map',\n<span class=\"highlight\">     <span class=\"nx\">style</span>: 'mapbox://styles/mapbox/streets-v10',</span>\n<span class=\"highlight\">     <span class=\"nx\">center</span>: [-<span class=\"mf\">77.03</span>, <span class=\"mf\">38.91</span>],</span>\n<span class=\"highlight\">     <span class=\"nx\">zoom</span>: 9</span>\n    });\n   <span class=\"p\">&lt;/</span>script&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>The first number, -77.03, for the <code>center</code> array is the longitude\nand the second number, 38.91, is the latitude. Zoom level 9 is much\ncloser to the city than the default which was the entire world at\nlevel 0. All of the customization values are listed in the\n<a href=\"https://www.mapbox.com/mapbox-gl-js/api/\">Mapbox GL JS API documentation</a>.</p>\n<p>Now refresh the page at <code>localhost:8000</code> to reload our map.</p>\n<p><img src=\"/img/180519-django-maps/map-updated-style-1.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Updated map centered and zoomed in on Washington, D.C.\"></p>\n<p>Awesome, now we are zoomed in on Washington, D.C. and can still move\naround to see more of the map. Let's make a couple other changes to\nour map before wrapping up.</p>\n<p>Again back in <code>djmaps/maps/templates/default.html</code> change the highlighted\nline for the <code>style</code> key to the <code>mapbox://styles/mapbox/satellite-streets-v10</code>\nvalue. That will change the look from an abstract map style to satellite\nimage data. Update <code>zoom: 9</code> so that it has a comma at the end of the line\nand add <code>bearing: 180</code> as the last key-value pair in the configuration.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Interactive maps for Django web apps<span class=\"p\">&lt;/</span>title&gt;\n    &lt;script <span class=\"na\">src</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'</span><span class=\"p\">&gt;&lt;/</span>script&gt;\n    &lt;link <span class=\"na\">href</span>=<span class=\"s\">'https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css'</span> <span class=\"na\">rel</span>=<span class=\"s\">'stylesheet'</span> /&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Map time!<span class=\"p\">&lt;/</span>h1&gt;\n   &lt;div <span class=\"na\">id</span>=<span class=\"s\">'map'</span> <span class=\"na\">width</span>=<span class=\"s\">\"100%\"</span> <span class=\"na\">style</span>=<span class=\"s\">'height:400px'</span><span class=\"p\">&gt;&lt;/</span>div&gt;\n   &lt;script&gt;\n    <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">accessToken</span> = <span class=\"cp\">{{</span> <span class=\"nv\">mapbox_access_token</span> <span class=\"cp\">}}</span>;\n    <span class=\"kd\">var</span> <span class=\"nx\">map</span> = new <span class=\"nx\">mapboxgl</span>.<span class=\"nx\">Map</span>({\n     <span class=\"nx\">container</span>: 'map',\n<span class=\"highlight\">     <span class=\"nx\">style</span>: 'mapbox://styles/mapbox/satellite-streets-v10',</span>\n<span class=\"highlight\">     <span class=\"nx\">center</span>: [-<span class=\"mf\">77.03</span>, <span class=\"mf\">38.91</span>],</span>\n<span class=\"highlight\">     <span class=\"nx\">zoom</span>: 9,</span>\n<span class=\"highlight\">     <span class=\"nx\">bearing</span>: 180</span>\n    });\n   <span class=\"p\">&lt;/</span>script&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>Save the template and refresh <code>localhost:8000</code>.</p>\n<p><img src=\"/img/180519-django-maps/map-updated-style-2.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Updated map with satellite imagery and street map overlay.\"></p>\n<p>The map now provides a satellite view with streets overlay but it is\nalso... \"upside down\"! At least the map is upside down compared to how\nmost maps are drawn, due to the <code>bearing: 180</code> value, which modified\nthis map's rotation.</p>\n<p>Not bad for a few lines of JavaScript in our Django application.\nRemember to check the\n<a href=\"https://www.mapbox.com/mapbox-gl-js/api/\">Mapbox GL JS API documentation</a>\nfor the exhaustive list of parameters that you can adjust.</p>\n<h2>What's Next?</h2>\n<p>We just learned how to add interactive JavaScript-based maps to our\n<a href=\"/django.html\">Django</a> web applications, as well as modify the look\nand feel of the maps. Next try out some of the other APIs Mapbox\nprovides including: </p>\n<ul>\n<li><a href=\"https://www.mapbox.com/api-documentation/#directions\">directions</a></li>\n<li><a href=\"https://www.mapbox.com/api-documentation/#map-matching\">map matching</a></li>\n<li><a href=\"https://www.mapbox.com/api-documentation/#geocoding\">geocoding</a></li>\n</ul>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see a typo, syntax issue or wording that's confusing in this blog\npost? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180519-django-maps-mapbox.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">file an issue ticket on GitHub</a>.</p>\n</div>"},
{"title": "Full Stack Python at PyCon US 2018", "body": "<div class=\"c9\">\n<p><a href=\"https://us.pycon.org/2018/about/\">PyCon US 2018</a> kicked off today with the\n<a href=\"https://us.pycon.org/2018/schedule/tutorials/\">first day of tutorials</a>. I am\nflying in tomorrow and will be there through the end of the\nweekend. If you're around, come by either the\n<a href=\"https://www.twilio.com/\">Twilio booth</a> or the community booth where the\u00a0\ngang from <a href=\"https://talkpython.fm/\">Talk Python to Me</a>,\n<a href=\"https://realpython.com/\">Real Python</a>, <a href=\"https://pybit.es/\">PyBites</a> and\n<a href=\"http://testandcode.com/\">Test &amp; Code</a> will be hanging out. I will be\nat one of those two spots when I am not watching talks! I'd love your\nfeedback on what I can improve on\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>. It's also great\nhearing your stories about how the site has helped you improve your\ndevelopment skills.</p>\n<p>For those folks who can't make it to PyCon, I'll be tweeting the best stuff\nthat I see throughout the conference via\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>. Likewise, if I miss\nsomething let me know on Twitter or via email so we can highlight it.</p>\n<p>One quick update on the\n<a href=\"https://www.deploypython.com/\">Full Stack Python Guide to Deployments book</a>.\nI have a great update in the works that bumps to the latest versions of\nUbuntu (now 18.04 LTS), Ansible 2.5.1 and Flask 1.0.2. It has been a long\ntime coming and will be a free update to all existing purchasers. If you have\nnot bought the book yet, I recommend waiting until the update is out\nbecause the existing book's software versions are getting way too out of\ndate to be useful to most projects.</p>\n<p>Got questions or comments about\u00a0\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\u00a0\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\u00a0\nto let me know how to improve the site as I continue to\u00a0fill in the\n<a href=\"https://www.fullstackpython.com/table-of-contents.html\">table of contents</a>\u00a0\nwith\u00a0<a href=\"https://www.fullstackpython.com/change-log.html\">new pages</a>\u00a0and\u00a0\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "Monitoring Python 3.6 Functions on AWS Lambda", "body": "<div class=\"c9\">\n<p><a href=\"/aws-lambda.html\">Amazon Web Services (AWS) Lambda</a> is a usage-based\nexecution environment that can run Python 3.6 code. If you have never\npreviously used AWS Lambda then you can read<br>\n<a href=\"/blog/aws-lambda-python-3-6.html\">How to Create Your First Python 3.6 AWS Lambda Function</a>.\nHowever, this tutorial will give you every step to follow even if you\nare completely new to AWS.</p>\n<p>In this post we are going to monitor Python code that is running on AWS\nLambda by using a hosted <a href=\"/monitoring.html\">monitoring</a> service,\n<a href=\"/rollbar.html\">Rollbar</a>.</p>\n<h2>Required Tools and Code</h2>\n<p>A local <a href=\"/development-environments.html\">development environment</a> is not\nrequired to follow this tutorial. All the work will happen in a web\nbrowser through the <a href=\"https://console.aws.amazon.com/console/\">AWS Console</a>.</p>\n<p>The example code can be copy and pasted from this blog post or you\ncan access it on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">Full Stack Python blog-post-examples</a>\nrepository within the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/aws-lambda-python-3-6\">monitor-aws-lambda-python-3-6 directory</a>.</p>\n<h2>Accessing the AWS Lambda Service</h2>\n<p><a href=\"https://aws.amazon.com/console\">Sign into your existing AWS account</a>\nor sign up for a <a href=\"https://aws.amazon.com/\">new account</a>. AWS Lambda\ncomes with a free tier so you can test code and execute basic\napplications without cost.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/aws-amazon-com.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"AWS Lambda landing page.\"></p>\n<p>AWS has a boatload of services so use the search box to enter\n\"lambda\" and select \"Lambda\" when it appears to get to the appropriate\nstarting page.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/search-for-lambda.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Search for lambda in the dashboard text box.\"></p>\n<p>Click the \"Create function\" button.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/create-function.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"The create Lambda function screen.\"></p>\n<p>Select \"Author from Scratch\". Fill in a name so you can easily recognize this\nfunction for future reference. I chose \"monitorPython3\". Select \"Python 3.6\"\nfor Runtime.</p>\n<p>Select \"Create new role from template(s)\", input a Role name, for example\n\"basicEdgeLambdaRole\". For Policy templates choose \"Basic Edge Lambda\nPermissions\".</p>\n<p>Then click \"Create function.\"</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/monitorpython3.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Blank AWS Lambda function named monitorPython3.\"></p>\n<p>Ok, finally we have arrived at the configuration screen where we can write\nour code.</p>\n<h2>Coding a Python Function</h2>\n<p>Scroll down to the \"Function code\" user interface section.</p>\n<p>Paste or type in the following code, replacing what is already in the\ntext box.</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport rollbar\n\n\nROLLBAR_KEY = os.getenv('ROLLBAR_SECRET_KEY', 'missing Rollbar secret key')\nrollbar.init(ROLLBAR_KEY, 'production')\n\n\n@rollbar.lambda_function\ndef lambda_handler(event, context):\n    message = os.getenv(\"message\")\n    print_count = int(os.getenv(\"print_count\"))\n\n    # check if message exists and how many times to print it\n    if message and print_count &gt; 0:\n        for i in range(0, print_count):\n            # formatted string literals are new in Python 3.6\n            print(f\"message: {message}.\")\n        return print_count\n    return None\n</pre></div>\n<p>The code contains the required <code>lambda_handler</code> function. <code>lambda_handler</code>\nis Lambda's hook for where to start execution the code.</p>\n<p>The Python code expects two environment variables that are read by the\n<code>os</code> module with the <code>getenv</code> function. The <code>message</code> and\n<code>print_count</code> variables are set by the environment variables.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/lambda-coded.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Python 3.6 code within a Lambda function.\"></p>\n<p>Below the code input text box on this function configuration screen there\nis a section to set environment variable key-value pairs. We need to input\ntwo environment variables and then we can run our code.</p>\n<p>Enter the keys named <code>message</code> with a value of <code>Hello World!</code>. Then\nenter <code>print_count</code> as a second key with the value of <code>5</code>.</p>\n<p>Our Python code's error handling is not robust. A value other than a\nnumber in the <code>print_count</code> variable will cause the script to throw\nan exception when it is executed due to the forced casting of <code>print_count</code>\nvia the <code>int()</code> function. We will use the exception that can occur during\nthis forced casting as a trivial example that shows what happens when\nerrors in our code happen during Lambda function execution.</p>\n<p>Hit the \"Save\" button at the top right. Use the\ndefault \"Hello World\" test template values and name it \"testHelloWorld\".\nWe do not need any of those values for our function. </p>\n<p><img src=\"/img/180420-monitor-aws-lambda/configure-test-event.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Configure an empty test event for your Lambda function.\"></p>\n<p>Click \"Create\" and your test template will be created. Now click\n\"Test\" to run the function. You should see \"Execution result: succeeded\"\nwith the <code>message</code> variable printed five times.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/success-execution.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Execution succeeds when there is an integer value for the print_count variable.\"></p>\n<p>Now change the value of <code>print_count</code> to <code>i dunno</code>. Save the function\nand click \"Test\" again. The function will fail.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/failed-execution-result.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Execution fails when we do not have an integer value for print_count variable.\"></p>\n<p>It is obvious when we are working in the Console that an error just\noccurred. However, in most cases an error will happen sporadically\nwhich is why we need a monitoring system in place to catch and report\non those exceptions.</p>\n<h2>Monitoring our Lambda Function</h2>\n<p>Head over to the <a href=\"https://rollbar.com/\">Rollbar homepage</a>\nto obtain a free account and grab the necessary information to add their\nhosted monitoring service into our Lambda application.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/rollbar-home.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Rollbar homepage.\"></p>\n<p>Click \"Sign Up\" in the upper right-hand corner. Enter your\nemail address, username and desired password.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/sign-up-rollbar.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Signing up for a Rollbar account in your browser.\"></p>\n<p>After the sign up page you will see the onboarding flow where you can\nenter a project name and select a programming language. For the project\nname type in \"Full Stack Python\" and then select that you are monitoring\na Python-based application.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/create-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Name your project 'Full Stack Python' and select Python as your language.\"></p>\n<p>Press \"Continue\" at the bottom of the screen. The next\npage shows us a few instructions on how to add monitoring.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/configure-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Configure project using your server-side access token.\"></p>\n<p>Take note of that server-side access token as we will need to set it\nas an environment variable on AWS Lambda.</p>\n<p>We can now update our Python function to collect and aggregate\nthe errors that occur in our application. Add the following highlighted\nlines to your Lambda code:</p>\n<div class=\"highlight\"><pre><span></span>import os\n<span class=\"highlight\">import rollbar</span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\">ROLLBAR_KEY = os.getenv('ROLLBAR_SECRET_KEY', 'missing Rollbar secret key')</span>\n<span class=\"highlight\">rollbar.init(ROLLBAR_KEY, 'production')</span>\n\n\n<span class=\"highlight\">@rollbar.lambda_function</span>\ndef lambda_handler(event, context):\n    message = os.getenv(\"message\")\n    print_count = int(os.getenv(\"print_count\"))\n\n    # check if message exists and how many times to print it\n    if message and print_count &gt; 0:\n        for i in range(0, print_count):\n            # formatted string literals are new in Python 3.6\n            print(f\"message: {message}.\")\n        return print_count\n    return None\n</pre></div>\n<p>The above highlighted new code lines incorporate the <code>rollbar</code> library\ninto our application, set the <code>ROLLBAR_KEY</code> with our environment variable\nand use the <code>rollbar.lambda_function</code> decorator to catch all errors in\nour <code>lambda_handler</code> function.</p>\n<p>Add the following third environment variable named <code>ROLLBAR_SECRET_KEY</code>\nthat is the server-side token from your new Rollbar project.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/rollbar-key-env-var.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Add your Rollbar server-side key into a Lambda environment variable.\"></p>\n<p>There is just one issue with this function on Lambda as it stands: there is\nno way for Lambda to know about the Rollbar package code. The external Rollbar\ndependency needs to be included. There are a couple of ways to handle the\nissue:</p>\n<ol>\n<li>Download\n<a href=\"https://github.com/fullstackpython/blog-code-examples/raw/master/monitor-aws-lambda-python-3-6/hello-rollbar.zip\">this pre-made zip file</a>\nfrom the GitHub repository which includes all of the Rollbar package\ncode and our code in the <code>lambda_function.py</code> file.</li>\n<li>Re-create the above code on your local system and\n<a href=\"https://haythamsalhi.wordpress.com/2017/10/04/creating-lambda-deployment-package-of-python/\">use pip to obtain the dependencies and create a zip file locally</a>.</li>\n</ol>\n<p>I provided the pre-made zip file to save time in this tutorial so try\nthat one now so we can see the final results. Under \"Function code\", change\nthe \"Code entry type\" from \"Edit code inline\" to \"Upload a .ZIP file\".\nHit the \"Upload\" button under \"Function package\".</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/upload-zip-package.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Upload the ZIP file with Rollbar dependency.\"></p>\n<p>Hit the \"Save\" button at the top. With our new code we can now see if\nRollbar will capture and report the exceptions. Hit the \"Save\" button and\nthen \"Test\".</p>\n<p>The function will fail as expected. If we move over to our Rollbar\ndashboard and refresh the page, we see the exceptions.</p>\n<p><img src=\"/img/180420-monitor-aws-lambda/rollbar-exceptions.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Rollbar user interface with exceptions.\"></p>\n<p>Now we can track Lambda exceptions across many functions regardless\nof how frequently they are running.</p>\n<h2>What's Next?</h2>\n<p>We just wrote and executed a Python 3.6 function on AWS Lambda then\ncaptured the exception message into our Rollbar logs. Now you can\ncontinue building out your Python code knowing that when something\ngoes wrong you will have full visibility on what happened.</p>\n<p>Check out the <a href=\"/aws-lambda.html\">AWS Lambda section</a> for\nmore tutorials by other developers.</p>\n<p>Further questions? Contact me on Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180420-monitor-aws-lambda-python-3-6.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Explain Your Products to Developers", "body": null},
{"title": "Running Bottle Apps in Docker Containers on macOS", "body": "<div class=\"c9\">\n<p>It can be confusing to figure out how to use <a href=\"/docker.html\">Docker</a>\ncontainers in your <a href=\"/why-use-python.html\">Python</a> and\n<a href=\"/flask.html\">Bottle</a>\n<a href=\"/development-environments.html\">development environment</a> workflow.\nThis tutorial will quickly show you the exact steps to get Docker\nup and running on macOS with a working Bottle\n<a href=\"/web-development.html\">web application</a></p>\n<h2>Our Tools</h2>\n<p>This tutorial is written for <a href=\"/python-2-or-3.html\">Python 3</a>. It may work with\nPython 2 but it has not been testing with that soon-to-be deprecated\n<a href=\"https://pythonclock.org/\">2.7 version</a>. You should really be using Python 3,\npreferrably the latest release which is currently\n<a href=\"https://www.python.org/downloads/release/python-365/\">3.6.5</a>.</p>\n<p><a href=\"https://docs.docker.com/docker-for-mac/install/\">Docker for Mac</a> is necessary\nto run Docker containers. I recommend that you use the stable release unless\nyou have an explicit purpose for the\n<a href=\"https://docs.docker.com/docker-for-mac/edge-release-notes/\">edge channel</a>.</p>\n<p>Within the Docker container we will use:</p>\n<ul>\n<li>Python 3, specifically the\n<a href=\"https://hub.docker.com/r/library/python/tags/\">slim-3.6.5 version</a>\nfrom <a href=\"https://hub.docker.com/\">Docker Hub</a></li>\n<li><a href=\"/bottle.html\">Bottle</a> version 0.12.13</li>\n</ul>\n<p>All for the Dockerfile and the Bottle project are available open source\nunder the MIT license on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/docker-bottle-mac\">docker-bottle-mac directory</a>\nof the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">blog-code-examples</a>\nrepository.</p>\n<h2>Installing Docker on macOS</h2>\n<p>We must install Docker before we can spin up our containers. Jump to\nthe next section if you already have Docker for Mac installed and working\non your computer.</p>\n<p>On your Mac,\n<a href=\"https://www.docker.com/community-edition#/download\">download the Docker Community Edition (CE) for Mac</a>\ninstaller.</p>\n<p><img src=\"/img/180604-bottle-docker/docker-ce.jpg\" width=\"100%\" class=\"shot rnd\" alt=\"Download the Docker Community Edition for Mac.\"></p>\n<p>Open Finder and go to the downloads folder where the installation file is located.\nFollow the installation steps and open Terminal when the installer finishes. </p>\n<p>Test your Docker installation by running the <code>docker</code> command along with the\n<code>--version</code> flag:</p>\n<div class=\"highlight\"><pre><span></span>docker --version\n</pre></div>\n<p>If Docker is installed correctly you should see the following output:</p>\n<div class=\"highlight\"><pre><span></span>Docker version 18.03.1-ce, build 9ee9f40\n</pre></div>\n<p>Note that Docker runs through a system agent you can find in the menu bar.</p>\n<p><img src=\"/img/180604-bottle-docker/docker-agent.png\" width=\"100%\" class=\"shot rnd\" alt=\"Docker agent in the menu bar.\"></p>\n<p>Docker is now installed so we can run a container and write a simple\nBottle application to test running an app within the container. </p>\n<h2>Dockerfile</h2>\n<p>Docker needs to know what we want in our container so we specify an\nimage using a <code>Dockerfile</code>.</p>\n<div class=\"highlight\"><pre><span></span># this is an official Python runtime, used as the parent image\nFROM python:3.6.5-slim\n\n# set the working directory in the container to /app\nWORKDIR /app\n\n# add the current directory to the container as /app\nADD . /app\n\n# execute everyone's favorite pip command, pip install -r\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# unblock port 80 for the Bottle app to run on\nEXPOSE 80\n\n# execute the Flask app\nCMD [\"python\", \"app.py\"]\n</pre></div>\n<p>Save the Dockerfile and then on the commandline run:</p>\n<div class=\"highlight\"><pre><span></span>docker build -t bottledock .\n</pre></div>\n<p>The above <code>docker build</code> file uses the <code>-t</code> flag to tag the image with\nthe name of <code>bottledock</code>.</p>\n<p>If the build worked successfully the <a href=\"/shells.html\">shell</a> will show\nsome completed output like the following:</p>\n<div class=\"highlight\"><pre><span></span>$ docker build -t bottledock .\nSending build context to Docker daemon  <span class=\"m\">16</span>.38kB\nStep <span class=\"m\">1</span>/6 : FROM python:3.6.5-slim\n<span class=\"m\">3</span>.6.5-slim: Pulling from library/python\nf2aa67a397c4: Pull complete \n19cc085bc22b: Pull complete \n83bd7790bc68: Pull complete \n8b3329adba1b: Pull complete \nd0a8fd6eb5d0: Pull complete \nDigest: sha256:56100f5b5e299f4488f51ea81cc1a67b5ff13ee2f926280eaf8e527a881afa61\nStatus: Downloaded newer image for python:3.6.5-slim\n ---&gt; 29ea9c0b39c6\nStep <span class=\"m\">2</span>/6 : WORKDIR /app\nRemoving intermediate container 627538eb0d39\n ---&gt; 26360255c163\nStep <span class=\"m\">3</span>/6 : ADD . /app\n ---&gt; 9658b91b29db\nStep <span class=\"m\">4</span>/6 : RUN pip install --trusted-host pypi.python.org -r requirements.txt\n ---&gt; Running in f0d0969f3066\nCollecting <span class=\"nv\">bottle</span>==<span class=\"m\">0</span>.12.13 (from -r requirements.txt (line <span class=\"m\">1</span>))\n  Downloading https://files.pythonhosted.org/packages/bd/99/04dc59ced52a8261ee0f965a8968717a255ea84a36013e527944dbf3468c/bottle-0.12.13.tar.gz (70kB)\nBuilding wheels for collected packages: bottle\n  Running setup.py bdist_wheel for bottle: started\n  Running setup.py bdist_wheel for bottle: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/76/a0/b4/2a3ee1a32d0506931e558530258de1cc04b628eff1b2f008e0\nSuccessfully built bottle\nInstalling collected packages: bottle\nSuccessfully installed bottle-0.12.13\nRemoving intermediate container f0d0969f3066\n ---&gt; 0534575c8067\nStep <span class=\"m\">5</span>/6 : EXPOSE <span class=\"m\">80</span>\n ---&gt; Running in 14e49938d3be\nRemoving intermediate container 14e49938d3be\n ---&gt; 05e087d2471d\nStep <span class=\"m\">6</span>/6 : CMD [\"python\", \"app.py\"]\n ---&gt; Running in ca9738bfd06a\nRemoving intermediate container ca9738bfd06a\n ---&gt; 9afb4f01e0d3\nSuccessfully built 9afb4f01e0d3\nSuccessfully tagged bottledock:latest\n</pre></div>\n<p>We can also see the image with the <code>docker image ls</code> command. Give that\na try now:</p>\n<div class=\"highlight\"><pre><span></span>docker image ls\n</pre></div>\n<p>Our tag name should appear in the images list:</p>\n<div class=\"highlight\"><pre><span></span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nbottledock          latest              9afb4f01e0d3        About a minute ago   145MB\n</pre></div>\n<p>Our image is ready to load as a container so we can code a short\nBottle web app for testing and then further development.</p>\n<h2>Coding A Bottle Web App</h2>\n<p>It is time to code a simple \"Hello, World!\"-style Bottle app to test\nrunning Python code within our Docker container. Within the current\nproject directory, create a file named <code>app.py</code> with the following contents:</p>\n<div class=\"highlight\"><pre><span></span>import bottle\nfrom bottle import route, run\n\n\napp = bottle.default_app()\n\n\n@route('/')\ndef hello_world():\n    return \"Hello, world! (From Full Stack Python)\"\n\n\nif __name__ == \"__main__\":\n    run(host=\"0.0.0.0\", port=8080, debug=True, reloader=True)\n</pre></div>\n<p>The above code returns a simple \"Hello, world!\" message when\nexecuted by the Bottle development server and contacted by a client.</p>\n<p>We need just one more file to specify our <code>bottle</code> dependency. Create\na <code>requirements.txt</code> file within the same directory as <code>app.py</code>:</p>\n<div class=\"highlight\"><pre><span></span>bottle==0.12.13\n</pre></div>\n<p>Make sure both the <code>app.py</code> and <code>requirements.txt</code> file are saved then\nwe can give the code a try.</p>\n<h2>Running the Container</h2>\n<p>Now that we have our image in hand along with the Python code in a file\nwe can run the image as a container with the <code>docker run</code> command. Execute\nthe following command, making sure to replace the absolute path for the\nvolume to your own directory.</p>\n<div class=\"highlight\"><pre><span></span>docker run -p 5000:8080 --volume=/Users/matt/devel/py/blog-code-examples/docker-bottle-macapp bottledock\n</pre></div>\n<p>If you receive the error\n<code>python: can't open file 'app.py': [Errno 2] No such file or directory</code> then\nyou likely did not change <code>/Users/matt/devel/py/bottledocker</code> to the\ndirectory where your project files, especially <code>app.py</code>, are located.</p>\n<p><img src=\"/img/180604-bottle-docker/bottle-app-response.png\" width=\"100%\" class=\"shot rnd\" alt=\"Bottle web app responding to requests from within a Docker container.\"></p>\n<p>Everything worked when you see a simple text-based HTTP response like what\nis shown above in the screenshot of my Chrome browser.</p>\n<h2>What's Next?</h2>\n<p>We just installed Docker and wrote a Bottle web app to run inside a\ncontainer. That is just the beginning of how you can integrate Docker into\nyour workflow.</p>\n<p>Next up take a look at the <a href=\"/bottle.html\">Bottle</a>, <a href=\"/docker.html\">Docker</a>\nand <a href=\"/deployment.html\">deployment</a> pages for more tutorials.</p>\n<p>Questions? Let me know via a GitHub\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.</p>\n<p>Do you see a typo, syntax issue or just something that's confusing in this\nblog post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180604-bottle-docker-macos.markdown\">this page's source on GitHub</a>\nand submit a pull request with a fix or\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">file an issue ticket on GitHub</a>.</p>\n</div>"},
{"title": "Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS", "body": "<div class=\"c9\">\n<p><a href=\"/ubuntu.html\">Ubuntu Linux's</a> latest Long Term Support (LTS)\n<a href=\"/operating-systems.html\">operating system</a> version is\n<a href=\"http://releases.ubuntu.com/18.04/\">18.04</a> and was released in April 2018.\nThe 18.04 update is code named \"Bionic Beaver\" and it includes\n<a href=\"/python-2-or-3.html\">Python 3</a> by default. However, there are bunch of\ndependencies you will need to install to get this release set up as a\n<a href=\"/development-environments.html\">development environment</a>.</p>\n<p>In this tutorial we will get Python 3.6 configured with development system\npackages to start a new <a href=\"/flask.html\">Flask</a> web application project and\nrun it with <a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a>.</p>\n<h2>Our Tools</h2>\n<p>Our project will use the Ubuntu 18.04 release along with a few other\nlibraries. Note that if you are using the older 16.04 LTS release, there\nis also\n<a href=\"/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html\">a guide that will walk you through setting up that version</a>\nas your development environment.</p>\n<p>We will install the following tools as we step through the rest of\nthe sections in this tutorial:</p>\n<ul>\n<li><a href=\"http://releases.ubuntu.com/18.04/\">Ubuntu 18.04 LTS (Bionic Beaver)</a></li>\n<li><a href=\"/why-use-python.html\">Python</a> version\n<a href=\"https://docs.python.org/3/whatsnew/3.6.html\">3.6.5</a>\n(default in Ubuntu 18.04)</li>\n<li><a href=\"/flask.html\">Flask</a> web framework version\n<a href=\"http://flask.pocoo.org/docs/1.0/changelog/#version-1-0-2\">1.0.2</a></li>\n<li><a href=\"/green-unicorn-gunicorn.html\">Green Unicorn (Gunicorn)</a> version\n<a href=\"http://docs.gunicorn.org/en/stable/news.html\">19.8.1</a></li>\n</ul>\n<p>If you're running on Mac OS X or Windows, use virtualization software such\nas <a href=\"https://www.parallels.com/products/desktop/\">Parallels</a> or\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> with the\n<a href=\"http://releases.ubuntu.com/18.04/\">Ubuntu .iso file</a>. Either the amd64 or\ni386 version for 18.04 will work. I am using amd64 for development and testing\nin this tutorial.</p>\n<p>When you boot up to the Ubuntu desktop you should see a screen like this one.</p>\n<p><img src=\"/img/180614-ubuntu-flask-gunicorn/ubuntu-desktop.jpg\" width=\"100%\" class=\"shot rnd outl\"></p>\n<p>We're ready to get our development environment configured.</p>\n<h2>System Packages</h2>\n<p>Open up a terminal window to proceed with the setup.</p>\n<p>Use the following two commands to check which version of Python 3 is installed</p>\n<div class=\"highlight\"><pre><span></span>python3 --version\nwhich python3\n</pre></div>\n<p>The Python version should be 3.6.5 and the location <code>/usr/bin/python3</code>.</p>\n<p>Our Ubuntu installation requires a few system packages to do development\nrather than just run Python scripts. Run the following <code>apt-get</code> command\nand enter your <code>sudo</code> password to allow restricted system access.</p>\n<div class=\"highlight\"><pre><span></span>sudo apt-get install python3-dev python3-pip python3-virtualenv\n</pre></div>\n<p>We should see the following prompt requesting <code>sudo</code> access. Enter <code>y</code> to\nlet the system package manager complete the installation.</p>\n<div class=\"highlight\"><pre><span></span>Reading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  linux-headers-4.15.0-20 linux-headers-4.15.0-20-generic\n  linux-image-4.15.0-20-generic linux-modules-4.15.0-20-generic\n  linux-modules-extra-4.15.0-20-generic\nUse 'sudo apt autoremove' to remove them.\nThe following additional packages will be installed:\n  dh-python libexpat1-dev libpython3-dev libpython3.6-dev python3-setuptools\n  python3-wheel python3.6-dev\nSuggested packages:\n  python-setuptools-doc\nThe following NEW packages will be installed:\n  dh-python libexpat1-dev libpython3-dev libpython3.6-dev python3-dev\n  python3-pip python3-setuptools python3-virtualenv python3-wheel\n  python3.6-dev\n<span class=\"m\">0</span> upgraded, <span class=\"m\">10</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">11</span> not upgraded.\nNeed to get <span class=\"m\">3</span>,617 kB/3,661 kB of archives.\nAfter this operation, <span class=\"m\">20</span>.2 MB of additional disk space will be used.\nDo you want to continue? [Y/n] \n</pre></div>\n<p>The package manager will do the dirty work and should report when the\ninstallation finishes successfully.</p>\n<div class=\"highlight\"><pre><span></span>(...clipped a bunch of installation lines for brevity...)\nUnpacking python3-wheel (<span class=\"m\">0</span>.30.0-0.2) ...\nSetting up python3-wheel (<span class=\"m\">0</span>.30.0-0.2) ...\nSetting up python3-virtualenv (<span class=\"m\">15</span>.1.0+ds-1.1) ...\nSetting up python3-pip (<span class=\"m\">9</span>.0.1-2.3~ubuntu1) ...\nSetting up libexpat1-dev:amd64 (<span class=\"m\">2</span>.2.5-3) ...\nProcessing triggers for man-db (<span class=\"m\">2</span>.8.3-2) ...\nSetting up python3-setuptools (<span class=\"m\">39</span>.0.1-2) ...\nSetting up dh-python (<span class=\"m\">3</span>.20180325ubuntu2) ...\nSetting up libpython3.6-dev:amd64 (<span class=\"m\">3</span>.6.5-3) ...\nSetting up python3.6-dev (<span class=\"m\">3</span>.6.5-3) ...\nSetting up libpython3-dev:amd64 (<span class=\"m\">3</span>.6.5-3) ...\nSetting up python3-dev (<span class=\"m\">3</span>.6.5-3) ...\n</pre></div>\n<p>The packages we need are now installed. We can continue on to install our\nPython-specific dependencies.</p>\n<h2>Virtual environment</h2>\n<p>We installed <a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>\nand <a href=\"https://pypi.org/project/pip\">pip</a> to handle our\n<a href=\"/application-dependencies.html\">application dependencies</a>.\nWe can now use them to download and install Flask and Gunicorn.</p>\n<p>Create a directory to store your virtualenvs. Then create a new virtualenv\nwithin that directory.</p>\n<div class=\"highlight\"><pre><span></span># make sure pip and setuptools are the latest version\npip3 install --upgrade pip setuptools\n<span class=\"c1\"># the tilde (\"~\") specifies the user's home directory, such as \"/home/matt\"</span>\ncd ~\nmkdir venvs\n# specify the system python3 installation\npython3 -m venv venvs/flask1804\n</pre></div>\n<p>Activate the virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/flask1804/bin/activate\n</pre></div>\n<p>Our prompt will change when the virutalenv is activated.</p>\n<p><img src=\"/img/180614-ubuntu-flask-gunicorn/venv-activated.jpg\" width=\"100%\" class=\"shot rnd outl\"></p>\n<p>Our virtualenv is now activated with Python 3. We can install any\ndependencies we need such as Flask and Gunicorn.</p>\n<h2>Flask and Gunicorn</h2>\n<p>We're going to use <code>pip</code> within our new virtualenv but it's a good\nidea to update it to the latest version. We should also install the\n<code>wheel</code> package to remove installation warnings when <code>pip</code> tries to\nuse <a href=\"https://pythonwheels.com/\">Python wheels</a>, which are the newest\nstandard in an admittedly long line of Python distribution package\nmodels.</p>\n<div class=\"highlight\"><pre><span></span>pip install --upgrade pip\npip install wheel\n</pre></div>\n<p>We can now install Flask and Green Unicorn via the <code>pip</code> command.</p>\n<div class=\"highlight\"><pre><span></span>pip install flask gunicorn\n</pre></div>\n<p>Look for output similar to the following to ensure the libraries installed\nwithout an issue.</p>\n<div class=\"highlight\"><pre><span></span>(flask1804) <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"127f736666526770677c6667\">[email\u00a0protected]</a>:~$ pip install flask gunicorn\nCollecting flask\n  Using cached https://files.pythonhosted.org/packages/7f/e7/08578774ed4536d3242b14dacb4696386634607af824ea997202cd0edb4b/Flask-1.0.2-py2.py3-none-any.whl\nCollecting gunicorn\n  Using cached https://files.pythonhosted.org/packages/55/cb/09fe80bddf30be86abfc06ccb1154f97d6c64bb87111de066a5fc9ccb937/gunicorn-19.8.1-py2.py3-none-any.whl\nCollecting click&gt;=<span class=\"m\">5</span>.1 (from flask)\n  Using cached https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl\nCollecting Werkzeug&gt;=<span class=\"m\">0</span>.14 (from flask)\n  Using cached https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl\nCollecting itsdangerous&gt;=<span class=\"m\">0</span>.24 (from flask)\n  Using cached https://files.pythonhosted.org/packages/dc/b4/a60bcdba945c00f6d608d8975131ab3f25b22f2bcfe1dab221165194b2d4/itsdangerous-0.24.tar.gz\nCollecting Jinja2&gt;=<span class=\"m\">2</span>.10 (from flask)\n  Using cached https://files.pythonhosted.org/packages/7f/ff/ae64bacdfc95f27a016a7bed8e8686763ba4d277a78ca76f32659220a731/Jinja2-2.10-py2.py3-none-any.whl\nCollecting MarkupSafe&gt;=<span class=\"m\">0</span>.23 (from Jinja2&gt;=<span class=\"m\">2</span>.10-&gt;flask)\n  Using cached https://files.pythonhosted.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz\nBuilding wheels for collected packages: itsdangerous, MarkupSafe\n  Running setup.py bdist_wheel for itsdangerous ... done\n  Stored in directory: /home/matt/.cache/pip/wheels/2c/4a/61/5599631c1554768c6290b08c02c72d7317910374ca602ff1e5\n  Running setup.py bdist_wheel for MarkupSafe ... done\n  Stored in directory: /home/matt/.cache/pip/wheels/33/56/20/ebe49a5c612fffe1c5a632146b16596f9e64676768661e4e46\nSuccessfully built itsdangerous MarkupSafe\nInstalling collected packages: click, Werkzeug, itsdangerous, MarkupSafe, Jinja2, flask, gunicorn\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-1.0.2 gunicorn-19.8.1 itsdangerous-0.24\n</pre></div>\n<p>Create a new directory named <code>flask1804</code> under your home directory (not\nwithin the <code>venvs</code> subdirectory) that will store our Flask test project.\nChange directory into the new folder.</p>\n<div class=\"highlight\"><pre><span></span>mkdir ~/flask1804\ncd ~/flask1804\n</pre></div>\n<p>Create a new file named <code>__init__.py</code> within our <code>flaskproj</code> directory so\nwe can test to make sure Flask is working properly. I usually use\n<a href=\"/vim.html\">Vim</a> but <a href=\"/emacs.html\">Emacs</a> and other\n<a href=\"/development-environments.html\">development environments</a> work great as\nwell.</p>\n<p>Within <code>__init__.py</code> write the following code.</p>\n<div class=\"highlight\"><pre><span></span>from flask import Flask, Response\n\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return Response(\"It works!\"), 200\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</pre></div>\n<p>We could run our app with the Flask development server using the\n<code>python __init__.py</code> command. Instead run the Flask app with\nGunicorn. Go to the directory above the <code>flask1804</code> folder, in our\ncase we can enter <code>cd ~</code> then use the <code>gunicorn</code> command:</p>\n<div class=\"highlight\"><pre><span></span>gunicorn flask1804.app:app\n</pre></div>\n<p>We should see:</p>\n<div class=\"highlight\"><pre><span></span>[<span class=\"m\">2018</span>-06-15 <span class=\"m\">15</span>:54:31 -0400] [<span class=\"m\">5174</span>] [INFO] Starting gunicorn <span class=\"m\">19</span>.8.1\n[<span class=\"m\">2018</span>-06-15 <span class=\"m\">15</span>:54:31 -0400] [<span class=\"m\">5174</span>] [INFO] Listening at: http://127.0.0.1:8000 (<span class=\"m\">5174</span>)\n[<span class=\"m\">2018</span>-06-15 <span class=\"m\">15</span>:54:31 -0400] [<span class=\"m\">5174</span>] [INFO] Using worker: sync\n[<span class=\"m\">2018</span>-06-15 <span class=\"m\">15</span>:54:31 -0400] [<span class=\"m\">5177</span>] [INFO] Booting worker with pid: <span class=\"m\">5177</span>\n</pre></div>\n<p>Great now we can bring up our shell Flask app in the web browser at\nthe <code>localhost:8000</code> or <code>127.0.0.1:8000</code> address.</p>\n<p><img src=\"/img/180614-ubuntu-flask-gunicorn/it-works.jpg\" width=\"100%\" class=\"shot rnd outl\"></p>\n<p>Now you're ready for some real <a href=\"/flask.html\">Flask</a> development!</p>\n<h2>Ready to Code</h2>\n<p>That provides a quick configuration for getting started on 18.04 LTS\ndeveloping <a href=\"/flask.html\">Flask</a> applications with the\n<a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a> <a href=\"/wsgi-servers.html\">WSGI server</a>.</p>\n<p>Next up you should check out the following tutorials that use this\nFlask configuration:</p>\n<ul>\n<li><a href=\"/blog/respond-sms-text-messages-python-flask.html\">Responding to SMS Text Messages with Python &amp; Flask</a></li>\n<li><a href=\"/blog/hosted-monitoring-flask-web-apps.html\">How to Add Hosted Monitoring to Flask Web Applications</a>)</li>\n</ul>\n<p>Alternatively you can also determine what to code next in your Python\nproject by reading the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180614-flask-gunicorn-ubuntu-1804.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Add User Authentication to Flask Apps with Okta", "body": "<div class=\"c9\">\n<p>User authentication is a basic feature in\n<a href=\"/web-development.html\">web applications</a> so people can create and access\ntheir own accounts. Unfortunately, authentication is not always easy to\nset up and there are many ways to incorrectly implement login and logout\nfeatures. </p>\n<p>This tutorial walks through how to use the\n<a href=\"https://developer.okta.com/use_cases/authentication/\">secure identity authentication service</a>\ncalled <a href=\"https://developer.okta.com/\">Okta</a>, which is free for up to 1,000\nactive user accounts, to easily handle user data in <a href=\"/flask.html\">Flask</a>\napplications.</p>\n<h2>Our Tools</h2>\n<p>Python 3 is strongly recommended for building applications and this\ntutorial was built with Python 3.7 although earlier versions of Python 3\nshould also work fine. In addition to Python 3.x we will also use:</p>\n<ul>\n<li><a href=\"/flask.html\">Flask</a> web framework <a href=\"https://pypi.org/project/Flask/1.0.2/\">version 1.0.2</a></li>\n<li><a href=\"https://flask-oidc.readthedocs.io/en/latest/\">Flask-OIDC</a> where\nOIDC stands for \"OpenID Connect\". It provides support to use OpenID\nConnect in Flask applications.</li>\n<li><a href=\"https://pypi.org/project/okta/\">Okta Python helper library</a></li>\n<li>A free <a href=\"https://developer.okta.com\">Okta developer account</a></li>\n</ul>\n<p>All of the code in this blog post is provided as open source under the\nMIT license on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">flask-auth-okta directory of the blog-code-examples</a>\nrepository. Use and abuse the source code for applications you want to\nbuild.</p>\n<h2>Installing Dependencies</h2>\n<p>Create a new Python virtualenv for this project:</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv flaskauth\n</pre></div>\n<p>Activate the virtual environment with the <code>activate</code> script:</p>\n<div class=\"highlight\"><pre><span></span>. ./flaskauth/bin/activate\n</pre></div>\n<p>The command prompt should change after activation:</p>\n<p><img src=\"/img/181008-flask-okta/activate-virtualenv.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Activating the flaskauth virtualenv.\"></p>\n<p>Remember that you will have to activate the virtualenv in every terminal\nwindow where you want to use the dependencies contained in this virtualenv.</p>\n<p>Now we can install <a href=\"/flask.html\">Flask</a> and the Okta dependencies.</p>\n<div class=\"highlight\"><pre><span></span>pip install flask&gt;=1.0.2 flask-oidc&gt;=1.4.0 okta==0.0.4\n</pre></div>\n<p>Look for output similar to the following to confirm that the dependencies\nsuccessfully installed:</p>\n<div class=\"highlight\"><pre><span></span>...\nCollecting idna&lt;2.8,&gt;=2.5 (from requests&gt;=2.5.3-&gt;okta)\n  Downloading https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl (58kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 61kB 16.6MB/s \nCollecting urllib3&lt;1.24,&gt;=1.21.1 (from requests&gt;=2.5.3-&gt;okta)\n  Downloading https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl (133kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 143kB 14.0MB/s \nInstalling collected packages: MarkupSafe, Jinja2, click, itsdangerous, Werkzeug, flask, pyasn1, pyasn1-modules, rsa, httplib2, six, oauth2client, flask-oidc, chardet, certifi, idna, urllib3, requests, python-dateutil, okta\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for itsdangerous ... done\n  Running setup.py install for httplib2 ... done\n  Running setup.py install for flask-oidc ... done\n  Running setup.py install for okta ... done\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 certifi-2018.8.24 chardet-3.0.4 click-6.7 flask-1.0.2 flask-oidc-1.4.0 httplib2-0.11.3 idna-2.7 itsdangerous-0.24 oauth2client-4.1.3 okta-0.0.4 pyasn1-0.4.4 pyasn1-modules-0.2.2 python-dateutil-2.7.3 requests-2.19.1 rsa-4.0 six-1.11.0 urllib3-1.23\n</pre></div>\n<p>We installed our required Flask and the Okta dependencies so let's get to building\nthe Flask application.</p>\n<h2>Creating A Basic Flask App</h2>\n<p>The first step before adding authentication to our Flask application is\nto write some scaffolding functions. The authentication will hook into\nthese functions, such as <code>signin</code> and <code>signout</code>, to ensure the auth\nprocess works properly.</p>\n<p>Create a directory for your project named <code>thundercats</code>. Why <code>thundercats</code>?\nWhy <em>not</em> Thundercats?</p>\n<p>Within the <code>thundercats</code> directly create a file named <code>app.py</code> with the\nfollowing initial contents:</p>\n<div class=\"highlight\"><pre><span></span># imports for Flask\nfrom flask import Flask, Response\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/lair\")\ndef lair():\n    return Response(\"Thundercats (supposed to be hidden) lair.\")\n\n\n@app.route(\"/\")\ndef landing_page():\n    return Response(\"Thundercats, Thundercats, hoooooooooooo!\")\n</pre></div>\n<p>We can run our Flask app using the following command:</p>\n<div class=\"highlight\"><pre><span></span>set FLASK_APP=app.py\nflask run\n</pre></div>\n<p>Go to localhost:5000 in your web browser and you should see:</p>\n<p><img src=\"/img/181008-flask-okta/flask-app-running.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Simple version of Flask application running.\"></p>\n<p>Now go to our \"hidden lair\" at localhost:5000/lair/. Eventually this\npage should require authentication to access, but for now it appears\nwithout any login challenge:</p>\n<p><img src=\"/img/181008-flask-okta/flask-app-lair.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Part of Flask app that should be hidden behind a login page.\"></p>\n<p>Awesome, our basic app is up and running, let's get to the authentication\nfunctionality.</p>\n<h2>Auth-as-a-Service</h2>\n<p>Head to the <a href=\"https://developer.okta.com/signup\">Okta developers sign up page</a>.</p>\n<p><img src=\"/img/181008-flask-okta/okta-sign-up.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developers landing page for signing up.\"></p>\n<p>Sign up for a new account or log into your existing account.</p>\n<p><img src=\"/img/181008-flask-okta/okta-dev.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developer sign up flow.\"></p>\n<p>The interesting bit about the Okta developer sign up flow is that now you\nshould check your email to finish creating your account. Look for an email\nlike this one:</p>\n<p><img src=\"/img/181008-flask-okta/okta-email.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta sign up email.\"></p>\n<p>Click the \"Sign In\" button and log into developer account using\nthe temporary password found in the email. Set a new password and challenge\nquestion. Then pick an image to match your account login process.</p>\n<p><img src=\"/img/181008-flask-okta/okta-create-account.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta finish creating an account.\"></p>\n<p>Click the \"Create Account\" button and you will be wisked away to the\nOkta developer dashboard.</p>\n<p><img src=\"/img/181008-flask-okta/dev-dashboard.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developer dashboard.\"></p>\n<p>Find the \"Org URL\" as shown in the following image.</p>\n<p><img src=\"/img/181008-flask-okta/okta-dev-dashboard-url.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta Org URL value.\"></p>\n<p>We are going to use that URL in our secret credentials file so that\nour Flask web app can properly connect to the Okta service.</p>\n<p>Create a new file in your project directory named\n<code>openidconnect_secrets.json</code> with the following contents:</p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",\n    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",\n    \"auth_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/v1/authorize\",\n    \"token_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/v1/token\",\n    \"issuer\": \"{{ OKTA_ORG_URL }}/oauth2/default\",\n    \"userinfo_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/userinfo\",\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Replace the four <code>{{ OKTA_ORG_URL }}</code> placeholders with the Org URL value\nfound in your dashboard. We will fill in the rest of the placeholders with\nactual values as we proceed through the tutorial. My\n<code>openidconnect_secret.json</code> file would currently have the following\nvalues based on my developer dashboard Org URL.\n<strong>Remember that your URL values will be different!</strong></p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",\n    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",\n<span class=\"highlight\"><span class=\"err\"></span>    \"auth_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/authorize\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"token_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/token\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"issuer\": \"https://dev-860408.oktapreview.com/oauth2/default\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"userinfo_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/userinfo\",</span>\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Okay awesome, we have our Okta account set up so we can add the\nauthentication code to our Flask application.</p>\n<h2>Connecting Flask to Okta</h2>\n<p>We need to connect our Flask code to our new Okta account. The\nrecommended way of including variables such as account credentials\nin a Flask application is through\n<a href=\"http://flask.pocoo.org/docs/1.0/config/\">configuration handling</a>\nso we will use that in our account.</p>\n<p>Update the Flask code with the following highlighted lines.</p>\n<div class=\"highlight\"><pre><span></span># imports for both Flask and Okta connection\n<span class=\"highlight\">from os import environ</span>\nfrom flask import Flask, Response\n<span class=\"highlight\">from flask_oidc import OpenIDConnect</span>\n<span class=\"highlight\">from okta import UsersClient</span>\n\n\napp = Flask(__name__)\n<span class=\"highlight\"># secret credentials for Okta connection</span>\n<span class=\"highlight\">app.config[\"OIDC_CLIENT_SECRETS\"] = \"openidconnect_secrets.json\"</span>\n<span class=\"highlight\">app.config[\"OIDC_COOKIE_SECURE\"] = False</span>\n<span class=\"highlight\">app.config[\"OIDC_CALLBACK_ROUTE\"] = \"/oidc/callback\"</span>\n<span class=\"highlight\">app.config[\"OIDC_SCOPES\"] = [\"openid\", \"email\", \"profile\"]</span>\n<span class=\"highlight\">app.config[\"SECRET_KEY\"] = environ.get(\"SECRET_KEY\")</span>\n<span class=\"highlight\">app.config[\"OIDC_ID_TOKEN_COOKIE_NAME\"] = \"oidc_token\"</span>\n<span class=\"highlight\"># instantiate OpenID client to handle user session</span>\n<span class=\"highlight\">oidc = OpenIDConnect(app)</span>\n<span class=\"highlight\"># Okta client will determine if a user has an appropriate account</span>\n<span class=\"highlight\">okta_client = UsersClient(environ.get(\"OKTA_ORG_URL\"),</span>\n<span class=\"highlight\">                          environ.get(\"OKTA_AUTH_TOKEN\"))</span>\n\n\n@app.route(\"/lair\")\ndef lair():\n    return Response(\"Thundercats (supposed to be hidden) lair.\")\n\n\n@app.route(\"/\")\ndef landing_page():\n    return Response(\"Thundercats, Thundercats, hoooooooooooo!\")\n</pre></div>\n<p>We first add three import lines, one to pull values from environment\nvariables, and the next two imports to make it possible to use OpenID\nConnect and Okta in our application.</p>\n<p>The rest of the new code sets Flask application configuration\nvalues that can be used to instantiate the OpenID Connect and\nOkta clients.</p>\n<ul>\n<li><code>OIDC_CLIENT_SECRETS</code>: the location of the OpenID Connect secrets file</li>\n<li><code>OIDC_COOKIE_SECURE</code>: allows development mode for testing user login and\nregistration without SSL. Your application must set this to <code>True</code> in a\nproduction application.</li>\n<li><code>OIDC_CALLBACK_ROUTE</code>: URL in the web app for handling user logins</li>\n<li><code>OIDC_SCOPES</code>: what data to request about the user when they log in. Our\napplication requests the basic email, name and profile information</li>\n<li><code>SECRET_KEY</code>: this is a Flask setting to keep sessions secure. The key\nmust never be made public or your web application user sessions will be\ncompromised. </li>\n</ul>\n<p>Where do we get those application configuration values though? We\nneed to obtain them from our Okta account so go back to the\ndashboard to create a new OpenID Connect application.</p>\n<p><img src=\"/img/181008-flask-okta/select-applications.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Select applications on the Okta developer dashboard.\"></p>\n<p>OpenID Connect applications use a client ID and client secret in\nplace of traditional usernames and passwords. The client ID and\nclient secret will tell your authorization server to recognize your\napplication. Press the \"Add Application\" button.</p>\n<p><img src=\"/img/181008-flask-okta/add-application.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the Add Application button.\"></p>\n<p>On the new application screen choose \"Web\" and then press \"Next\".</p>\n<p><img src=\"/img/181008-flask-okta/web-application.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Choose a web application.\"></p>\n<p>On the next page there are numerous configuration options but only a\nfew values we need to fill in before we can get our credentials. Set\nthe following values to the <code>Name</code>, <code>Base URIs</code> and <code>Login redirect URIs</code>\nproperties:</p>\n<ol>\n<li><strong>ThunderFlaskCats</strong> for <code>Name</code></li>\n<li><strong>http://localhost:5000</strong> for <code>Base URIs</code></li>\n<li><strong>http://localhost:5000/oidc/callback</strong> for <code>Login redirect URIs</code></li>\n</ol>\n<p><img src=\"/img/181008-flask-okta/set-app-configuration.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Set application configuration values.\"></p>\n<p>Those are the three values you need to fill in for now so save the\napplication to create it.</p>\n<p>On the next page scroll down to find your client and secret keys.</p>\n<p><img src=\"/img/181008-flask-okta/client-credentials.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Save the client credentials for later use.\"></p>\n<p>Copy and paste the client ID and client secret into the following\nhighlighted lines to replace the <code>{{ OKTA_CLIENT_ID }}</code> and\n<code>{{ OKTA_CLIENT_SECRET }}</code> placeholders.</p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n<span class=\"highlight\"><span class=\"err\"></span>    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",</span>\n    \"auth_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/authorize\",\n    \"token_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/token\",\n    \"issuer\": \"https://dev-860408.oktapreview.com/oauth2/default\",\n    \"userinfo_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/userinfo\",\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Save the file and make sure to keep it out of version control as those\nsecret values need to stay secret.</p>\n<p>We have one more step in the Okta developer dashboard before we upgrade\nour Flask application with the authentication code: creating an\n<a href=\"https://developer.okta.com/use_cases/api_access_management/\">API authentication token</a>.\nGo to the API tab.</p>\n<p><img src=\"/img/181008-flask-okta/api-tab.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the API tab in the dashboard.\"></p>\n<p>Click the \"Create Token\" button.</p>\n<p><img src=\"/img/181008-flask-okta/create-token.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create an authentication token to access Okta.\"></p>\n<p>Name the token <code>ThunderFlaskCatsToken</code> and copy it. Save the token somewhere\nsafe as we will not be able to access it through the dashboard again. We\nare going to use this token when setting the <code>OKTA_AUTH_TOKEN</code> environment\nvariable in the next section of this tutorial.</p>\n<p>Okay, we finally have all the Okta service configuration and tokens in\nour <code>openidconnect_secret.json</code> file that we need to finish our application.</p>\n<h2>Protecting the Lair</h2>\n<p>Our configuration is set so update the <code>app.py</code> file with the following\nhighlighted lines:</p>\n<div class=\"highlight\"><pre><span></span># imports for both Flask and Okta connection\nfrom os import environ\n<span class=\"highlight\">from flask import Flask, Response, redirect, g, url_for</span>\nfrom flask_oidc import OpenIDConnect\nfrom okta import UsersClient\n\n\napp = Flask(__name__)\n# secret credentials for Okta connection\napp.config[\"OIDC_CLIENT_SECRETS\"] = \"openidconnect_secrets.json\"\napp.config[\"OIDC_COOKIE_SECURE\"] = False\napp.config[\"OIDC_CALLBACK_ROUTE\"] = \"/oidc/callback\"\napp.config[\"OIDC_SCOPES\"] = [\"openid\", \"email\", \"profile\"]\napp.config[\"SECRET_KEY\"] = environ.get(\"SECRET_KEY\")\napp.config[\"OIDC_ID_TOKEN_COOKIE_NAME\"] = \"oidc_token\"\n# instantiate OpenID client to handle user session\noidc = OpenIDConnect(app)\n# Okta client will determine if a user has an appropriate account\nokta_client = UsersClient(environ.get(\"OKTA_ORG_URL\"),\n                          environ.get(\"OKTA_AUTH_TOKEN\"))\n\n\n<span class=\"highlight\">@app.before_request</span>\n<span class=\"highlight\">def before_request():</span>\n<span class=\"highlight\">    if oidc.user_loggedin:</span>\n<span class=\"highlight\">        g.user = okta_client.get_user(oidc.user_getfield(\"sub\"))</span>\n<span class=\"highlight\">    else:</span>\n<span class=\"highlight\">        g.user = None</span>\n\n\n@app.route(\"/lair\")\n<span class=\"highlight\">@oidc.require_login</span>\ndef lair():\n    return Response(\"Thundercats (supposed to be hidden) lair.\")\n\n\n@app.route(\"/\")\ndef landing_page():\n    return Response(\"Thundercats, Thundercats, hoooooooooooo!\")\n\n\n<span class=\"highlight\">@app.route(\"/login\")</span>\n<span class=\"highlight\">@oidc.require_login</span>\n<span class=\"highlight\">def login():</span>\n<span class=\"highlight\">    return redirect(url_for(\".lair\"))</span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\">@app.route(\"/logout\")</span>\n<span class=\"highlight\">def logout():</span>\n<span class=\"highlight\">    oidc.logout()</span>\n<span class=\"highlight\">    return redirect(url_for(\".landing_page\"))</span>\n</pre></div>\n<p>The above new highlighted lines check whether or not a user is logged in\nbefore each request. If a route requires a logged in user due to the\n<code>@oidc.require_login</code> decorator then the user will be redirect to the\nsign in page. We also added routes under <code>/login</code> and <code>/logout</code> to make\nit possible to log in and out of the application.</p>\n<p>Set three environment variables so our application can use them when we\nrun it. Make sure the placeholders <code>ORG_URL</code> and <code>AUTH_TOKEN</code> are set with\nyour actual Org URL value and auth token from the Okta developer dashboard.</p>\n<p>On the command line run the following commands, making sure to replace\nany placeholder values with your own tokens and URLs:</p>\n<div class=\"highlight\"><pre><span></span># this tells Flask we want to run the built-in server in dev mode\nexport FLASK_ENV=development\n# make sure to use a very long random string here that cannot be guessed\nexport SECRET_KEY='a very long string with lots of numbers and letters'\n# this is the same Org URL found on your developer dashboard\n# for example, https://dev-860408.oktapreview.com\nexport OKTA_ORG_URL='ORG_URL'\n# this is the API authentication token we created\nexport OKTA_AUTH_TOKEN='AUTH_TOKEN'\n</pre></div>\n<p>Now re-run the Flask application:</p>\n<div class=\"highlight\"><pre><span></span>set FLASK_APP=app.py\nflask run\n</pre></div>\n<p>You should be in good shape if the development server starts up with output\nlike this:</p>\n<div class=\"highlight\"><pre><span></span>(flaskauth)$ flask run\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 415-920-546\n</pre></div>\n<p>Head to localhost:5000 in a browser where you are not already logged into\nyour Okta account (an incognito window of your web browser works great).</p>\n<p><img src=\"/img/181008-flask-okta/landing-page-incognito.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Landing page while in incognito mode.\"></p>\n<p>Let's test the redirect functionality when we try to go to the <code>/lair</code>\nroute by going to localhost:5000/lair. We get redirected to the Okta\nlogin page.</p>\n<p><img src=\"/img/181008-flask-okta/lair-redirect.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Getting redirected while in incognito mode.\"></p>\n<p>Enter your Okta developer username and password to log into your application.\nFor development purposes this will work fine for testing but obviously in a\nproduction application you will create other accounts for users to log into.</p>\n<p><img src=\"/img/181008-flask-okta/enter-lair.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Got into the lair URL after logging in.\"></p>\n<p>Let's tweak one more bit in our application to fix the glaring lack of\nexcitement in successfully completing the authentication code for this\ntutorial. Update the two highlighted lines to match what is in the code\nblock below:</p>\n<div class=\"highlight\"><pre><span></span># imports for both Flask and Okta connection\nfrom os import environ\nfrom flask import Flask, Response, redirect, g, url_for\nfrom flask_oidc import OpenIDConnect\nfrom okta import UsersClient\n\n\napp = Flask(__name__)\n# secret credentials for Okta connection\napp.config[\"OIDC_CLIENT_SECRETS\"] = \"openidconnect_secrets.json\"\napp.config[\"OIDC_COOKIE_SECURE\"] = False\napp.config[\"OIDC_CALLBACK_ROUTE\"] = \"/oidc/callback\"\napp.config[\"OIDC_SCOPES\"] = [\"openid\", \"email\", \"profile\"]\napp.config[\"SECRET_KEY\"] = environ.get(\"SECRET_KEY\")\napp.config[\"OIDC_ID_TOKEN_COOKIE_NAME\"] = \"oidc_token\"\n# instantiate OpenID client to handle user session\noidc = OpenIDConnect(app)\n# Okta client will determine if a user has an appropriate account\nokta_client = UsersClient(environ.get(\"OKTA_ORG_URL\"),\n                          environ.get(\"OKTA_AUTH_TOKEN\"))\n\n\n@app.before_request\ndef before_request():\n    if oidc.user_loggedin:\n        g.user = okta_client.get_user(oidc.user_getfield(\"sub\"))\n    else:\n        g.user = None\n\n\n@app.route(\"/lair\")\n@oidc.require_login\ndef lair():\n<span class=\"highlight\">    thundercats_lair = <span class=\"s1\">'&lt;html&gt;&lt;head&gt;&lt;title&gt;Thundercats, hoooo!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Thundercats now hidden lair.&lt;/h1&gt;&lt;iframe src=\"https://giphy.com/embed/ahXtBEbHiraxO\" width=\"480\" height=\"273\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=\"https://giphy.com/gifs/retro-cartoons-thundercats-ahXtBEbHiraxO\"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'</span></span>\n<span class=\"highlight\">    return Response(thundercats_lair)</span>\n\n\n@app.route(\"/\")\ndef landing_page():\n    return Response(\"Thundercats, Thundercats, hoooooooooooo!\")\n\n\n@app.route(\"/login\")\n@oidc.require_login\ndef login():\n    \"\"\"Force user to login and then redirect them to the lair.\n    \"\"\"\n    return redirect(url_for(\".lair\"))\n\n\n@app.route(\"/logout\")\ndef logout():\n    oidc.logout()\n    return redirect(url_for(\".landing_page\"))\n</pre></div>\n<p>Refresh the lair page.</p>\n<p><img src=\"/img/181008-flask-okta/refreshed-lair.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Lair page with new GIF.\"></p>\n<p>Alright that's just a little bit better! Go to localhost:5000/logout to\nunauthenticate your user. When you go to localhost:5000/lair again you\nwill now have to re-authenticate. </p>\n<h2>What Now?</h2>\n<p>We just built an example Flask application with user authentication via\nthe <a href=\"https://developer.okta.com/use_cases/api_access_management/\">Okta API</a>.</p>\n<p>Next up try the following tutorials to add other features to your\nFlask application:</p>\n<ul>\n<li><a href=\"/blog/respond-sms-text-messages-python-flask.html\">Responding to SMS Text Messages with Python &amp; Flask</a></li>\n<li><a href=\"/blog/hosted-monitoring-flask-web-apps.html\">How to Add Hosted Monitoring to Flask Web Applications</a></li>\n<li><a href=\"/blog/develop-flask-web-apps-docker-containers-macos.html\">Develop and Run Flask Apps within Docker Containers</a></li>\n</ul>\n<p>You can also determine what to code next in your Python project by reading\nthe <a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181008-add-user-auth-flask-okta.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Fresh Tutorials on Full Stack Python", "body": "<div class=\"c9\">\n<p>There are a bunch of\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>\non <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a> that were written\nsince the last time I sent out an email newsletter. These range from getting\nstarted with some popular open source projects to integrating third party\nAPIs to build authentication into Flask applications:</p>\n<ul>\n<li>\n<p><a href=\"https://www.fullstackpython.com/blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html\">Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS</a>\nshows you how to set up your Python and\n<a href=\"https://www.fullstackpython.com/flask.html\">Flask</a>\n<a href=\"https://www.fullstackpython.com/development-environments.html\">development environment</a>\non the latest <a href=\"https://www.fullstackpython.com/ubuntu.html\">Ubuntu</a>\nLong-Term Support (LTS) release.</p>\n</li>\n<li>\n<p><a href=\"https://www.fullstackpython.com/blog/add-user-authentication-flask-apps-okta.html\">How to Add User Authentication to Flask Apps with Okta</a>\ncovers using OpenID Connect and the Okta API in Flask applications\nto handle user authentication.</p>\n</li>\n<li>\n<p><a href=\"https://www.fullstackpython.com/blog/provision-ubuntu-1804-linux-servers-digitalocean.html\">How to Provision Ubuntu 18.04 LTS Linux Servers on DigitalOcean</a>\nis a quick tutorial for developers who have not seen how easy it is\nto spin up a virtual private server on DigitalOcean for hosting\ntheir Python applications.</p>\n</li>\n<li>\n<p><a href=\"https://www.fullstackpython.com/blog/first-steps-bottle-web-apps-docker-containers.html\">Running Bottle Apps in Docker Containers on macOS</a>\nprovides just the basics to start using\n<a href=\"https://www.fullstackpython.com/docker.html\">Docker</a> on macOS\nto run an example Flask web app.</p>\n</li>\n<li>\n<p><a href=\"https://www.fullstackpython.com/blog/explain-products-developers.html\">How to Explain Your Products to Developers</a>\nis based on a talk I gave to a group of technical founders and investors\nin Silicon Valley. It's a bit different from my usual step-by-step\ntutorial in that it gives strong advice based on my experience rather\nthan show how to use an open source project or integrate a third-party\nAPI.</p>\n</li>\n</ul>\n<p>Got questions or comments about\u00a0\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\u00a0\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\u00a0\nto let me know how to improve the site as I continue to\u00a0fill in the\n<a href=\"https://www.fullstackpython.com/table-of-contents.html\">table of contents</a>\u00a0\nwith\u00a0<a href=\"https://www.fullstackpython.com/change-log.html\">new pages</a>\u00a0and\u00a0\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "Adding Okta Authentication to an Existing Flask Web App", "body": "<div class=\"c9\">\n<p>It can be a lot of work to piece together a full authentication system\nif you have an existing <a href=\"/flask.html\">Flask</a> web application that you are\ncoding. <a href=\"https://developer.okta.com/signup/\">Okta</a> makes it much easier\nto drop-in a complete user authentication system without a lot of\nadditional effort. In this tutorial we will take the\n<a href=\"https://github.com/fullstackpython/flask-git-dashboard\">Flask Git Dashboard</a>\nproject as an example and add Okta to it.</p>\n<h2>Libraries</h2>\n<p><a href=\"/python-2-or-3.html\">Python 3</a> is required for this tutorial and we will\nalso use:</p>\n<ul>\n<li><a href=\"/flask.html\">Flask</a> web framework <a href=\"https://pypi.org/project/Flask/1.0.2/\">version 1.0.2</a></li>\n<li><a href=\"https://flask-oidc.readthedocs.io/en/latest/\">Flask-OIDC</a> where\nOIDC stands for \"OpenID Connect\". It provides support to use OpenID\nConnect in Flask applications.</li>\n<li><a href=\"https://pypi.org/project/okta/\">Okta Python helper library</a></li>\n<li>A free <a href=\"https://developer.okta.com\">Okta developer account</a></li>\n</ul>\n<p>All of the finished code in this blog post is provided as open source\nunder the MIT license on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">auth-existing-flask-app/finished directory of the blog-code-examples</a>\nrepository. Use and abuse the source code for your own applications.</p>\n<h2>Installing Dependencies</h2>\n<p>We will start out with an existing Flask web application. If you do not\nhave your own that you are modifying, clone this Git repository:</p>\n<div class=\"highlight\"><pre><span></span>git clone <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"395e504d795e504d514c5b175a5654\">[email\u00a0protected]</a>:fullstackpython/blog-code-examples.git\n</pre></div>\n<p>Next, create a new Python virtualenv for this project:</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv flaskauth\n</pre></div>\n<p>Activate the virtual environment with the <code>activate</code> script:</p>\n<div class=\"highlight\"><pre><span></span>. ./flaskauth/bin/activate\n</pre></div>\n<p>The command prompt should change after activation:</p>\n<p><img src=\"/img/181031-okta-exist-flask/activate-virtualenv.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Activating the flaskauth virtualenv.\"></p>\n<p>Remember that you will have to activate the virtualenv in every terminal\nwindow where you want to use the dependencies contained in this virtualenv.</p>\n<p>Change into the project directory within the <code>block-code-examples</code> Git\nrepository that you cloned.</p>\n<div class=\"highlight\"><pre><span></span>cd blog-code-examples/auth-existing-flask-app/start/\n</pre></div>\n<p>Now we can install the dependencies for the existing project.</p>\n<div class=\"highlight\"><pre><span></span>pip install -r requirements.txt\n</pre></div>\n<p>Look for output similar to the following to confirm that the dependencies\nsuccessfully installed:</p>\n<div class=\"highlight\"><pre><span></span>...\nCollecting amqp&lt;3.0,&gt;=2.1.4 (from kombu&lt;5.0,&gt;=4.0.2-&gt;Celery==4.1.0-&gt;-r requirements.txt (line 4))\n  Downloading https://files.pythonhosted.org/packages/7f/cf/12d4611fc67babd4ae250c9e8249c5650ae1933395488e9e7e3562b4ff24/amqp-2.3.2-py2.py3-none-any.whl (48kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 10.7MB/s \nCollecting six&gt;=1.5 (from python-dateutil-&gt;alembic&gt;=0.6-&gt;Flask-Migrate==2.2.0-&gt;-r requirements.txt (line 2))\n  Using cached https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl\nCollecting vine&gt;=1.1.3 (from amqp&lt;3.0,&gt;=2.1.4-&gt;kombu&lt;5.0,&gt;=4.0.2-&gt;Celery==4.1.0-&gt;-r requirements.txt (line 4))\n  Downloading https://files.pythonhosted.org/packages/10/50/5b1ebe42843c19f35edb15022ecae339fbec6db5b241a7a13c924dabf2a3/vine-1.1.4-py2.py3-none-any.whl\nInstalling collected packages: click, itsdangerous, Werkzeug, MarkupSafe, Jinja2, Flask, SQLAlchemy, Flask-SQLAlchemy, Mako, python-editor, six, python-dateutil, alembic, Flask-Migrate, billiard, pytz, vine, amqp, kombu, Celery, redis, WTForms\n  Running setup.py install for MarkupSafe ... done\n  Running setup.py install for SQLAlchemy ... done\n  Running setup.py install for Mako ... done\n  Running setup.py install for python-editor ... done\n  Running setup.py install for alembic ... done\n  Running setup.py install for billiard ... done\n  Running setup.py install for WTForms ... done\nSuccessfully installed Celery-4.1.0 Flask-1.0.2 Flask-Migrate-2.2.0 Flask-SQLAlchemy-2.3.2 Jinja2-2.10 Mako-1.0.7 MarkupSafe-1.0 SQLAlchemy-1.2.12 WTForms-2.1 Werkzeug-0.14.1 alembic-1.0.1 amqp-2.3.2 billiard-3.5.0.4 click-7.0 itsdangerous-1.1.0 kombu-4.2.1 python-dateutil-2.7.5 python-editor-1.0.3 pytz-2018.7 redis-2.10.6 six-1.11.0 vine-1.1.4\n</pre></div>\n<p>We need a couple of additional dependencies for our project to\nwork, <code>flask-oidc</code> and <code>okta</code>:</p>\n<div class=\"highlight\"><pre><span></span>pip install flask-oidc&gt;=1.4.0 okta==0.0.4\n</pre></div>\n<p>The dependencies are now properly installed into our virtual environment.\nLet's test out the application to see if we can get it running properly.</p>\n<div class=\"highlight\"><pre><span></span>export FLASK_APP=flaskdash.py\nexport FLASK_ENV=development\nflask run\n</pre></div>\n<p>We should see the application start up with some default development time\nvalues:</p>\n<div class=\"highlight\"><pre><span></span> * Serving Flask app \"flaskdash.py\" (lazy loading)\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: <span class=\"m\">203</span>-814-092\n</pre></div>\n<p>Head to localhost:5000 in your web browser and we should see a\nwork-in-progress dashboard:</p>\n<p><img src=\"/img/181031-okta-exist-flask/flask-dashboard.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Dashboard provided by existing Flask application.\"></p>\n<p>It's time to get to setting up an Okta developer account so we can get the\nappropriate configuration information for our application.</p>\n<h2>Okta for Authentication</h2>\n<p>Head to the <a href=\"https://developer.okta.com/signup\">Okta developers sign up page</a>.</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-sign-up.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developers landing page for signing up.\"></p>\n<p>Sign up for a new account or log into your existing account.</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-dev.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developer sign up flow.\"></p>\n<p>The interesting bit about the Okta developer sign up flow is that now you\nshould check your email to finish creating your account. Look for an email\nlike this one:</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-email.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta sign up email.\"></p>\n<p>Click the \"Sign In\" button and log into developer account using\nthe temporary password found in the email. Set a new password and challenge\nquestion. Then pick an image to match your account login process.</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-create-account.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta finish creating an account.\"></p>\n<p>Click the \"Create Account\" button and you will be wisked away to the\nOkta developer dashboard.</p>\n<p><img src=\"/img/181031-okta-exist-flask/dev-dashboard.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta developer dashboard.\"></p>\n<p>Find the \"Org URL\" as shown in the following image.</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-dev-dashboard-url.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Okta Org URL value.\"></p>\n<p>We are going to use that URL in our secret credentials file so that\nour Flask web app can properly connect to the Okta service.</p>\n<p>Create a new file in your project directory named\n<code>openidconnect_secrets.json</code> with the following contents:</p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",\n    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",\n    \"auth_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/v1/authorize\",\n    \"token_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/v1/token\",\n    \"issuer\": \"{{ OKTA_ORG_URL }}/oauth2/default\",\n    \"userinfo_uri\": \"{{ OKTA_ORG_URL }}/oauth2/default/userinfo\",\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Replace the four <code>{{ OKTA_ORG_URL }}</code> placeholders with the Org URL value\nfound in your dashboard. We will fill in the rest of the placeholders with\nactual values as we proceed through the tutorial. My\n<code>openidconnect_secret.json</code> file would currently have the following\nvalues based on my developer dashboard Org URL.\n<strong>Remember that your URL values will be different!</strong></p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",\n    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",\n<span class=\"highlight\"><span class=\"err\"></span>    \"auth_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/authorize\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"token_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/token\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"issuer\": \"https://dev-860408.oktapreview.com/oauth2/default\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"userinfo_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/userinfo\",</span>\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Okay awesome, we have our Okta account set up so we can add the\nauthentication code to our Flask application.</p>\n<h2>Updating the Flask App with Okta</h2>\n<p>We need to connect our Flask code to our new Okta account. The\nrecommended way of including variables such as account credentials\nin a Flask application is through\n<a href=\"http://flask.pocoo.org/docs/1.0/config/\">configuration handling</a>.</p>\n<p>Update <code>config.py</code> the Flask code with the following highlighted lines.</p>\n<div class=\"highlight\"><pre><span></span>import os\n\n\nclass Config(object):\n    SECRET_KEY = os.getenv('SECRET_KEY') or 'development key'\n\n    # Redis\n    REDIS_SERVER = os.getenv('REDIS_SERVER') or 'localhost'\n    REDIS_PORT = os.getenv('REDIS_PORT') or 6379\n    REDIS_DB = os.getenv('REDIS_DB') or 1\n    REDIS_URL = 'redis://{}:{}'.format(REDIS_SERVER, REDIS_PORT)\n\n    # Celery task queue\n    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL') or REDIS_URL\n    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND') or REDIS_URL\n\n    # database settings\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL') or \\\n      'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)),\n      'flaskdash.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n<span class=\"highlight\"></span>\n<span class=\"highlight\">    OIDC_CLIENT_SECRETS = \"openidconnect_secrets.json\"</span>\n<span class=\"highlight\">    OIDC_COOKIE_SECURE = False</span>\n<span class=\"highlight\">    OIDC_CALLBACK_ROUTE = \"/oidc/callback\"</span>\n<span class=\"highlight\">    OIDC_SCOPES = [\"openid\", \"email\", \"profile\"]</span>\n<span class=\"highlight\">    OIDC_ID_TOKEN_COOKIE_NAME = \"oidc_token\"</span>\n</pre></div>\n<p>We first add three import lines, one to pull values from environment\nvariables, and the next two imports to make it possible to use OpenID\nConnect and Okta in our application.</p>\n<p>The rest of the new code sets Flask application configuration\nvalues that can be used to instantiate the OpenID Connect and\nOkta clients.</p>\n<ul>\n<li><code>OIDC_CLIENT_SECRETS</code>: the location of the OpenID Connect secrets file</li>\n<li><code>OIDC_COOKIE_SECURE</code>: allows development mode for testing user login and\nregistration without SSL. Your application must set this to <code>True</code> in a\nproduction application.</li>\n<li><code>OIDC_CALLBACK_ROUTE</code>: URL in the web app for handling user logins</li>\n<li><code>OIDC_SCOPES</code>: what data to request about the user when they log in. Our\napplication requests the basic email, name and profile information</li>\n<li><code>SECRET_KEY</code>: this is a Flask setting to keep sessions secure. The key\nmust never be made public or your web application user sessions will be\ncompromised. </li>\n</ul>\n<p>Where do we get those application configuration values though? We\nneed to obtain them from our Okta account so go back to the\ndashboard to create a new OpenID Connect application.</p>\n<p><img src=\"/img/181031-okta-exist-flask/select-applications.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Select applications on the Okta developer dashboard.\"></p>\n<p>OpenID Connect applications use a client ID and client secret in\nplace of traditional usernames and passwords. The client ID and\nclient secret will tell your authorization server to recognize your\napplication. Press the \"Add Application\" button.</p>\n<p><img src=\"/img/181031-okta-exist-flask/add-application.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the Add Application button.\"></p>\n<p>On the new application screen choose \"Web\" and then press \"Next\".</p>\n<p><img src=\"/img/181031-okta-exist-flask/web-application.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Choose a web application.\"></p>\n<p>On the next page there are numerous configuration options but only a\nfew values we need to fill in before we can get our credentials. Set\nthe following values to the <code>Name</code>, <code>Base URIs</code> and <code>Login redirect URIs</code>\nproperties:</p>\n<ol>\n<li><strong>FlaskApp</strong> for <code>Name</code></li>\n<li><strong>http://localhost:5000</strong> for <code>Base URIs</code></li>\n<li><strong>http://localhost:5000/oidc/callback</strong> for <code>Login redirect URIs</code></li>\n</ol>\n<p><img src=\"/img/181031-okta-exist-flask/set-app-configuration.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Set application configuration values.\"></p>\n<p>Those are the three values you need to fill in for now so save the\napplication to create it.</p>\n<p>On the next page scroll down to find your client and secret keys.</p>\n<p><img src=\"/img/181031-okta-exist-flask/client-credentials.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Save the client credentials for later use.\"></p>\n<p>Copy and paste the client ID and client secret into the following\nhighlighted lines to replace the <code>{{ OKTA_CLIENT_ID }}</code> and\n<code>{{ OKTA_CLIENT_SECRET }}</code> placeholders.</p>\n<div class=\"highlight\"><pre><span></span>{\n  \"web\": {\n<span class=\"highlight\"><span class=\"err\"></span>    \"client_id\": \"{{ OKTA_CLIENT_ID }}\",</span>\n<span class=\"highlight\"><span class=\"err\"></span>    \"client_secret\": \"{{ OKTA_CLIENT_SECRET }}\",</span>\n    \"auth_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/authorize\",\n    \"token_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/v1/token\",\n    \"issuer\": \"https://dev-860408.oktapreview.com/oauth2/default\",\n    \"userinfo_uri\": \"https://dev-860408.oktapreview.com/oauth2/default/userinfo\",\n    \"redirect_uris\": [\n      \"http://localhost:5000/oidc/callback\"\n    ]\n  }\n}\n</pre></div>\n<p>Save the file and make sure to keep it out of version control as those\nsecret values need to stay secret.</p>\n<p>We have one more step in the Okta developer dashboard before we upgrade\nour Flask application with the authentication code: creating an\n<a href=\"https://developer.okta.com/use_cases/api_access_management/\">API authentication token</a>.\nGo to the API tab.</p>\n<p><img src=\"/img/181008-flask-okta/api-tab.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Click the API tab in the dashboard.\"></p>\n<p>Click the \"Create Token\" button.</p>\n<p><img src=\"/img/181008-flask-okta/create-token.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create an authentication token to access Okta.\"></p>\n<p>Name the token <code>FlaskToken</code> and copy it. Save the token somewhere\nsafe as we will not be able to access it through the dashboard again. We\nare going to use this token when setting the <code>OKTA_AUTH_TOKEN</code> environment\nvariable in the next section of this tutorial.</p>\n<p>Okay, we finally have all the Okta service configuration and tokens in\nour <code>openidconnect_secret.json</code> file that we need to finish our application.</p>\n<p>Update <code>app/__init__.py</code> with these highlighted lines:</p>\n<div class=\"highlight\"><pre><span></span>import redis\n<span class=\"highlight\">from os import environ</span>\nfrom flask import Flask\nfrom app.utils import make_celery\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n<span class=\"highlight\">from flask_oidc import OpenIDConnect</span>\n<span class=\"highlight\">from okta import UsersClient</span>\n\n\napp = Flask(__name__, static_url_path='/static')\napp.config.from_object(Config)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n\n# connect to Redis instance\nredis_db = redis.StrictRedis(host=app.config['REDIS_SERVER'],\n                             port=app.config['REDIS_PORT'],\n                             db=app.config['REDIS_DB'])\ncelery = make_celery(app)\n\n\n<span class=\"highlight\"># instantiate OpenID client to handle user session</span>\n<span class=\"highlight\">oidc = OpenIDConnect(app)</span>\n<span class=\"highlight\"># Okta client will determine if a user has an appropriate account</span>\n<span class=\"highlight\">okta_client = UsersClient(environ.get(\"OKTA_ORG_URL\"),</span>\n<span class=\"highlight\">                          environ.get(\"OKTA_AUTH_TOKEN\"))</span>\n\n\nfrom app import routes\n</pre></div>\n<p>We can now access the <code>okta_client</code> in our routes. Open <code>app/routes.py</code>\nand update the following lines:</p>\n<div class=\"highlight\"><pre><span></span>from flask import send_from_directory, render_template\nfrom flask import redirect, g\n<span class=\"highlight\">from app import app, oidc, okta_client</span>\n\n\n<span class=\"highlight\">@app.before_request</span>\n<span class=\"highlight\">def before_request():</span>\n<span class=\"highlight\">    if oidc.user_loggedin:</span>\n<span class=\"highlight\">        g.user = okta_client.get_user(oidc.user_getfield(\"sub\"))</span>\n<span class=\"highlight\">    else:</span>\n<span class=\"highlight\">        g.user = None</span>\n\n\n@app.route('/js/&lt;path:path&gt;')\ndef send_js(path):\n    return send_from_directory('js', path)\n\n\n@app.route('/css/&lt;path:path&gt;')\ndef send_css(path):\n    return send_from_directory('css', path)\n\n\n@app.route(\"/\")\ndef dashboard():\n    return render_template('dashboard.html')\n\n\n@app.route(\"/repositories\")\n<span class=\"highlight\">@oidc.require_login</span>\ndef repositories():\n    return render_template('repositories.html')\n\n\n<span class=\"highlight\">@app.route(\"/login\")</span>\n<span class=\"highlight\">@oidc.require_login</span>\n<span class=\"highlight\">def login():</span>\n<span class=\"highlight\">    return redirect(url_for(\".repositories\"))</span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\"></span>\n<span class=\"highlight\">@app.route(\"/logout\")</span>\n<span class=\"highlight\">def logout():</span>\n<span class=\"highlight\">    oidc.logout()</span>\n<span class=\"highlight\">    return redirect(url_for(\".landing_page\"))</span>\n</pre></div>\n<p>The above new highlighted lines check whether or not a user is logged in\nbefore each request. If a route requires a logged in user due to the\n<code>@oidc.require_login</code> decorator then the user will be redirect to the\nsign in page. We also added routes under <code>/login</code> and <code>/logout</code> to make\nit possible to log in and out of the application.</p>\n<p>Set three environment variables so our application can use them when we\nrun it. Make sure the placeholders <code>ORG_URL</code> and <code>AUTH_TOKEN</code> are set with\nyour actual Org URL value and auth token from the Okta developer dashboard.</p>\n<p>On the command line run the following commands, making sure to replace\nany placeholder values with your own tokens and URLs:</p>\n<div class=\"highlight\"><pre><span></span># this tells Flask we want to run the built-in server in dev mode\nexport FLASK_ENV=development\n# make sure to use a very long random string here that cannot be guessed\nexport SECRET_KEY='a very long string with lots of numbers and letters'\n# this is the same Org URL found on your developer dashboard\n# for example, https://dev-860408.oktapreview.com\nexport OKTA_ORG_URL='ORG_URL'\n# this is the API authentication token we created\nexport OKTA_AUTH_TOKEN='AUTH_TOKEN'\n</pre></div>\n<p>Now re-run the Flask application:</p>\n<div class=\"highlight\"><pre><span></span>set FLASK_APP=app.py\nflask run\n</pre></div>\n<p>You should be in good shape if the development server starts up with output\nlike this:</p>\n<div class=\"highlight\"><pre><span></span>(flaskauth)$ flask run\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 415-920-546\n</pre></div>\n<p>Head to localhost:5000 in a browser where you are not already logged into\nyour Okta account (an incognito window of your web browser works great).</p>\n<p><img src=\"/img/181031-okta-exist-flask/dashboard-incognito.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Dashboard while in incognito mode.\"></p>\n<p>Let's test the redirect functionality when we try to go to the <code>/dashboard</code>\nroute by going to localhost:5000/repositories. We get redirected to the Okta\nlogin page.</p>\n<p><img src=\"/img/181031-okta-exist-flask/okta-redirect.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Getting redirected while in incognito mode.\"></p>\n<p>Enter your Okta developer username and password to log into your application.\nFor development purposes this will work fine for testing but obviously in a\nproduction application you will create other accounts for users to log into.</p>\n<p><img src=\"/img/181031-okta-exist-flask/repositories-enter.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Got into the repositories page after logging in.\"></p>\n<p>To unauthenticate your user go to localhost:5000/logout. When you go back\nto localhost:5000/repositories again you will now have to re-authenticate. </p>\n<h2>What Now?</h2>\n<p>We configured an existing <a href=\"/flask.html\">Flask</a> application to use Okta for\nuser authentication and identity management via the\n<a href=\"https://developer.okta.com/use_cases/api_access_management/\">Okta API</a>.</p>\n<p>Next you can try one of the following tutorials to add other features to\nthe Flask application:</p>\n<ul>\n<li><a href=\"/blog/hosted-monitoring-flask-web-apps.html\">How to Add Hosted Monitoring to Flask Web Applications</a></li>\n<li><a href=\"/blog/develop-flask-web-apps-docker-containers-macos.html\">Develop and Run Flask Apps within Docker Containers</a></li>\n<li><a href=\"/blog/respond-sms-text-messages-python-flask.html\">Responding to SMS Text Messages with Python &amp; Flask</a></li>\n</ul>\n<p>You can also determine what to code next in your Python project by reading\nthe <a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181031-auth-existing-flask-app.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "How to Provision Ubuntu 18.04 LTS Linux Servers on DigitalOcean", "body": "<div class=\"c9\">\n<p><a href=\"/web-development.html\">Python web applications</a> need to be\n<a href=\"/deployment.html\">deployed</a> to a production <a href=\"/servers.html\">server</a> or\n<a href=\"/platform-as-a-service.html\">service</a> so your users have access to\nthe application.</p>\n<p><a href=\"https://do.co/fullstackpython\">DigitalOcean</a> is one such service\nthat makes it easy to immediately get access to initially free servers\nwhich are low cost (~$5 per month depending on the resources) to continue\nusing after the first few months.</p>\n<p>In this tutorial we'll learn how to quickly sign up and spin up an\n<a href=\"/ubuntu.html\">Ubuntu</a>-based Linux server that only you will have\naccess to based on a private SSH key.</p>\n<h2>Obtain Your Virtual Server</h2>\n<p>These steps sign you up for a DigitalOcean account and guide you through\nprovisioning a virtual private server called a \"Droplet\" for $5/month which\nwe configure throughout the rest of the book.</p>\n<p>Point your web browser to\n<a href=\"https://do.co/fullstackpython\">Digitalocean.com's registration page</a>.\nNote that this link uses a referral code which gives you $100 in free\ncredit. Feel free to just go to\n<a href=\"https://www.digitalocean.com/\">digitalocean.com</a> if you\ndo not want to use the referral link (you will not get the $100 in credit\nthough). Their landing page will look something like the following image.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/do-landing-page.jpg\" class=\"shot rnd outl\" alt=\"DigitalOcean landing page.\" width=\"100%\"></p>\n<p>Register for a new DigitalOcean account. Fill out the appropriate\ninformation. When your account is registered and active you can create\na new DigitalOcean server, which they call \"droplets\".</p>\n<p>After you finish the registration process you will be able to start\ncreating DigitalOcean servers. Select the \"Create\" button which\nopens a drop-down menu. Choose \"Droplets\" to go to the \"Create Droplets\"\npage.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/create-droplet.png\" class=\"shot rnd outl\" width=\"100%\"></p>\n<p>The new droplet configuration screen will appear and look like\nthe following image. The default Ubuntu instance is 16.04, but\nwe will use the newer LTS release 18.04 in this book.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/create-droplets-page.jpg\" class=\"shot\" width=\"100%\"></p>\n<p>Select the 1 GB memory-sized server for $5 per month. This instance\nsize should be perfect for prototypes, side projects and minimum\nviable products. Feel free to choose a larger instance size if you\nwant more memory and resources for running your application.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/create-droplet-size.jpg\" class=\"shot\" width=\"100%\"></p>\n<p>Scroll down and choose the data center region where you want your\ninstance to be located. I typically choose New York because I am\non the East Coast of the United Statest in Washington, D.C., and you will\nwant the server to be closest to your users' location.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/choose-region.png\" class=\"shot\" alt=\"Choose the data center region closest to your customers.\" width=\"100%\"></p>\n<p>Next, scroll down and click \"New SSH Key\". Copy and paste in the contents\nof your <strong>public</strong> SSH key. If you do not yet have an SSH key here are a\ncouple of guides that will walk you through creating one:</p>\n<ul>\n<li><a href=\"/blog/ssh-keys-macos-sierra.html\">Creating SSH keys on macOS</a></li>\n<li><a href=\"/blog/ssh-keys-ubuntu-linux.html\">Creating SSH keys on Ubuntu Linux</a></li>\n</ul>\n<p>You can see the contents of a public key using the <code>cat</code> command. For\nexample on my system the command:</p>\n<div class=\"highlight\"><pre><span></span>cat root.pub\n</pre></div>\n<p>Outputs the contents of my public key:</p>\n<div class=\"highlight\"><pre><span></span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqAY/Le17HZpa4+eSoh2L9FMYaQ7EnLOGkYbcbsiQNpnF4FTAemF7tbvMvjpVLU6P9AVGs6qEeJdgTE2gH8fq881AUsQ8it1gla2oAlc+vOZmqWPYaLIl5g9DkGwvbITXayobDcw9wTN5tOITOxp3BV5jqanqoqDAPH1RGfT6A5vkJFsmu4w7cPsn9tiqfZZdge3WkpMNT1M3ou+ogrAwE6Ra531s3zYVG9y1688BGdYzbQFfU0+Pou6Z43Do6xbh2hAfQ5hUuTG0OrE3b/yhGcxEWz0Y9+wPGmxm3/0ioTfMWUG3LOQn+oMtKX/PXX/qOJuUjszbqYBvSYS3kv2IVFGV2KEIKC1xgUDfw+HOV4HlIosIbc97zY83m0Ft+tFavPaiQYrar3wCsVfRUltSR4EwNnLmvNYeMVSS8jSP2ZSPwbL8GO7xxAAS9Oy12set1f4OxdPhEUB9rEfAssU1mE6J5eq+Drs8KX04OasLSLt7kP7wWA27I9pU/y9NRHxEsO0YbLG7DzfHGl4QVXwDjIA5GpwjQMwZLt+lyGc4hpnuXg+IUR6MXI90Hh64ch32nSC8j/hjnWCWgj8Cyuc4Rd/2OtO5dHpbjSyU5Yza2lzIqFbFRo7aQNaIkBIioJnc1d6mrg9mLxfd5Ef2ez9bUjqcq4K7uH/JAm0H2Vk1VFQ== <a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"bed3dfcacad6dbc990d3dfd5dfd7fed9d3dfd7d290ddd1d3\">[email\u00a0protected]</a>\n</pre></div>\n<p>Copy and paste this key into the DigitalOcean modal window and give it\na memorable name for future reference:</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/root-key.png\" class=\"shot rnd outl\" alt=\"Paste in the public root key into the modal window.\" width=\"100%\"></p>\n<p>Optionally, give your server a nickname such as <code>flask-deploy-manual</code>.\nThen click the big green \"Create\" button at the bottom of the screen.</p>\n<p>The server provisioning process will begin and our Ubuntu Linux 18.04\nLTS-powered will soon be ready to go. </p>\n<p>Ubuntu 18.04 is the current Long Term Support (LTS) release and has a\n5 year support lifecycle. This version will receive security updates until\nApril 2023 as shown on the\n<a href=\"https://www.ubuntu.com/info/release-end-of-life\">Ubuntu release end-of-life</a>\npage.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/ubuntu-lts-releases.png\" class=\"shot rnd outl\" alt=\"Ubuntu end of life schedule for all releases.\" width=\"100%\"></p>\n<p>You should now be back on the DigitalOcean dashboard.</p>\n<p><img src=\"/img/181014-digitalocean-ubuntu/ready-to-deploy.png\" class=\"shot rnd outl\" alt=\"New Ubuntu server ready for access.\" width=\"100%\"></p>\n<p>Our server is now up and ready for SSH access.</p>\n<p>Connect to the server using the IP address associated with it:</p>\n<div class=\"highlight\"><pre><span></span># make sure to replace 192.168.1.1 with your server's IP address\n# and the \"private_key\" name with the name of your private key\nssh -i ./private_key 192.168.1.1\n</pre></div>\n<p>You should now be connected to your new server and can proceed\nwith development or deployment.</p>\n<h2>What's Next?</h2>\n<p>We just stood up a new virtual private server on DigitalOcean that can be\nused as a production or development environment.</p>\n<p>Next up I recommend either configuring the development environment or\ndeploying your application with one of the following tutorials:</p>\n<ul>\n<li><a href=\"/blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html\">Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS</a></li>\n<li><a href=\"/blog/make-phone-calls-python.html\">How to Make Phone Calls in Python</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=vGphzPLemZE\">5 ways to deploy your Python web app from PyCon US 2017</a></li>\n</ul>\n<p>You can also figure out what to code next in your Python project by reading\nthe <a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181014-digitalocean-ubuntu-1804.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Developer-led Sales for Startups", "body": null},
{"title": "Basic Data Types in Python 3: Booleans", "body": "<div class=\"c9\">\n<p>Welcome back to our ongoing series of blog posts on basic data types in\n<a href=\"/python-2-or-3.html\">Python 3</a>! Last time, we explored the functionality of\n<a href=\"/blog/python-basic-data-types-strings.html\">strings</a>. Today, we dive in to\nanother key data type - booleans. Booleans (and \"boolean logic\") are an\nimportant concept in programming, representing the concept of \"true\" and \"false\".</p>\n<p>If you're learning Python, you might also want to\n<a href=\"https://www.twilio.com/quest/download\">check out TwilioQuest 3</a>.\nYou'll learn about basic data types like the boolean, and much more about\nPython programming.</p>\n<p>Ready to learn how to use booleans in Python 3? Let's get started!</p>\n<h2>Booleans in Python 3</h2>\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not\">Booleans</a>\nare a concept that exists in every programming language. A boolean represents\nthe idea of \"true\" or \"false\". When you are writing a program, there\nare often circumstances where you want to execute different code in different\nsituations. Booleans enable our code to do just that.</p>\n<p>You can declare a boolean value in your code using the keywords <code>True</code> and\n<code>False</code> (note the uppercase). The following code would create two boolean\nvalues and assign them to variables.</p>\n<div class=\"highlight\"><pre><span></span>mullet_looks_good = False\npython_is_fun = True\n</pre></div>\n<p>More commonly, a boolean value is returned as a result of some kind of\ncomparison. The following code example would store a boolean value of <code>False</code>\nin the <code>have_same_name</code> variable after using the\n<a href=\"https://docs.python.org/3/library/stdtypes.html#comparisons\">equality comparison operator</a>,\nthe <code>==</code> symbol.</p>\n<div class=\"highlight\"><pre><span></span>my_name = \"Wammu\"\nyour_name = \"Kars\"\n\nhave_same_name = my_name == your_name\n</pre></div>\n<h3>Boolean logic</h3>\n<p>Booleans are used in your code to make it behave differently based on current\nconditions within your program. You can use boolean values and comparisons in\nconjunction with the <code>if</code>, <code>elif</code>, and <code>else</code> keyoards as one means to achieve\nthis.</p>\n<div class=\"highlight\"><pre><span></span>my_age = 10\n\nif my_age &gt;= 100:\n  print(\"One hundred years old! Very impressive.\")\nelif my_age &lt;= 3:\n  print(\"Awwww. Just a baby.\")\nelse:\n  print(\"Ah - a very fine age indeed\")\n</pre></div>\n<p>In addition to testing for truth, you can also check if conditions are not\ntrue using the <code>not</code> keyword.</p>\n<div class=\"highlight\"><pre><span></span>favorite_team = \"Vikings\"\n\nif not favorite_team == \"Vikings\":\n  print(\"Oh - how unfortunate.\")\nelse:\n  print(\"Skol, Vikings!\")\n</pre></div>\n<h3>More complex boolean logic</h3>\n<p>Sometimes you will need to evaluate multiple conditions in your boolean logic.\nFor this purpose, you'll combine the <code>and</code> and <code>or</code> keywords. The <code>and</code> keyword\ncompares two boolean values and returns <code>True</code> if both are true. The <code>or</code> keyword\ncompares two values and returns <code>True</code> if any of the statements are true.</p>\n<p>Let's look at an example. That uses the <code>in</code> keyword to see if a string is\ninside a <strong>list</strong> of values (we'll cover lists in a future article).</p>\n<div class=\"highlight\"><pre><span></span>favs = [\"Donatello\", \"Raphael\"]\n\nif \"Michelangelo\" in favs and \"Donatello\" in favs:\n  print(\"Those are my favorite ninja turtles too!\")\nelif \"Michelangelo\" in favs or \"Donatello\" in favs:\n  print(\"Well, one out of two isn't bad...\")\nelse:\n  print(\"Huh - not what I would have chosen.\")\n</pre></div>\n<h2>Wrapping up</h2>\n<p>Booleans are an important tool in any programming language. Using boolean logic,\nyour code can react to data inside your program, and carry out different\ninstructions under different circumstances. Hopefully, you've learned a bit\nabout how to work with booleans in Python 3! Stay tuned for more blog posts in\nthis series to learn more about basic data types like strings, numbers,\nbooleans, lists, and dictionaries.</p>\n<p>Also, be sure to\n<a href=\"https://www.twilio.com/quest/download\">download and play TwilioQuest 3</a>\nto learn even more about Python! </p>\n</div>"},
{"title": "Exporting pandas DataFrames into SQLite with SQLAlchemy", "body": "<div class=\"c9\">\n<p>It is common when performing exploratory <a href=\"/data-analysis.html\">data analysis</a>,\n<a href=\"/blog/learn-pandas-basic-commands-explore-covid-19-data.html\">for example when examining COVID-19 data with pandas</a>,\nto load from files like a CSV, XML, or JSON into a\n<a href=\"/pandas.html\">pandas</a> DataFrame. You may then do some work with the\ndata in the DataFrame and want to store it in a more durable location\nlike a <a href=\"/databases.html\">relational database</a>.</p>\n<p>This tutorial walks through how to load a pandas DataFrame from a CSV\nfile, pull out some data from the full data set, then save the\nsubset of data to a <a href=\"/sqlite.html\">SQLite</a> database using\n<a href=\"/sqlalchemy.html\">SQLAlchemy</a>.</p>\n<h2>Configuring our development environment</h2>\n<p>Make sure you have Python 3 installed. As of right now,\n<a href=\"https://www.python.org/downloads/\">Python 3.8.2</a> is the latest\nversion of Python.</p>\n<p>During this tutorial we're also going to use: </p>\n<ul>\n<li><a href=\"/pandas.html\">pandas</a> (<a href=\"https://pandas.pydata.org/\">project homepage</a>\nand <a href=\"https://github.com/pandas-dev/pandas\">source code</a>), version 1.0.3\nin this tutorial</li>\n<li><a href=\"/sqlalchemy.html\">SQLAlchemy</a>\n(<a href=\"https://www.sqlalchemy.org/\">project homepage</a> and\n<a href=\"https://github.com/sqlalchemy/sqlalchemy\">source code</a>), version 1.3.15\nfor this tutorial</li>\n<li><a href=\"/sqlite.html\">SQLite</a> (<a href=\"https://sqlite.org/index.html\">project homepage</a>\nand <a href=\"https://www.sqlite.org/src/doc/trunk/README.md\">source code</a>),\nwhich Python\n<a href=\"https://docs.python.org/3/library/sqlite3.html\">includes a connector for as part of the Python standard library</a></li>\n</ul>\n<p>Install the above code libraries into a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">Python virtual environment</a>\nusing the following commands:</p>\n<div class=\"highlight\"><pre><span></span>python -m venv pandasexport\nsource pandasexport/bin/activate\n\npip install <span class=\"nv\">pandas</span>==<span class=\"m\">1</span>.0.3 <span class=\"nv\">sqlalchemy</span>==<span class=\"m\">1</span>.3.15\n</pre></div>\n<p>Our <a href=\"/development-environments.html\">development environment</a> is now\nready to download an example COVID-19 data set, load it into a pandas\nDataFrame, perform some analysis on it then save into a SQLite database.</p>\n<h2>Obtaining COVID-19 data</h2>\n<p>Go to the\n<a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">download today\u2019s data on the geographic distribution of COVID-19 cases worldwide</a>\npage in your web browser. It should look something like the following\nscreenshot. </p>\n<p><img src=\"/img/200330-pandas-sqlite/covid-19-data-download.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Download the CSV version of the COVID-19 March 29, 2020 data.\"></p>\n<p>There should be a link to download the\ndata in CSV format, but the organization has changed the page layout\nseveral times in the past few weeks, which makes it difficult to find\nformats other than Excel (XLSX). If you have trouble obtaining the\nCSV version, just download\n<a href=\"https://raw.githubusercontent.com/fullstackpython/blog-code-examples/master/pandas-covid-19/covid-19-cases-march-28-2020.csv\">this one from GitHub</a>\nwhich is pegged to a copy downloaded on March 28th, 2020.</p>\n<h2>Importing the CSV into pandas</h2>\n<p>The raw data is in a CSV file and we need to load it into memory via a\npandas DataFrame.</p>\n<p>Start by running the Python Read-Evaluate-Print Loop (REPL) on the\ncommand line:</p>\n<div class=\"highlight\"><pre><span></span>python\n\n&gt;&gt;&gt;\n</pre></div>\n<p>The REPL is ready to execute code, but we first need to import the pandas\nlibrary so we can use it.</p>\n<div class=\"highlight\"><pre><span></span>from pandas import read_csv\n\ndf = read_csv(\"covid-19-cases-march-28-2020.csv\", encoding=\"ISO-8859-1\")\n</pre></div>\n<p>The data is now loaded into the <code>df</code> variable which is an instance of the\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\">pandas DataFrame</a>\nclass.</p>\n<p>When we run the <code>count</code> function on this DataFrame, we get back that it\nhas 7320 rows.</p>\n<div class=\"highlight\"><pre><span></span>df.count()\n</pre></div>\n<p>Next, we'll take this set of 7320 rows of data and slice out only\nthe rows that pertain to the United States.</p>\n<h2>Creating a new DataFrame from the original DataFrame</h2>\n<p>We can pick out all of the rows of data for a single country using\na pandas function to match the <code>countriesAndTerritories</code> column\nto the country of our choice.</p>\n<div class=\"highlight\"><pre><span></span>save_df = df[df['countriesAndTerritories']==\"United_States_of_America\"]\n</pre></div>\n<p>The <code>save_df</code> variable contains the smaller subset of data. You can\nfind out what's in it by having it print itself:</p>\n<div class=\"highlight\"><pre><span></span>save_df\n</pre></div>\n<p>You should see something like the following output:</p>\n<div class=\"highlight\"><pre><span></span>         dateRep  day  month  year  cases  deaths   countriesAndTerritories geoId countryterritoryCode  popData2018\n7082  28/03/2020   28      3  2020  18695     411  United_States_of_America    US                  USA  327167434.0\n7083  27/03/2020   27      3  2020  16797     246  United_States_of_America    US                  USA  327167434.0\n7084  26/03/2020   26      3  2020  13963     249  United_States_of_America    US                  USA  327167434.0\n7085  25/03/2020   25      3  2020   8789     211  United_States_of_America    US                  USA  327167434.0\n7086  24/03/2020   24      3  2020  11236     119  United_States_of_America    US                  USA  327167434.0\n...          ...  ...    ...   ...    ...     ...                       ...   ...                  ...          ...\n7166  04/01/2020    4      1  2020      0       0  United_States_of_America    US                  USA  327167434.0\n7167  03/01/2020    3      1  2020      0       0  United_States_of_America    US                  USA  327167434.0\n7168  02/01/2020    2      1  2020      0       0  United_States_of_America    US                  USA  327167434.0\n7169  01/01/2020    1      1  2020      0       0  United_States_of_America    US                  USA  327167434.0\n7170  31/12/2019   31     12  2019      0       0  United_States_of_America    US                  USA  327167434.0\n\n[89 rows x 10 columns]\n</pre></div>\n<p>89 rows of data out of the original 7320 rows. Let's proceed with\nsaving this subset to a SQLite relational database.</p>\n<h2>Saving the DataFrame to SQLite</h2>\n<p>We are going to use <a href=\"/sqlalchemy.html\">SQLAlchemy</a> to create a connection\nto a new SQLite database, which in this example will be stored in file\nnamed <code>save_pandas.db</code>. You can of course save the file with whatever name\nyou want and in any location, not just the directory where you are\nexecuting the Python REPL.</p>\n<p>Start by importing the <code>create_engine</code> function from the <code>sqlalchemy</code>\nlibrary.</p>\n<div class=\"highlight\"><pre><span></span>from sqlalchemy import create_engine\n</pre></div>\n<p>Create the connection using the imported <code>create_engine</code> function\nand then invoking the <code>connect</code> method on it.</p>\n<div class=\"highlight\"><pre><span></span>engine = create_engine('sqlite:///save_pandas.db', echo=True)\nsqlite_connection = engine.connect()\n</pre></div>\n<p>We set <code>echo=True</code> to see all of the output that comes from our\ndatabase connection. When the connection is successful you will\nsee output similar to the following:</p>\n<div class=\"highlight\"><pre><span></span>2020-03-29 20:44:08,198 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1\n2020-03-29 20:44:08,198 INFO sqlalchemy.engine.base.Engine ()\n2020-03-29 20:44:08,199 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1\n2020-03-29 20:44:08,199 INFO sqlalchemy.engine.base.Engine ()\n&lt;sqlalchemy.engine.base.Connection object at 0x7fd4d932ec88&gt;\n</pre></div>\n<p>Set a variable name with the string of a table name you would like\nto create. Then use that variable when invoking the <code>to_sql</code>\nmethod on the <code>save_df</code> object, which is our pandas DataFrame that\nis a subset of the original data set with 89 rows filtered from\nthe original 7320.</p>\n<p>Note that in this case we are going to fail if the table already\nexists in the database. You can change <code>if_exists</code> to to <code>replace</code>\nor <code>append</code> and add your own exception handling in a more robust\nversion of this program. Check the\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html\">pandas.DataFrame.to_sql</a>\ndocumentation for the extensive details on your options.</p>\n<div class=\"highlight\"><pre><span></span>sqlite_table = \"Covid19\"\nsave_df.to_sql(sqlite_table, sqlite_connection, if_exists='fail')\n</pre></div>\n<p>The echo output should spin up with a bunch of output. </p>\n<div class=\"highlight\"><pre><span></span>2020-03-29 20:45:09,066 INFO sqlalchemy.engine.base.Engine PRAGMA main.table_info(\"Covid19\")\n2020-03-29 20:45:09,066 INFO sqlalchemy.engine.base.Engine ()\n2020-03-29 20:45:09,067 INFO sqlalchemy.engine.base.Engine PRAGMA temp.table_info(\"Covid19\")\n2020-03-29 20:45:09,067 INFO sqlalchemy.engine.base.Engine ()\n2020-03-29 20:45:09,069 INFO sqlalchemy.engine.base.Engine \nCREATE TABLE \"Covid19\" (\n    \"index\" BIGINT, \n    \"dateRep\" TEXT, \n    day BIGINT, \n    month BIGINT, \n    year BIGINT, \n    cases BIGINT, \n    deaths BIGINT, \n    \"countriesAndTerritories\" TEXT, \n    \"geoId\" TEXT, \n    \"countryterritoryCode\" TEXT, \n    \"popData2018\" FLOAT\n)\n\n\n2020-03-29 20:45:09,069 INFO sqlalchemy.engine.base.Engine ()\n2020-03-29 20:45:09,070 INFO sqlalchemy.engine.base.Engine COMMIT\n2020-03-29 20:45:09,070 INFO sqlalchemy.engine.base.Engine CREATE INDEX \"ix_Covid19_index\" ON \"Covid19\" (\"index\")\n2020-03-29 20:45:09,070 INFO sqlalchemy.engine.base.Engine ()\n2020-03-29 20:45:09,071 INFO sqlalchemy.engine.base.Engine COMMIT\n2020-03-29 20:45:09,072 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2020-03-29 20:45:09,074 INFO sqlalchemy.engine.base.Engine INSERT INTO \"Covid19\" (\"index\", \"dateRep\", day, month, year, cases, deaths, \"countriesAndTerritories\", \"geoId\", \"countryterritoryCode\", \"popData2018\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n2020-03-29 20:45:09,074 INFO sqlalchemy.engine.base.Engine ((7082, '28/03/2020', 28, 3, 2020, 18695, 411, 'United_States_of_America', 'US', 'USA', 327167434.0), (7083, '27/03/2020', 27, 3, 2020, 16797, 246, 'United_States_of_America', 'US', 'USA', 327167434.0), (7084, '26/03/2020', 26, 3, 2020, 13963, 249, 'United_States_of_America', 'US', 'USA', 327167434.0), (7085, '25/03/2020', 25, 3, 2020, 8789, 211, 'United_States_of_America', 'US', 'USA', 327167434.0), (7086, '24/03/2020', 24, 3, 2020, 11236, 119, 'United_States_of_America', 'US', 'USA', 327167434.0), (7087, '23/03/2020', 23, 3, 2020, 8459, 131, 'United_States_of_America', 'US', 'USA', 327167434.0), (7088, '22/03/2020', 22, 3, 2020, 7123, 80, 'United_States_of_America', 'US', 'USA', 327167434.0), (7089, '21/03/2020', 21, 3, 2020, 5374, 110, 'United_States_of_America', 'US', 'USA', 327167434.0)  ... displaying 10 of 89 total bound parameter sets ...  (7169, '01/01/2020', 1, 1, 2020, 0, 0, 'United_States_of_America', 'US', 'USA', 327167434.0), (7170, '31/12/2019', 31, 12, 2019, 0, 0, 'United_States_of_America', 'US', 'USA', 327167434.0))\n2020-03-29 20:45:09,074 INFO sqlalchemy.engine.base.Engine COMMIT\n2020-03-29 20:45:09,075 INFO sqlalchemy.engine.base.Engine SELECT name FROM sqlite_master WHERE type='table' ORDER BY name\n2020-03-29 20:45:09,075 INFO sqlalchemy.engine.base.Engine ()\n</pre></div>\n<p>Our table with all of its data should now be all set. Close the database\nconnection.</p>\n<div class=\"highlight\"><pre><span></span>sqlite_connection.close()\n</pre></div>\n<p>We can take a look at the data through the <code>sqlite3</code> command line viewer\nto make sure it was properly saved to the SQLite file.</p>\n<p>On the command line (<strong>not in the Python REPL</strong>), type:</p>\n<div class=\"highlight\"><pre><span></span>sqlite3\n</pre></div>\n<p>This will open up the command line prompt to interact with SQLite\ndatabases. However, we are not yet connected to our <code>save_pandas.db</code>\nfile.</p>\n<div class=\"highlight\"><pre><span></span>SQLite version 3.28.0 2019-04-15 14:49:49\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite&gt; \n</pre></div>\n<p>Use the <code>.open</code> command with our <code>save_pandas.db</code> file name to\naccess the database. Then use a standard SQL query to obtain all\nof the records from the <code>Covid19</code> table.</p>\n<div class=\"highlight\"><pre><span></span>sqlite&gt; .open save_pandas.db\nsqlite&gt; select * from Covid19;\n</pre></div>\n<p>The SQLite explorer should produce output like you see below:</p>\n<div class=\"highlight\"><pre><span></span>7082|28/03/2020|28|3|2020|18695|411|United_States_of_America|US|USA|327167434.0\n7083|27/03/2020|27|3|2020|16797|246|United_States_of_America|US|USA|327167434.0\n7084|26/03/2020|26|3|2020|13963|249|United_States_of_America|US|USA|327167434.0\n7085|25/03/2020|25|3|2020|8789|211|United_States_of_America|US|USA|327167434.0\n7086|24/03/2020|24|3|2020|11236|119|United_States_of_America|US|USA|327167434.0\n7087|23/03/2020|23|3|2020|8459|131|United_States_of_America|US|USA|327167434.0\n7088|22/03/2020|22|3|2020|7123|80|United_States_of_America|US|USA|327167434.0\n7089|21/03/2020|21|3|2020|5374|110|United_States_of_America|US|USA|327167434.0\n7090|20/03/2020|20|3|2020|4835|0|United_States_of_America|US|USA|327167434.0\n7091|19/03/2020|19|3|2020|2988|42|United_States_of_America|US|USA|327167434.0\n7092|18/03/2020|18|3|2020|1766|23|United_States_of_America|US|USA|327167434.0\n7093|17/03/2020|17|3|2020|887|16|United_States_of_America|US|USA|327167434.0\n7094|16/03/2020|16|3|2020|823|12|United_States_of_America|US|USA|327167434.0\n7095|15/03/2020|15|3|2020|777|10|United_States_of_America|US|USA|327167434.0\n7096|14/03/2020|14|3|2020|511|7|United_States_of_America|US|USA|327167434.0\n7097|13/03/2020|13|3|2020|351|10|United_States_of_America|US|USA|327167434.0\n7098|12/03/2020|12|3|2020|287|2|United_States_of_America|US|USA|327167434.0\n7099|11/03/2020|11|3|2020|271|2|United_States_of_America|US|USA|327167434.0\n7100|10/03/2020|10|3|2020|200|5|United_States_of_America|US|USA|327167434.0\n7101|09/03/2020|9|3|2020|121|4|United_States_of_America|US|USA|327167434.0\n7102|08/03/2020|8|3|2020|95|3|United_States_of_America|US|USA|327167434.0\n7103|07/03/2020|7|3|2020|105|2|United_States_of_America|US|USA|327167434.0\n7104|06/03/2020|6|3|2020|74|1|United_States_of_America|US|USA|327167434.0\n7105|05/03/2020|5|3|2020|34|2|United_States_of_America|US|USA|327167434.0\n7106|04/03/2020|4|3|2020|22|3|United_States_of_America|US|USA|327167434.0\n7107|03/03/2020|3|3|2020|14|4|United_States_of_America|US|USA|327167434.0\n7108|02/03/2020|2|3|2020|20|1|United_States_of_America|US|USA|327167434.0\n7109|01/03/2020|1|3|2020|3|1|United_States_of_America|US|USA|327167434.0\n7110|29/02/2020|29|2|2020|6|0|United_States_of_America|US|USA|327167434.0\n7111|28/02/2020|28|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7112|27/02/2020|27|2|2020|6|0|United_States_of_America|US|USA|327167434.0\n7113|26/02/2020|26|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7114|25/02/2020|25|2|2020|18|0|United_States_of_America|US|USA|327167434.0\n7115|24/02/2020|24|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7116|23/02/2020|23|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7117|22/02/2020|22|2|2020|19|0|United_States_of_America|US|USA|327167434.0\n7118|21/02/2020|21|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7119|20/02/2020|20|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7120|19/02/2020|19|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7121|18/02/2020|18|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7122|17/02/2020|17|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7123|16/02/2020|16|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7124|15/02/2020|15|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7125|14/02/2020|14|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7126|13/02/2020|13|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7127|12/02/2020|12|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7128|11/02/2020|11|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7129|10/02/2020|10|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7130|09/02/2020|9|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7131|08/02/2020|8|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7132|07/02/2020|7|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7133|06/02/2020|6|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7134|05/02/2020|5|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7135|04/02/2020|4|2|2020|0|0|United_States_of_America|US|USA|327167434.0\n7136|03/02/2020|3|2|2020|3|0|United_States_of_America|US|USA|327167434.0\n7137|02/02/2020|2|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7138|01/02/2020|1|2|2020|1|0|United_States_of_America|US|USA|327167434.0\n7139|31/01/2020|31|1|2020|1|0|United_States_of_America|US|USA|327167434.0\n7140|30/01/2020|30|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7141|29/01/2020|29|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7142|28/01/2020|28|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7143|27/01/2020|27|1|2020|3|0|United_States_of_America|US|USA|327167434.0\n7144|26/01/2020|26|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7145|25/01/2020|25|1|2020|1|0|United_States_of_America|US|USA|327167434.0\n7146|24/01/2020|24|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7147|23/01/2020|23|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7148|22/01/2020|22|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7149|21/01/2020|21|1|2020|1|0|United_States_of_America|US|USA|327167434.0\n7150|20/01/2020|20|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7151|19/01/2020|19|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7152|18/01/2020|18|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7153|17/01/2020|17|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7154|16/01/2020|16|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7155|15/01/2020|15|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7156|14/01/2020|14|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7157|13/01/2020|13|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7158|12/01/2020|12|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7159|11/01/2020|11|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7160|10/01/2020|10|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7161|09/01/2020|9|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7162|08/01/2020|8|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7163|07/01/2020|7|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7164|06/01/2020|6|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7165|05/01/2020|5|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7166|04/01/2020|4|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7167|03/01/2020|3|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7168|02/01/2020|2|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7169|01/01/2020|1|1|2020|0|0|United_States_of_America|US|USA|327167434.0\n7170|31/12/2019|31|12|2019|0|0|United_States_of_America|US|USA|327167434.0\nsqlite&gt; \n</pre></div>\n<p>All of the data with the <code>countriesAndTerritories</code> column matching\n<code>United_States_of_America</code> is there! We successfully exported the\ndata from the DataFrame into the SQLite database file.</p>\n<h2>What's Next?</h2>\n<p>We just imported data from a CSV into a pandas DataFrame, selected a\nsubset of that data then saved it to a relational database.</p>\n<p>You should take a look at the\n<a href=\"/blog/learn-pandas-basic-commands-explore-covid-19-data.html\">Learning pandas by Exploring COVID-19 Data</a>\ntutorial to learn more about how to select subsets of data from a\nlarger DataFrame, or head to the <a href=\"/pandas.html\">pandas</a> page for\nmore tutorials by the rest of the Python community.</p>\n<p>You can also get an idea of what to code next in your Python project by\nreading the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200330-pandas-dataframes-sqlalchemy.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "The Best Resources for Developers to Learn Finance", "body": "<div class=\"c9\">\n<p>Software developers should understand the basics of finance not only\nto manage their own money but also to understand how businesses' software\nprojects are funded. </p>\n<p>Understanding how other people who work in accounting, finance and project\nmanagement think about business and finance in particular can help you make\nbetter architectural decisions when trying to build maintainable systems.\nCode is only one aspect of a large software project so working with others\nand viewing the world through their discipline will help you immensely as\nyou advance your career.</p>\n<h2>Newsletters &amp; Podcasts on Finance</h2>\n<p>The fastest way to take a first step in improving your financial literacy\nis to subscribe to a few free newsletters that regularly hit your inbox,\nor a podcast if listening better fits your daily routine. I read and listen\nto each of the following newsletters and podcasts to pick up on unfamiliar\ntopics then do more of my own research if I do not understand what they\nare talking or writing about.</p>\n<ul>\n<li>\n<p><a href=\"https://www.bloomberg.com/opinion/authors/ARbTQlRLRjE/matthew-s-levine\">Money Stuff by Matt Levine of Bloomberg</a>\n(<a href=\"https://link.mail.bloombergbusiness.com/join/4wm/moneystuff-signup\">newsletter sign up form</a>)\nis a hilarious must-read daily newsletter that covers the world of\nfinance and breaks down many absurd situations such as financial\nfraud, insider trading, or competing interests in credit default swaps.\nAmazingly, the author stays out of political topics, which I find very\nrefreshing because many other journalists seem to force their own biases\nabout finance down your throat even if you do not want their opinions.</p>\n</li>\n<li>\n<p><a href=\"https://endlessmetrics.substack.com\">Endless Metrics</a> explains financial\ntopics in a way that's easy for anyone without a finance background to\nunderstand. For example,\n<a href=\"https://endlessmetrics.substack.com/p/reading-a-gdp-chart\">what the heck is GDP and how do you read a GDP chart?</a>.\nWhat I love most about this newsletter is that the author will often\nventure into finance-related topics he's interested in and then explain\nthose subjects while grounding them with useful charts and data.\nThis analytic approach closely matches how my developer brain processes\ninformation!</p>\n</li>\n<li>\n<p><a href=\"https://www.bloomberg.com/authors/AT2bBytfUHQ/john-authers\">Points of Return by John Auther</a>\n(<a href=\"http://link.mail.bloombergbusiness.com/join/4wm/opinion-authers-signup\">newsletter sign up form</a>).\nThis author is incredibly knowledgeable about finance and typically\nprovides a solid grounding in long-term fundamentals rather than the\nshort-term hyperbole that is pervasive in cable television financial\njournalism.</p>\n</li>\n<li>\n<p><a href=\"https://www.bloomberg.com/podcasts/odd_lots\">Odd Lots</a> covers kind\nof whatever topics the hosts find interesting such as pandemic bonds,\nrepo market disruption, sovereign debt restructuring and emerging\nmarkets. That's why it's so good - the hosts bring on an expert in that\ntopic and ask a ton of great questions because they want to learn\nwhat's going on for themselves. You follow along with them as they\ntry to understand some of the oft-esoteric subject areas of finance.</p>\n</li>\n</ul>\n<h2>Books, Websites and Magazines for Finance</h2>\n<p>Newsletters and podcasts are great for prodding you into discovering\ntopics you did not know you needed to learn. When you discover something\nthat you want to go deeper on in finance, here are a few of my favorite\nbooks and websites that range from the very basics of finance to broader\nmacroeconomic data trends.</p>\n<ul>\n<li>\n<p>I learned most of my basic finance knowledge when I read\n<a href=\"https://www.amazon.com/Financial-Intelligence-Professionals-Really-Numbers/dp/1422119149\">Financial Intelligence for IT Professionals</a>\nin graduate school (<a href=\"https://www.virginia.edu/\">go Hoos</a>!). The book\nis well-written, straightforward and accessible, particularly because\nit clearly targets its software developer audience.</p>\n</li>\n<li>\n<p><a href=\"https://dqydj.com/\">Don't Quit Your Day Job</a> uses a ton of metrics\nand statistics to ground their articles on financial topics that\nare often relevant specifically to software developers. For example,\nthe article on\n<a href=\"https://dqydj.com/number-of-developers-in-america-and-per-state/\">How Many Developers are There in America, and Where Do They Live?</a>\nis fascinating and especially useful because they explain their\ndata sources and analysis methodology.</p>\n</li>\n<li>\n<p><a href=\"https://money.com/\">Money Magazine</a> can be useful to pick up in paper\nedition for a few months to understand personal finance basics. After a\nfew months you'll discover the articles and topics tend to recycle so\nthere are diminishing returns to reading it after you have familiarized\nyourself with most of the topics.</p>\n</li>\n<li>\n<p><a href=\"https://www.longtermtrends.net/\">Longtermtrends</a> aggregates long term\nhigh-level financial data and displays it. I find looking at these\ncharts gets me away from the day-to-day \"oh the stock market is down\"\nand towards thinking about what happens when you invest money over many\nyears or decades.</p>\n</li>\n</ul>\n<h2>Specific Articles on Financial Topics</h2>\n<p>The following individual articles I have found to be both well-written and\nextremely useful for specific scenarios such as evaluating stock-based\nequity compensation, or negotiating your salary.</p>\n<ul>\n<li>\n<p><a href=\"https://www.kalzumeus.com/2012/01/23/salary-negotiation/\">Salary negotiation</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.alexmaccaw.com/an-engineers-guide-to-stock-options\">Stock Options</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jlevy/og-equity-compensation\">Open Guide to Equity Compensation</a></p>\n</li>\n</ul>\n</div>"},
{"title": "Introduction to Ansible video course released!", "body": "<div class=\"c9\">\n<p>Check out the just-launched video course,\n<a href=\"https://training.talkpython.fm/courses/explore_ansible/introduction-to-ansible-with-python\">Introduction to Ansible</a>\non\n<a href=\"https://training.talkpython.fm/\">Talk Python Training</a>. This is the\nperfect course for you if you want to\nlearn to configure servers and deploy web apps with the\n<a href=\"https://github.com/ansible/ansible\">Ansible configuration management tool</a>.</p>\n<p><a href=\"https://training.talkpython.fm/courses/explore_ansible/introduction-to-ansible-with-python\"><img src=\"/img/logos/intro-to-ansible.jpg\" class=\"shot outl rnd\" width=\"100%\"></a></p>\n<p>My approach in this course is in less than 3 hours to teach you the core\nconcepts then get a ton of hands-on time creating Ansible Playbooks and\nlearning modules for practical applications. I also show you the errors\nI frequently run into when using Ansible and how to fix them rather than\nonly showing the happy path.</p>\n<p>Now that this course has been published I'll be turning my attention back\nto the Full Stack Python Guide to Deployments book update that uses\nthe latest version of Ansible, Python 3 and Ubuntu 18.04 LTS. More news\nabout the update coming as soon as possible. In addition, the Ansible\ncourse pairs very well with the deployments book as they use the same\ntools but give a different angle on how to learn and use them.</p>\n<p>Got questions or comments about\u00a0\n<a href=\"https://www.fullstackpython.com/\">Full Stack Python</a>? Send me an email or\u00a0\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">submit an issue ticket on GitHub</a>\u00a0\nto let me know how to improve the site as I continue to\u00a0fill in the\n<a href=\"https://www.fullstackpython.com/table-of-contents.html\">table of contents</a>\u00a0\nwith\u00a0<a href=\"https://www.fullstackpython.com/change-log.html\">new pages</a>\u00a0and\u00a0\n<a href=\"https://www.fullstackpython.com/blog.html\">new tutorials</a>.</p>\n</div>"},
{"title": "Reporting Exceptions in Python Scripts with Sentry", "body": "<div class=\"c9\">\n<p>Python scripts are the glue that keep many applications and their\ninfrastructure running, but when one of your scripts throws an exception\nyou may not know about it immediately unless you have a central place to\naggregate the errors. That's where adding <a href=\"https://sentry.io/\">Sentry</a>\ncan solved this distributed error logging problem. </p>\n<p>In this tutorial, we'll see how to quickly add Sentry to a new or existing\nPython script to report errors into a centralized location for further\n<a href=\"/debugging.html\">debugging</a>.</p>\n<h2>Development environment setup</h2>\n<p>Make sure you have Python 3 installed. As of right now,\n<a href=\"https://www.python.org/downloads/\">Python 3.8.3</a> is the latest\nversion of Python.</p>\n<p>During this tutorial we're also going to use: </p>\n<ul>\n<li>a hosted Sentry instance on <a href=\"https://sentry.io\">sentry.io</a>, which we'll\nneed an account to access</li>\n<li>the <a href=\"https://pypi.org/project/sentry-sdk/\">Sentry Python helper library</a> to\nsend exception data to our Sentry instance</li>\n</ul>\n<p>Install the above code libraries into a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">Python virtual environment</a>\nusing the following commands:</p>\n<div class=\"highlight\"><pre><span></span>python -m venv sentryscript\nsource sentryscript/bin/activate\n\npip install sentry-sdk&gt;=<span class=\"m\">0</span>.14.4\n</pre></div>\n<p>Our <a href=\"/development-environments.html\">development environment</a> is now\nready and we can write some code that will throw exceptions to demonstrate\nhow to use Sentry.</p>\n<p>Note that all of the code for this tutorial can be found within the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">blog-code-examples</a>\nGit repository on GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/python-script-sentry\">python-script-sentry</a>\ndirectory.</p>\n<h2>An Example Script for Loading Python Modules</h2>\n<p>We'll start by writing a small but useful script that prints out the\nnames of all modules within a Python package, then add Sentry to it\nwhen it becomes apparent that capturing exceptions would be a\nuseful addition.</p>\n<p>Create a new file named <code>module_loader.py</code> and write the\nfollowing lines of code in it to allow us to easily execute it\non the command line.</p>\n<div class=\"highlight\"><pre><span></span>import argparse\n\ndef import_submodules(package):\n    return {}\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"package\")\n    args = parser.parse_args()\n\n    package_to_load = args.package\n    results = import_submodules(package_to_load)\n    for r in results:\n        print(str(r))\n</pre></div>\n<p>The above code takes an argument when the script is invoked from the\ncommand line and uses the value as an input into the stub\n<code>import_submodules</code> function that will contain code to walk the\ntree of modules within the package.</p>\n<p>Nextt, add the following highlighted lines of code to use <code>importlib</code> and\n<code>pkgutil</code> to recursively import modules from the package if one is\nfound that matches the name sent in as the <code>package</code> argument.</p>\n<div class=\"highlight\"><pre><span></span>import argparse\n<span class=\"highlight\">import importlib</span>\n<span class=\"highlight\">import pkgutil</span>\n\n\ndef import_submodules(package):\n<span class=\"highlight\">    \"\"\"Import all submodules of a module, recursively, including subpackages.</span>\n\n<span class=\"highlight\">    :param package: package (name or actual module)</span>\n<span class=\"highlight\">    :type package: str | module</span>\n<span class=\"highlight\">    :rtype: dict[str, types.ModuleType]</span>\n<span class=\"highlight\">    \"\"\"</span>\n<span class=\"highlight\">    if isinstance(package, str):</span>\n<span class=\"highlight\">        package = importlib.import_module(package)</span>\n<span class=\"highlight\">    results = {}</span>\n<span class=\"highlight\">    for loader, name, is_pkg in pkgutil.walk_packages(package.__path__):</span>\n<span class=\"highlight\">        full_name = package.__name__ + '.' + name</span>\n<span class=\"highlight\">        try:</span>\n<span class=\"highlight\">            results[full_name] = importlib.import_module(full_name)</span>\n<span class=\"highlight\">            if is_pkg:</span>\n<span class=\"highlight\">                results.update(import_submodules(full_name))</span>\n<span class=\"highlight\">        except ModuleNotFoundError as mnfe:</span>\n<span class=\"highlight\">            print(\"module not found: {}\".format(full_name))</span>\n<span class=\"highlight\">        except Exception as general_exception:</span>\n<span class=\"highlight\">            print(general_exception)</span>\n<span class=\"highlight\">    return results</span>\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"package\")\n    args = parser.parse_args()\n\n    package_to_load = args.package\n    results = import_submodules(package_to_load)\n    for r in results:\n        print(str(r))\n</pre></div>\n<p>The new code above loops through all packages with the\n<code>walk_package</code> function in the <code>pkgutil</code> standard library\nmodule and tries to import it using the <code>import_module</code> on\nthe package name plus package as a string. If the\nresult is successful, the function will recursively call\nitself to import submodules within the imported package.\nIf a module is not found, or some other issue occurs, exceptions\nare caught so that the script does not fail but instead can\ncontinue processing potential modules.</p>\n<p>Test the full script to see what it prints out with an arbitrary\npackage on the command line:</p>\n<div class=\"highlight\"><pre><span></span>python module_loader.py importlib\n</pre></div>\n<p>The above example generates the output:</p>\n<div class=\"highlight\"><pre><span></span>importlib._bootstrap\nimportlib._bootstrap_external\nimportlib.abc\nimportlib.machinery\nimportlib.resources\nimportlib.util\n</pre></div>\n<p>Trying to inspect a package that is not installed will give an error. Use\nthe script with a package that is not installed in your current environment.</p>\n<div class=\"highlight\"><pre><span></span>python module_loader.py flask\n</pre></div>\n<p>The above command produces the following traceback due to an expected\n<code>ModuleNotFoundError</code>.</p>\n<div class=\"highlight\"><pre><span></span>Traceback (most recent call last):\n  File <span class=\"s\">\"module_loader.py\"</span>, line 35, in &lt;module&gt;\n    results = import_submodules(package_to_load)\n  File <span class=\"s\">\"module_loader.py\"</span>, line 14, in import_submodules\n    package = importlib.import_module(package)\n  File <span class=\"s\">\"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/importlib/__init__.py\"</span>, line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File <span class=\"s\">\"&lt;frozen importlib._bootstrap&gt;\"</span>, line 1006, in _gcd_import\n  File <span class=\"s\">\"&lt;frozen importlib._bootstrap&gt;\"</span>, line 983, in _find_and_load\n  File <span class=\"s\">\"&lt;frozen importlib._bootstrap&gt;\"</span>, line 965, in _find_and_load_unlocked\nModuleNotFoundError: No module named <span class=\"c\">'flask'</span>\n</pre></div>\n<p>If you install Flask into your current environment the module is found and\nthe application will go through the list of modules and submodules.</p>\n<p>Our example script is usable but what if we run this code or something similar\non one or more servers that we don't check that often? That's where it would\nbe helpful to have a way to aggregate one or more scripts' exception output\nin a single place. Sentry can help us to accomplish that goal.</p>\n<h2>Adding Exception Reporting with Sentry</h2>\n<p>Sentry can either be <a href=\"https://github.com/getsentry/onpremise\">self-hosted</a> or\nused as a cloud service through <a href=\"https://sentry.io\">Sentry.io</a>. In this\ntutorial we will use the cloud hosted version because it's faster than\nsetting up your own server as well as free for smaller projects.</p>\n<p>Go to <a href=\"https://sentry.io\">Sentry.io's homepage</a>. </p>\n<p><img src=\"/img/200525-sentry/sentry-homepage.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sentry.io homepage where you can sign up for a free account.\"></p>\n<p>Sign into your account or sign up for a new free account. You will be at\nthe main account dashboard after logging in or completing the Sentry sign\nup process.</p>\n<p>There are no errors logged on our account dashboard yet, which is as\nexpected because we have not yet connected our account to the Python\nscript.</p>\n<p><img src=\"/img/200525-sentry/sentry-empty-dashboard.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Blank Sentry account dashboard.\"></p>\n<p>You'll want to create a new Sentry Project just for this application so\nclick \"Projects\" in the left sidebar to go to the Projects page.</p>\n<p><img src=\"/img/200525-sentry/create-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Button to create a new Sentry project.\"></p>\n<p>On the Projects page, click the \"Create Project\" button in the top right\ncorner of the page.</p>\n<p><img src=\"/img/200525-sentry/create-new-project-screen.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create a new Sentry project.\"></p>\n<p>Select Python, give your new Project a name and then press the \"Create Project\"\nbutton. Our new project is ready to integrate with our Python script.</p>\n<p>We need the unique identifier for our account and project to authorize our\nPython code to send errors to this Sentry instance. The easiest way to get\nwhat we need is to go to the\n<a href=\"https://docs.sentry.io/error-reporting/quickstart/?platform=python\">Python getting started documentation page</a>\nand scroll down to the \"Configure the SDK\" section.</p>\n<p><img src=\"/img/200525-sentry/python-sentry-quickstart.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The Sentry docs show you exactly what you need to export to connect to your account.\"></p>\n<p>Copy the string parameter for the <code>init</code> method and\n<a href=\"https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html\">set it as an environment variable</a>\nrather than exposing it directly in your application code.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">SENTRY_DSN</span>='https://yourkeygoeshere.ingest.sentry.io/project-number'\n</pre></div>\n<p><strong>Make sure to replace \"yourkeygoeshere\" with your own unique identifier\nand \"project-number\" with the ID that matches the project you just\ncreated.</strong></p>\n<p>Check that the <code>SENTRY_DSN</code> is set properly in your shell using the <code>echo</code>\ncommand:</p>\n<div class=\"highlight\"><pre><span></span>echo <span class=\"nv\">$SENTRY_DSN</span>\n</pre></div>\n<p>Modify the application to send exception information to Sentry now\nthat we have our unique identifier. Open <code>module_loader.py</code> again and\nupdate the following highlighted lines of code.</p>\n<div class=\"highlight\"><pre><span></span>import argparse\nimport importlib\n<span class=\"highlight\">import os</span>\nimport pkgutil\n<span class=\"highlight\">import sentry_sdk</span>\n<span class=\"highlight\">from sentry_sdk import capture_exception</span>\n\n<span class=\"highlight\"><span class=\"c1\"># find on https://docs.sentry.io/error-reporting/quickstart/?platform=python</span></span>\n<span class=\"highlight\">sentry_sdk.init(dsn=os.getenv('SENTRY_DSN'))</span>\n\n\ndef import_submodules(package):\n    \"\"\"Import all submodules of a module, recursively, including subpackages.\n\n    :param package: package (name or actual module)\n<span class=\"sd\">    :type package: str | module</span>\n    :rtype: dict[str, types.ModuleType]\n    \"\"\"\n    if isinstance(package, str):\n        package = importlib.import_module(package)\n    results = {}\n    for loader, name, is_pkg in pkgutil.walk_packages(package.__path__):\n        full_name = package.__name__ + '.' + name\n        try:\n            results[full_name] = importlib.import_module(full_name)\n            if is_pkg:\n                results.update(import_submodules(full_name))\n        except ModuleNotFoundError as mnfe:\n            print(\"module not found: {}\".format(full_name))\n<span class=\"highlight\">            capture_exception(mnfe)</span>\n        except Exception as general_exception:\n            print(general_exception)\n<span class=\"highlight\">            capture_exception(general_exception)</span>\n    return results\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"package\")\n    args = parser.parse_args()\n\n    package_to_load = args.package\n    results = import_submodules(package_to_load)\n    for r in results:\n        print(str(r))\n</pre></div>\n<p>These new lines of code import the\n<a href=\"https://github.com/getsentry/sentry-python\">Sentry Python SDK</a> and <code>os</code>\nlibrary (to read system environment variables). The application then\ninitializes the Sentry SDK with the string found in the <code>SENTRY_DSN</code>\nenvironment variable. Down in the <code>import_submodules</code> function we\nthen call the <code>capture_exception</code> SDK function whenever a\n<code>ModuleNotFoundException</code> is thrown or another exception which would\nbe caught within the broader <code>Exception</code> bucket.</p>\n<p>Now that our code is in place, let's test out the new Sentry integration.</p>\n<h2>Testing the Script and Viewing Exceptions</h2>\n<p>The easiest way to test out whether the Sentry code is working or not is\nto try to import a module that does not exist. Let's say you make a\ntypo in your command and try to run the script on <code>importliba</code> instead\nof <code>importlib</code> (maybe because you are using an awful Macbook Pro \"butterfly\"\nkeyboard instead of a durable keyboard). Try it out and see what happens:</p>\n<div class=\"highlight\"><pre><span></span>python module_loader.py importliba\n</pre></div>\n<p>The script will run and finish but there will be errors because that\nmodule does not exist. Thanks to our new code, we can view the\nerrors in Sentry.</p>\n<p>Check the Sentry dashboard to see the error.</p>\n<p><img src=\"/img/200525-sentry/exception-in-dashboard.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Viewing the first exception in the Sentry dashboard.\"></p>\n<p>We can also click into the error to learn more about what happened.</p>\n<p><img src=\"/img/200525-sentry/detailed-error-report.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The exception details in the Sentry dashboard.\"></p>\n<p>You can also receive email reports on the errors that occur so that\nyou do not have to always stay logged into the dashboard.</p>\n<p><img src=\"/img/200525-sentry/sentry-email.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The exception via email.\"></p>\n<p>With that all configured, we've now got a great base to expand the script\nand build better error handling with Sentry as our Python application\nbecomes more complex.</p>\n<h2>What's Next?</h2>\n<p>We just created an example script that outputs all of the modules and\nsubmodules in a package, then added Sentry to it so that it would report\nany exceptions back to our central hosted instance.</p>\n<p>That's just a simple introduction to Sentry, so next you'll want to\nread one of the following articles to do more with it:</p>\n<ul>\n<li><a href=\"https://docs.sentry.io/platforms/python/\">Python Sentry docs</a></li>\n<li><a href=\"https://docs.sentry.io/platforms/python/flask/\">How to use Sentry with Flask</a></li>\n<li><a href=\"https://docs.sentry.io/platforms/python/celery/\">Integrating Sentry into Celery task queues</a></li>\n</ul>\n<p>You can also get an idea of what to code next in your Python project by\nreading the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200525-python-exceptions-sentry.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Basic Data Types in Python 3: Strings", "body": "<div class=\"c9\">\n<p>There is a lot to learn on your Python journey when you are\n<a href=\"/learning-programming.html\">new to the programming language</a>. Once you are\ncomfortable writing and executing code, your first stop becomes understanding\nhow to represent data in\nyour code. No matter the language, there are a few basic data types you'll use\nall the time - strings, numbers, booleans, lists, and dictionaries.</p>\n<p>Those data types, and how to use them in Python 3, are the topic of this blog\npost series. Today, we're starting with <strong>strings</strong>.</p>\n<p>If you're learning Python, you might also want to\n<a href=\"https://www.twilio.com/quest/download\">check out TwilioQuest 3</a>.\nYou'll learn about basic data types and much more about Python programming.</p>\n<p>Ready to learn how to use strings in Python 3? Let's get started!</p>\n<h2>Strings in Python 3</h2>\n<p>One of the most common data types in any programming language is a <code>string</code>. A\n<strong>string</strong> represents a series of characters, which you would use to represent\nusernames, blog posts, tweets, or any text content in your code. You can create\na string and assign it to a variable like this.</p>\n<div class=\"highlight\"><pre><span></span>my_name = \"Jonathan Joestar\"\n</pre></div>\n<h3>Strings are \"immutable\"</h3>\n<p>In Python, strings are considered <a href=\"https://www.merriam-webster.com/dictionary/immutable\">immutable</a> -\nonce you create them, they can't be changed. You can, however, use a variety of\nmethods to create new strings from existing strings. This type of work in\nprogramming is called <strong>string manipulation</strong>. Some web developers joke that at\nthe end of the day, their job is just mashing strings together - and this isn't\nfar from the truth!</p>\n<p>Here are some common tasks you might undertake when using strings in your code.</p>\n<h3>Common task - combining strings together</h3>\n<p>Combining strings together - <strong>concatenating</strong> them - is a very common task. In\nPython 3, you can use the <code>+</code> operator for this purpose. You can use the <code>+</code>\noperator multiple times to concatenate multiple strings.</p>\n<div class=\"highlight\"><pre><span></span>first_name = \"Jonathan\"\nlast_name = \"Joestar\"\n\nfull_name = first_name + \" \" + last_name\n</pre></div>\n<h3>Common task - inserting data into strings</h3>\n<p>Another common task with strings is inserting data into a specific place\nwithin a string. In programming, we call this <strong>string interpolation</strong>. Python 3\nprovides a handy tool for doing this called <a href=\"https://www.python.org/dev/peps/pep-0498/\">\"f\" strings</a>.\nThe \"f\" in \"f strings\" stands for <strong>format</strong> - you can insert other data from\nyour program into a string when you define it rather than doing complex string\nconcatenation as demonstrated previously.</p>\n<p>Here is an example of creating a formatted string - note the letter <code>f</code> is\nincluded just before the first double quote when defining the <code>message</code> variable.\nWhen you want to insert data from your program into the string, you can include\nit between two \"curly braces\" - the <code>{</code> and <code>}</code> characters.</p>\n<div class=\"highlight\"><pre><span></span>first_name = \"Jonathan\"\nlast_name = \"Joestar\"\nage = 24\n\nmessage = f\"My name is {first_name} {last_name}, and I am {age} years old.\"\nprint(message)\n</pre></div>\n<h3>Common task - using built-in string methods to manipulate strings</h3>\n<p>String objects have a number of <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">methods</a>\nto perform common tasks, like changing the case of strings or trimming their\ncontent. Below, you'll find a few examples. In two of these examples, we are\ncreating a string variable, and then assigning the same variable a new value,\nwhich is the result of calling a method on a string object.</p>\n<p><strong>Example 1:</strong> Convert a string to all caps using the <code>upper</code> method.</p>\n<div class=\"highlight\"><pre><span></span>example_string = \"am I stoked enough yet?\"\nexample_string = example_string.upper()\nprint(example_string) <span class=\"c1\"># prints \"AM I STOKED ENOUGH YET?\"</span>\n</pre></div>\n<p><strong>Example 2:</strong> Replace all instances of the word <code>kale</code> with <code>tacos</code>.</p>\n<div class=\"highlight\"><pre><span></span>example_string = \"We're having kale for dinner! Yay kale!\"\nexample_string = example_string.replace(\"kale\", \"tacos\")\nprint(example_string) # prints \"We're having tacos for dinner! Yay tacos!\"\n</pre></div>\n<p><strong>Example 3:</strong> Split a comma-delimited string into a list of strings.</p>\n<div class=\"highlight\"><pre><span></span>example_string = \"Apples,Oranges,Pears\"\ngroceries = example_string.split(',')\n\n# Code below prints:\n# Apples\n# Oranges\n# Pears\nfor item in groceries:\n    print(item)\n</pre></div>\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">Check our more strings can do</a>\nin the Python 3 docs!</p>\n<h2>Type casting</h2>\n<p>Frequently, you will want to convert data from one type into another. In\nprogramming, we call this process <strong>type casting</strong>. There are a number of\n<strong>functions</strong> built in to Python which allow us to do these type conversions\non basic data types.</p>\n<p><strong>Example 1:</strong> Convert a number into a string using the <code>str</code> function.</p>\n<div class=\"highlight\"><pre><span></span>example_number = 42\nconverted = str(example_number)\nmessage = \"The meaning of life is \" + converted\n</pre></div>\n<p><strong>Example 2:</strong> Convert a string into a whole number (integer) using <code>int</code>.</p>\n<div class=\"highlight\"><pre><span></span>example_string = \"2\"\nconverted = int(example_string)\nmessage = f\"Two plus two equals { converted + 2 }\"\n</pre></div>\n<h2>Wrapping up</h2>\n<p>Strings of text are one of the most common pieces of data you will work with\nin programming. Hopefully, you've learned a bit about how to work with strings\nin Python 3! Stay tuned for more blog posts in this series to learn more about\nbasic data types like strings, numbers, booleans, lists, and dictionaries.</p>\n<p>Also, be sure to\n<a href=\"https://www.twilio.com/quest/download\">download and play TwilioQuest 3</a>\nto learn even more about Python! </p>\n</div>"},
{"title": "How to Report Errors in Flask Web Apps with Sentry", "body": "<div class=\"c9\">\n<p><a href=\"/flask.html\">Flask</a> web applications are highly customizable by developers\nthanks to the <a href=\"/web-frameworks.html\">framework</a>'s extension-based\narchitecture, but that flexibility can sometimes lead to more errors\nwhen you run the application due to rough edges between the libraries.</p>\n<p>Reporting errors is crucial to running a well-functioning Flask web\napplication, so this tutorial will guide you through adding a free, basic\n<a href=\"https://sentry.io\">Sentry</a> configuration to a fresh Flask project.</p>\n<h2>Tutorial Requirements</h2>\n<p>Ensure you have Python 3 installed, because Python 2 reached its\nend-of-life at the beginning of 2020 and is no longer supported.\nPreferrably, you should have\n<a href=\"https://www.python.org/downloads/\">Python 3.7 or greater installed</a>\nin your <a href=\"/development-environments.html\">development environment</a>.\nThis tutorial will also use:</p>\n<ul>\n<li><a href=\"/flask.html\">Flask</a> web framework,\n<a href=\"https://github.com/pallets/flask/releases/tag/1.1.2\">version 1.1.2</a></li>\n<li>a hosted Sentry instance on <a href=\"https://sentry.io\">sentry.io</a>, which we'll\nneed an account to access</li>\n<li>the <a href=\"https://pypi.org/project/sentry-sdk/\">Sentry Python helper library</a> to\nsend exception data to our Sentry instance, with the\n<a href=\"https://docs.sentry.io/platforms/python/flask/\">Flask integration</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/report-errors-flask-web-apps-sentry\">report-errors-flask-web-apps-sentry directory of the blog-code-examples</a>\nrepository. Use the source code as you desire for your own projects.</p>\n<h2>Development environment set up</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Install the Flask and Sentry-SDK code libraries into a new Python\nvirtual environment using the following commands:</p>\n<div class=\"highlight\"><pre><span></span>python -m venv sentryflask\nsource sentryflask/bin/activate\n\npip install flask&gt;=<span class=\"m\">1</span>.1.2 sentry-sdk[flask]==<span class=\"m\">0</span>.15.1\n</pre></div>\n<p>Note that we installed the Flask integration as part of the Sentry\nSDK, which is why the dependency is <code>sentry-sdk[flask]</code> rather than\njust <code>sentry-sdk</code>. </p>\n<p>Now that we have all of our dependencies installed we can code up a\nlittle application to show how the error reporting works.</p>\n<h2>Creating the application</h2>\n<p>We have everything we need to start building our application. Create\na new directory for your project. I've called mine\n<a href=\"https://github.com/fullstackpython/blog-code-examples/tree/master/report-errors-flask-web-apps-sentry\">report-errors-flask-web-apps-sentry</a>\nin the examples repository but you can use a shorter name if you\nprefer. Open a new file named <code>app.py</code> and write the following code in it.</p>\n<div class=\"highlight\"><pre><span></span># app.py\nfrom flask import Flask, escape, request\n\n\napp = Flask(__name__)\n\n\n@app.route('/divide/&lt;int:numerator&gt;/by/&lt;int:denominator&gt;/')\ndef hello(numerator, denominator):\n    answer = numerator / denominator\n    return f'{numerator} can be divided by {denominator} {answer} times.'\n</pre></div>\n<p>The above code is a short Flask application that allows input via the URL for\ntwo integer values: a numerator and a denominator.</p>\n<p>Save the file and run it using the <code>flask run</code> command:</p>\n<div class=\"highlight\"><pre><span></span>env <span class=\"nv\">FLASK_APP</span>=app.py flask run\n</pre></div>\n<p>If you see the following output on the command line that means the development\nserver is working properly:</p>\n<div class=\"highlight\"><pre><span></span> * Serving Flask app \"app.py\"\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</pre></div>\n<p>Test it by going to http://localhost:5000/divide/50/by/10/ and you will\nget the following output in your web browser:</p>\n<p><img src=\"/img/200630-python-flask-sentry/division-success.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Successful division of 50 by 10.\"></p>\n<p>With our base application working, we can now add error reporting for\nthe situations that do not work as expected.</p>\n<h2>Adding Sentry to the Flask app</h2>\n<p>It's time to add Sentry with the Flask integration into the mix, so that we\ncan easily see when the route errors out due to bad input.</p>\n<p>Sentry can either be <a href=\"https://github.com/getsentry/onpremise\">self-hosted</a> or\nused as a cloud service through <a href=\"https://sentry.io\">Sentry.io</a>. In this\ntutorial we will use the cloud hosted version because it's faster than\nsetting up your own server as well as free for smaller projects.</p>\n<p>Go to <a href=\"https://sentry.io\">Sentry.io's homepage</a>.</p>\n<p><img src=\"/img/200525-sentry/sentry-homepage.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sentry.io homepage where you can sign up for a free account.\"></p>\n<p>Sign into your account or sign up for a new free account. You will be at\nthe main account dashboard after logging in or completing the Sentry sign\nup process.</p>\n<p>There are no errors logged on our account dashboard yet, which is as\nexpected because we have not yet connected our account to our Python\napplication.</p>\n<p><img src=\"/img/200525-sentry/sentry-empty-dashboard.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Blank Sentry account dashboard.\"></p>\n<p>You'll want to create a new Sentry Project just for this application so\nclick \"Projects\" in the left sidebar to go to the Projects page.</p>\n<p><img src=\"/img/200525-sentry/create-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Button to create a new Sentry project.\"></p>\n<p>On the Projects page, click the \"Create Project\" button in the top right\ncorner of the page.</p>\n<p><img src=\"/img/200525-sentry/create-new-project-screen.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create a new Sentry project.\"></p>\n<p>You can either choose \"Flask\" or select \"Python\". I usually just choose\n\"Python\" if I do not yet know what framework I'll be using to build my\napplication. Next, give your new Project a name and then press the \"Create\nProject\" button. Our new project is ready to integrate with our Python code.</p>\n<p>We need the unique identifier for our account and project to authorize our\nPython code to send errors to this Sentry instance. The easiest way to get\nwhat we need is to go to the\n<a href=\"https://docs.sentry.io/platforms/python/flask/\">Python+Flask documentation page</a>\nand read how to configure the SDK.</p>\n<p><img src=\"/img/200525-sentry/python-sentry-quickstart.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The Sentry docs show you exactly what you need to export to connect to your account.\"> </p>\n<p>Copy the string parameter for the <code>init</code> method and set it\n<a href=\"https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html\">as an environment variable</a>\nrather than having it exposed in your project's code.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">SENTRY_DSN</span>='https://yourkeygoeshere.ingest.sentry.io/project-number'\n</pre></div>\n<p><strong>Make sure to replace \"yourkeygoeshere\" with your own unique identifier\nand \"project-number\" with the ID that matches the project you just\ncreated.</strong></p>\n<p>Check that the <code>SENTRY_DSN</code> is set properly in your shell using the <code>echo</code>\ncommand:</p>\n<div class=\"highlight\"><pre><span></span>echo <span class=\"nv\">$SENTRY_DSN</span>\n</pre></div>\n<p>Update <code>app.py</code> with the following highlighted lines of code.</p>\n<div class=\"highlight\"><pre><span></span># app.py                                                                                                                                                                                \n<span class=\"highlight\">import os</span>\n<span class=\"highlight\">import sentry_sdk</span>\nfrom flask import Flask, escape, request\n<span class=\"highlight\">from sentry_sdk.integrations.flask import FlaskIntegration</span>\n\n\n<span class=\"highlight\">sentry_sdk.init(</span>\n<span class=\"highlight\">    dsn=os.getenv('SENTRY_DSN'), integrations=[FlaskIntegration()]</span>\n<span class=\"highlight\">)</span>\n\n\napp = Flask(__name__)\n\n\n@app.route('/divide/&lt;int:numerator&gt;/by/&lt;int:denominator&gt;/')\ndef hello(numerator, denominator):\n    answer = numerator / denominator\n    return f'{numerator} can be divided by {denominator} {answer} times.'\n</pre></div>\n<p>The above new lines of code initialize the Sentry client and allow it to\nproperly send any errors that occur over to the right Sentry service.</p>\n<h2>Testing the Sentry Integration</h2>\n<p>The Sentry dashboard shows that the service is still waiting for events.</p>\n<p><img src=\"/img/200630-python-flask-sentry/waiting-for-events.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sentry dashboard, without any error data shown.\"></p>\n<p>Let's make an error happen to see if we've properly connected the Flask integration\nwith our application.</p>\n<p>Try to divide by zero, by going to http://localhost:5000/divide/50/by/0/ in\nyour web browser. You should get an \"Internal Server Error\".</p>\n<p><img src=\"/img/200630-python-flask-sentry/internal-server-error.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Flask HTTP status code 500 for internal server error.\"></p>\n<p>Back over in the Sentry dashboard, the error appears in the list.</p>\n<p><img src=\"/img/200630-python-flask-sentry/zero-division-error.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sentry dashboard showing the exact ZeroDivisionError.\"></p>\n<p>We can drill into the error by clicking on it and get a ton more information,\nnot just about our application but also about the client that visited the\nsite. This is handy if you have an issue in a specific browser or other\ntype of client when building an <a href=\"/application-programming-interfaces.html\">API</a>.</p>\n<p><img src=\"/img/200630-python-flask-sentry/error-details.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"ZeroDivisionError error details in the Sentry user interface.\"></p>\n<p>With that in place, you can now build out the rest of your Flask application\nknowing that all of the exceptions will be tracked in Sentry.</p>\n<h2>What's next?</h2>\n<p>We just finished building a Flask app to show how quickly the hosted\nversion of Sentry can be added to applications so you do not lose\ntrack of your error messages.</p>\n<p>Next, you can try one of these tutorials to add other useful features to your\nnew application:</p>\n<ul>\n<li><a href=\"/blog/respond-sms-text-messages-python-flask.html\">Responding to SMS Text Messages with Python &amp; Flask</a></li>\n<li><a href=\"/blog/develop-flask-web-apps-docker-containers-macos.html\">Develop and Run Flask Apps within Docker Containers</a></li>\n<li><a href=\"/blog/okta-user-auth-existing-flask-web-app.html\">Add Okta Authentication to an Existing Flask App</a></li>\n</ul>\n<p>You can also determine what to code next in your Python project by reading\nthe <a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>If you see an issue or error in this tutorial, please\n<a href=\"https://github.com/mattmakai/fullstackpython/blob/master/content/posts/200630-report-errors-flask-web-apps-sentry.markdown\">fork the source repository on GitHub</a>\nand submit a pull request with the fix.</p>\n</div>"},
{"title": "Tracking Daily User Data in Django with django-user-visit", "body": "<div class=\"c9\">\n<p>It can be tedious to figure out what data to track, create data models\nand build <a href=\"https://docs.djangoproject.com/en/stable/topics/http/middleware/\">middleware</a> for your <a href=\"/django.html\">Django</a> project if you just want to\ncollect some basic information about clients that connect to your web application\n. Fortunately, the library <a href=\"https://github.com/yunojuno/django-user-visit\">django-user-visit</a>\nis a handy Django project that quickly handles all\nof this complexity for you. In this tutorial, we'll learn\nhow to use django-user-visit in a new Django project\nto add daily visit data tracking to Django projects.</p>\n<p>When we're done, we can view information like the following in the Django Admin:</p>\n<p><img src=\"/img/200719-django-user-visit/user-visit-record.png\" width=\"100%\" alt=\"Django Admin with django-user-visit information\" class=\"shot rnd outl\"></p>\n<h2>Project Requirements</h2>\n<p>Ensure you have Python 3 installed, because Python 2 reached its\nend-of-life at the beginning of 2020 and is no longer supported.\nPreferrably, you should have\n<a href=\"https://www.python.org/downloads/\">Python 3.7 or greater installed</a>\nin your <a href=\"/development-environments.html\">development environment</a>.\nThis tutorial will also use:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> <a href=\"/web-frameworks.html\">web framework</a>,\n<a href=\"https://www.djangoproject.com/download/\">version 3.0.8</a></li>\n<li><a href=\"https://github.com/yunojuno/django-user-visit\">django-user-visit</a>,\n<a href=\"https://pypi.org/project/django-user-visit/\">version 0.4</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">track-daily-user-data-django-user-visit directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Development environment set up</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Start the Django project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/djuservisit\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djuservisit/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is simply\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(djuservisit) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/\">Django</a>\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==3.0.8 django-user-visit==0.4\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>(djuservisit) $ pip install django==3.0.8 django-user-visit==0.4\nCollecting django==3.0.8\n  Using cached https://files.pythonhosted.org/packages/ca/ab/5e004afa025a6fb640c6e983d4983e6507421ff01be224da79ab7de7a21f/Django-3.0.8-py3-none-any.whl\nCollecting django-user-visit==0.4\n  Downloading https://files.pythonhosted.org/packages/23/ef/d3ec22c3a897192e267389d6ee59ce1858f5ede262b078f93211aff110e7/django_user_visit-0.4-py3-none-any.whl\nCollecting sqlparse&gt;=0.2.2 (from django==3.0.8)\n  Using cached https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl\nCollecting asgiref~=3.2 (from django==3.0.8)\n  Using cached https://files.pythonhosted.org/packages/d5/eb/64725b25f991010307fd18a9e0c1f0e6dff2f03622fc4bcbcdb2244f60d6/asgiref-3.2.10-py3-none-any.whl\nCollecting pytz (from django==3.0.8)\n  Using cached https://files.pythonhosted.org/packages/4f/a4/879454d49688e2fad93e59d7d4efda580b783c745fd2ec2a3adf87b0808d/pytz-2020.1-py2.py3-none-any.whl\nCollecting user-agents&lt;3.0,&gt;=2.1 (from django-user-visit==0.4)\n  Using cached https://files.pythonhosted.org/packages/1b/be/82e4d20a7716d8e5de98b948edcecff9bb237e6718c3831bd92794fe9821/user-agents-2.1.tar.gz\nCollecting ua-parser&gt;=0.9.0 (from user-agents&lt;3.0,&gt;=2.1-&gt;django-user-visit==0.4)\n  Using cached https://files.pythonhosted.org/packages/9d/22/4d16b08db329fd440eed366d35e4dd7195c9babb4ecac5218f28081522a2/ua_parser-0.10.0-py2.py3-none-any.whl\nInstalling collected packages: sqlparse, asgiref, pytz, django, ua-parser, user-agents, django-user-visit\n  Running setup.py install for user-agents ... done\nSuccessfully installed asgiref-3.2.10 django-3.0.8 django-user-visit-0.4 pytz-2020.1 sqlparse-0.3.1 ua-parser-0.10.0 user-agents-2.1\n</pre></div>\n<p>Our dependencies are installed so we can now create our\nproject and start coding.</p>\n<h2>Creating the application</h2>\n<p>We have everything we need to start building our application.</p>\n<p>We can use the <a href=\"/django.html\">Django</a> <code>django-admin</code> tool to create\nthe boilerplate code structure to get our project started.\nChange into the directory where you develop your applications. For\nexample, I typically use <code>/Users/matt/devel/py/</code> for all of my\nPython projects. Then run the following command to start a Django\nproject named <code>djuservisit</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djuservisit\n</pre></div>\n<p>Note that in this tutorial we are using the same name for both the\nvirtualenv and the Django project directory, but they can be\ndifferent names if you prefer that for organizing your own projects.</p>\n<p>The <code>django-admin</code> command creates a directory named <code>djuservisit</code>\nalong with several subdirectories that you should be familiar with\nif you have previously worked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djuservisit\n</pre></div>\n<p>Open <code>djuservisit/djuservisit/settings.py</code>. Add the <code>user_visits</code>\napp and its middleware to <code>settings.py</code> by inserting the two\nhighlighted lines:</p>\n<div class=\"highlight\"><pre><span></span># djuservisit/djuservisit/settings.py\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'user_visit',</span>\n]\n\nMIDDLEWARE = [ \n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n<span class=\"highlight\">    'user_visit.middleware.UserVisitMiddleware',</span>\n]\n</pre></div>\n<p>Make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the Django\n<a href=\"https://docs.djangoproject.com/en/stable/howto/deployment/checklist/\">production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Save and close <code>settings.py</code>.</p>\n<p>Create a <a href=\"https://docs.djangoproject.com/en/stable/ref/django-admin/\">Django superuser</a>\nso you can access the Django Admin. Go to the base directory of this project\nand use the <code>manage.py</code> file with the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py createsuperuser\n</pre></div>\n<p>Follow the prompts and enter values for the username, email address and\npassword that you want your local Django superuser to have. Next, we'll\ntest out how this library works when a user visits a page created by\nour Django web app.</p>\n<h2>Testing django-user-visit</h2>\n<p>Let's test out our bare-bones application. Execute the development server\nwith the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server should start up with no issues.</p>\n<div class=\"highlight\"><pre><span></span>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nJuly 19, 2020 - 13:01:41\nDjango version 3.0.8, using settings 'djuservisit.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Open a web browser and go to \"http://localhost:8000\".</p>\n<p><img src=\"/img/200719-django-user-visit/django-success.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Default Django page.\"></p>\n<p>That's the default page provided by Django in the absence of any other URLs\nto serve at the root URL, but it works for our purposes. </p>\n<p>Go to the Django Admin by changing the URL in your browser to\n\"http://localhost:8000/admin\". The Django Admin login page will appear.</p>\n<p><img src=\"/img/200719-django-user-visit/django-admin-login.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Django admin default login screen.\"></p>\n<p>Enter the username and password of the superuser you just created with\nthe <code>manage.py</code> command to log in. Next, you will see the Django admin\ndashboard.</p>\n<p><img src=\"/img/200719-django-user-visit/django-admin-dashboard.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Django admin dashboard.\"></p>\n<p>The \"User visit log\" has already been added to the Admin. Click on\nthe \"User visits\" link.</p>\n<p><img src=\"/img/200719-django-user-visit/django-admin-django-user-visit.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"django-user-visit list in the Django admin dashboard.\"></p>\n<p>The list of all users that have visited by day will show up.</p>\n<p><img src=\"/img/200719-django-user-visit/django-user-visit-details.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"django-user-visit details page in the Django admin.\"></p>\n<p>Click on any of the visits to see more detailed data about the record,\njust like you would with any Django Admin extension.</p>\n<p>That library was pretty easy to install for the information that it\naggregates for you. Next, let's take a closer look at the\n<a href=\"/django-orm.html\">Django ORM</a> model that powers this library.</p>\n<h2>Inspecting the django-user-visit model</h2>\n<p>We confirmed that django-user-visit is properly installed. Let's take a closer\nlook at the model the library provides to store the user data.</p>\n<p>Take a look at the source code for\n<a href=\"https://github.com/yunojuno/django-user-visit/blob/master/user_visit/models.py\">django-user-visit/user_visit/models.py</a>\non GitHub. Below is an excerpt with the relevant lines of that source file.\nI've highlighted a few lines that will be discussed below the code excerpt.</p>\n<div class=\"highlight\"><pre><span></span>## ... source code abbreviated ...\n\nclass UserVisit(models.Model):\n    \"\"\"\n    Record of a user visiting the site on a given day.\n    This is used for tracking and reporting - knowing the volume of visitors\n    to the site, and being able to report on someone's interaction with the site.\n    We record minimal info required to identify user sessions, plus changes in\n    IP and device. This is useful in identifying suspicious activity (multiple\n    logins from different locations).\n    Also helpful in identifying support issues (as getting useful browser data\n    out of users can be very difficult over live chat).\n    \"\"\"\n\n<span class=\"highlight\">    user = models.ForeignKey(</span>\n<span class=\"highlight\">        settings.AUTH_USER_MODEL, related_name=\"user_visits\", on_delete=models.CASCADE</span>\n<span class=\"highlight\">    )</span>\n    timestamp = models.DateTimeField(\n        help_text=\"The time at which the first visit of the day was recorded\",\n        default=timezone.now,\n    )\n    session_key = models.CharField(help_text=\"Django session identifier\", max_length=40)\n    remote_addr = models.CharField(\n        help_text=(\n            \"Client IP address (from X-Forwarded-For HTTP header, \"\n            \"or REMOTE_ADDR request property)\"\n        ),\n        max_length=100,\n        blank=True,\n    )\n<span class=\"highlight\">    ua_string = models.TextField(</span>\n<span class=\"highlight\">        \"User agent (raw)\", help_text=\"Client User-Agent HTTP header\", blank=True,</span>\n<span class=\"highlight\">    )</span>\n    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n    hash = models.CharField(\n        max_length=32,\n        help_text=\"MD5 hash generated from request properties\",\n        unique=True,\n    )\n    created_at = models.DateTimeField(\n        help_text=\"The time at which the database record was created (!=timestamp)\",\n        auto_now_add=True,\n    )\n\n    objects = UserVisitManager()\n\n    class Meta:\n        get_latest_by = \"timestamp\"\n\n    def __str__(self) -&gt; str:\n        return f\"{self.user} visited the site on {self.timestamp}\"\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;UserVisit id={self.id} user_id={self.user_id} date='{self.date}'&gt;\"\n\n    def save(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Set hash property and save object.\"\"\"\n<span class=\"highlight\">        self.hash = self.md5().hexdigest()</span>\n        super().save(*args, **kwargs)\n\n    @property\n    def user_agent(self) -&gt; user_agents.parsers.UserAgent:\n        \"\"\"Return UserAgent object from the raw user_agent string.\"\"\"\n        return user_agents.parsers.parse(self.ua_string)\n\n    @property\n    def date(self) -&gt; datetime.date:\n        \"\"\"Extract the date of the visit from the timestamp.\"\"\"\n        return self.timestamp.date()\n\n    # see https://github.com/python/typeshed/issues/2928 re. return type\n    def md5(self) -&gt; hashlib._Hash:\n        \"\"\"Generate MD5 hash used to identify duplicate visits.\"\"\"\n<span class=\"highlight\">        h = hashlib.md5(str(self.user.id).encode())  # noqa: S303</span>\n        h.update(self.date.isoformat().encode())\n        h.update(self.session_key.encode())\n        h.update(self.remote_addr.encode())\n        h.update(self.ua_string.encode())\n        return h\n</pre></div>\n<p>A few things to note based on the highlighted above: </p>\n<ul>\n<li>The <code>UserVisit</code> model matches up with the\n<a href=\"https://docs.djangoproject.com/en/stable/ref/contrib/auth/\">Django user model</a>\nusing the <code>user = models.ForeignKey...</code> line</li>\n<li>The code uses the <code>save</code> function to ensure the some of the fields\nare automatically populated, such as the <code>hash</code> property using the\n<code>hashlib</code> module</li>\n<li>This library has a dependency on the\n<a href=\"https://pypi.org/project/user-agents/\">user_agents library</a> to parse the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent\">User-Agent</a>\nof the browser the client is using</li>\n</ul>\n<p>Reading the source code for libraries like django-user-visit is helpful\nnot only to know what it is doing under the covers, but also to learn new\nways to code your own applications.</p>\n<p>Take a look at the <a href=\"/django-code-examples.html\">Django code examples</a> and\n<a href=\"/django-extensions-plug-ins-related-libraries.html\">Django extensions</a> pages\nto see more projects with good Python example code that you can learn from.</p>\n<h2>Additional resources</h2>\n<p>We just finished building an app that tracks daily user visits with the\ndjango-user-visit library.</p>\n<p>Next, try out some of these other related <a href=\"/django.html\">Django</a> tutorials:</p>\n<ul>\n<li><a href=\"/blog/bootstrap-4-django-template.html\">Quickly Use Bootstrap 4 in a Django Template with a CDN</a></li>\n<li><a href=\"/blog/maps-django-web-applications-projects-mapbox.html\">How to Add Maps to Django Web App Projects with Mapbox</a></li>\n<li><a href=\"/blog/monitor-django-projects-web-apps-rollbar.html\">Monitoring Django Projects with Rollbar</a></li>\n</ul>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.\nIf you see an issue or error in this tutorial, please\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200719-track-daily-user-data-django-user-visit.markdown\">fork the source repository on GitHub</a>\nand submit a pull request with the fix.</p>\n</div>"},
{"title": "How to Transcribe Speech Recordings into Text with Python", "body": "<div class=\"c9\">\n<p>When you have a recording where one or more people are talking, it's useful\nto have a highly accurate and automated way to extract the spoken words into\ntext. Once you have the text, you can use it for further analysis or\nas an accessibility feature.</p>\n<p>In this tutorial, we'll use a high accuracy speech-to-text web application\nprogramming interface called <a href=\"https://www.assemblyai.com/\">AssemblyAI</a> to\nextract text from an MP3 recording (many other formats are supported as well).</p>\n<p>With the code from this tutorial, you will be able to take an audio file\nthat contains speech\n<a href=\"https://www.fullstackpython.com/audio/fsp-object-relational-mappers.mp3\">such as this example one I recorded</a>\nand output a highly accurate text transcription like this:</p>\n<div class=\"highlight\"><pre><span></span>An object relational mapper is a code library that automates the transfer of \ndata stored in relational, databases into objects that are more commonly used\nin application code or EMS are useful because they provide a high level \nabstraction upon a relational database that allows developers to write Python \ncode instead of sequel to create read update and delete, data and schemas in \ntheir database. Developers can use the programming language. They are \ncomfortable with to work with a database instead of writing SQL...\n\n(the text goes on from here but I abbreviated it at this point)\n</pre></div>\n<h2>Tutorial requirements</h2>\n<p>Throughout this tutorial we are going to use the following dependencies,\nwhich we will install in just a moment. Make sure you also have Python 3,\n<a href=\"https://www.python.org/downloads/\">preferably 3.6 or newer installed</a>,\nin your environment:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"https://requests.readthedocs.io/\">requests</a>\n<a href=\"https://pypi.org/project/requests/\">version 2.24.0</a> to make HTTP requests to\nthe <a href=\"https://www.assemblyai.com/\">AssemblyAI</a> speech-to-text\n<a href=\"/application-programming-interfaces.html\">API</a></li>\n<li>An <a href=\"https://www.assemblyai.com/\">AssemblyAI</a> account,\nwhich you can sign up for a\n<a href=\"https://app.assemblyai.com/login/\">free API access key here</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">transcribe-speech-text-script directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Setting up the development environment</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nI keep mine in a subdirectory named <code>venvs</code> within my user's home\ndirectory. Create a new virtualenv for this project using the following\ncommand.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/pytranscribe\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/pytranscribe/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is simply\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(pytranscribe) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <code>requests</code> package into the activated\nbut otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install requests==2.24.0\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>(pytranscribe) $ pip install requests==2.24.0\nCollecting requests==2.24.0\n  Using cached https://files.pythonhosted.org/packages/45/1e/0c169c6a5381e241ba7404532c16a21d86ab872c9bed8bdcd4c423954103/requests-2.24.0-py2.py3-none-any.whl\nCollecting certifi&gt;=2017.4.17 (from requests==2.24.0)\n  Using cached https://files.pythonhosted.org/packages/5e/c4/6c4fe722df5343c33226f0b4e0bb042e4dc13483228b4718baf286f86d87/certifi-2020.6.20-py2.py3-none-any.whl\nCollecting urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 (from requests==2.24.0)\n  Using cached https://files.pythonhosted.org/packages/9f/f0/a391d1463ebb1b233795cabfc0ef38d3db4442339de68f847026199e69d7/urllib3-1.25.10-py2.py3-none-any.whl\nCollecting chardet&lt;4,&gt;=3.0.2 (from requests==2.24.0)\n  Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\nCollecting idna&lt;3,&gt;=2.5 (from requests==2.24.0)\n  Using cached https://files.pythonhosted.org/packages/a2/38/928ddce2273eaa564f6f50de919327bf3a00f091b5baba8dfa9460f3a8a8/idna-2.10-py2.py3-none-any.whl\nInstalling collected packages: certifi, urllib3, chardet, idna, requests\nSuccessfully installed certifi-2020.6.20 chardet-3.0.4 idna-2.10 requests-2.24.0 urllib3-1.25.10\n</pre></div>\n<p>We have all of our required dependencies installed so we can get started\ncoding the application.</p>\n<h2>Uploading, initiating and transcribing audio</h2>\n<p>We have everything we need to start building our application that\nwill transcribe audio into text. We're going to build this\napplication in three files:</p>\n<ol>\n<li><a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/transcribe-speech-text-script/upload_audio_file.py\">upload_audio_file.py</a>:\nuploads your audio file to a secure place on AssemblyAI's service so\nit can be access for processing. If your audio file is already accessible\nwith a public URL, you don't need to do this step, you can just follow\n<a href=\"https://docs.assemblyai.com/overview/getting-started\">this quickstart</a></li>\n<li><a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/transcribe-speech-text-script/initiate_transcription.py\">initiate_transcription.py</a>:\ntells the API which file to transcribe and to start immediately</li>\n<li><a href=\"https://github.com/fullstackpython/blog-code-examples/blob/master/transcribe-speech-text-script/get_transcription.py\">get_transcription.py</a>:\nprints the status of the transcription if it is still processing, or\ndisplays the results of the transcription when the process is complete</li>\n</ol>\n<p>Create a new directory named <code>pytranscribe</code> to store these files as\nwe write them. Then change into the new project directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir pytranscribe\ncd pytranscribe\n</pre></div>\n<p>We also need to export our AssemblyAI API key as an environment variable.\n<a href=\"https://app.assemblyai.com/login/\">Sign up for an AssemblyAI account</a>\nand log in to the\n<a href=\"https://app.assemblyai.com/dashboard/\">AssemblyAI dashboard</a>, then\ncopy \"Your API token\" as shown in this screenshot:</p>\n<p><img src=\"/img/200809-transcription-assemblyai/assemblyai-dashboard.png\" width=\"100%\" alt=\"AssemblyAI dashboard.\" class=\"shot rnd outl\"></p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">ASSEMBLYAI_KEY</span>=your-api-key-here\n</pre></div>\n<p>Note that you must use the <code>export</code> command in every command line window\nthat you want this key to be accessible. The scripts we are writing will\nnot be able to access the API if you do not have the token exported as\n<code>ASSEMBLYAI_KEY</code> in the environment you are running the script.</p>\n<p>Now that we have our project directory created and the API key set as an\nenvironment variable, let's move on to writing the code for the first file\nthat will upload audio files to the AssemblyAI service.</p>\n<h2>Uploading the audio file for transcription</h2>\n<p>Create a new file named <code>upload_audio_file.py</code> and place the following\ncode in it:</p>\n<div class=\"highlight\"><pre><span></span>import argparse\nimport os\nimport requests\n\n\nAPI_URL = \"https://api.assemblyai.com/v2/\"\n\n\ndef upload_file_to_api(filename):\n    \"\"\"Checks for a valid file and then uploads it to AssemblyAI\n    so it can be saved to a secure URL that only that service can access.\n    When the upload is complete we can then initiate the transcription\n    API call.\n    Returns the API JSON if successful, or None if file does not exist.\n    \"\"\"\n    if not os.path.exists(filename):\n        return None\n\n    def read_file(filename, chunk_size=5242880):\n        with open(filename, 'rb') as _file:\n            while True:\n                data = _file.read(chunk_size)\n                if not data:\n                    break\n                yield data\n\n    headers = {'authorization': os.getenv(\"ASSEMBLYAI_KEY\")}\n    response = requests.post(\"\".join([API_URL, \"upload\"]), headers=headers,\n                             data=read_file(filename))\n    return response.json()\n</pre></div>\n<p>The above code imports the <code>argparse</code>, <code>os</code> and <code>requests</code> packages\nso that we can use them in this script. The <code>API_URL</code> is a constant\nthat has the base URL of the AssemblyAI service. We define the\n<code>upload_file_to_api</code> function with a single argument, <code>filename</code>\nthat should be a string with the absolute path to a file and its\nfilename.</p>\n<p>Within the function, we check that the file exists, then use Request's\n<a href=\"https://requests.readthedocs.io/en/master/user/advanced/#chunk-encoded-requests\">chunked transfer encoding</a>\nto stream large files to the AssemblyAI API.</p>\n<p>The <code>os</code> module's <code>getenv</code> function reads the API that was set on the\ncommand line using the <code>export</code> command with the <code>getenv</code>. Make sure\nthat you use that <code>export</code> command in the terminal where you are\nrunning this script otherwise that <code>ASSEMBLYAI_KEY</code> value will be\nblank. When in doubt, use <code>echo $ASSEMBLY_AI</code> to see if the value\nmatches your API key.</p>\n<p>To use the <code>upload_file_to_api</code> function, append the following lines of\ncode in the <code>upload_audio_file.py</code> file so that we can properly\nexecute this code as a script called with the <code>python</code> command:</p>\n<div class=\"highlight\"><pre><span></span>if __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"filename\")\n    args = parser.parse_args()\n    upload_filename = args.filename\n    response_json = upload_file_to_api(upload_filename)\n    if not response_json:\n        print(\"file does not exist\")\n    else:\n        print(\"File uploaded to URL: {}\".format(response_json['upload_url']))\n</pre></div>\n<p>The code above creates an <code>ArgumentParser</code> object that allows the\napplication to obtain a single argument from the command line\nto specify the file we want to access, read and upload to the\nAssmeblyAI service. </p>\n<p>If the file does not exist, the script will print a message that\nthe file couldn't be found. In the happy path where we do find the\ncorrect file at that path, then the file is uploaded using\nthe code in <code>upload_file_to_api</code> function.</p>\n<p>Execute the completed <code>upload_audio_file.py</code> script by running it on\nthe command line with the <code>python</code> command. Replace <code>FULL_PATH_TO_FILE</code>\nwith an absolute path to the file you want to upload, such as\n<code>/Users/matt/devel/audio.mp3</code>.</p>\n<div class=\"highlight\"><pre><span></span>python upload_audio_file.py FULL_PATH_TO_FILE\n</pre></div>\n<p>Assuming the file is found at the location that you specified, when the\nscript finishes uploading the file, it will print a message like this one\nwith a unique URL:</p>\n<div class=\"highlight\"><pre><span></span>File uploaded to URL: https://cdn.assemblyai.com/upload/463ce27f-0922-4ea9-9ce4-3353d84b5638\n</pre></div>\n<p>This URL is not public, it can only be used by the AssemblyAI service, so no\none else will be able to access your file and its contents except for you\nand their transcription API.</p>\n<p>The part that is important is the last section of the URL, in this example\nit is <code>463ce27f-0922-4ea9-9ce4-3353d84b5638</code>. Save that unique identifier\nbecause we need to pass it into the next script that initiates the\ntranscription service.</p>\n<h2>Initiate transcription</h2>\n<p>Next, we'll write some code to kick off the transcription. Create a\nnew file named <code>initiate_transcription.py</code>. Add the following\ncode to the new file.</p>\n<div class=\"highlight\"><pre><span></span>import argparse\nimport os\nimport requests\n\n\nAPI_URL = \"https://api.assemblyai.com/v2/\"\nCDN_URL = \"https://cdn.assemblyai.com/\"\n\n\ndef initiate_transcription(file_id):\n    \"\"\"Sends a request to the API to transcribe a specific\n    file that was previously uploaded to the API. This will\n    not immediately return the transcription because it takes\n    a moment for the service to analyze and perform the\n    transcription, so there is a different function to retrieve\n    the results.\n    \"\"\"\n    endpoint = \"\".join([API_URL, \"transcript\"])\n    json = {\"audio_url\": \"\".join([CDN_URL, \"upload/{}\".format(file_id)])}\n    headers = {\n        \"authorization\": os.getenv(\"ASSEMBLYAI_KEY\"),\n        \"content-type\": \"application/json\"\n    }\n    response = requests.post(endpoint, json=json, headers=headers)\n    return response.json()\n</pre></div>\n<p>We have the same imports as the previous script and we've added a\nnew constant, <code>CDN_URL</code> that matches the separate URL where AssemblyAI\nstores the uploaded audio files.</p>\n<p>The <code>initiate_transcription</code> function essentially just sets up\na single HTTP request to the AssemblyAI API to start the transcription\nprocess on the audio file at the specific URL passed in. This is why\npassing in the <code>file_id</code> is important: that completes the URL of the\naudio file that we are telling AssemblyAI to retrieve.</p>\n<p>Finish the file by appending this code so that it can be easily\ninvoked from the command line with arguments.</p>\n<div class=\"highlight\"><pre><span></span>if __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"file_id\")\n    args = parser.parse_args()\n    file_id = args.file_id\n    response_json = initiate_transcription(file_id)\n    print(response_json)\n</pre></div>\n<p>Start the script by running the <code>python</code> command on the\n<code>initiate_transcription</code> file and pass in the unique file identifier\nyou saved from the previous step.</p>\n<div class=\"highlight\"><pre><span></span># the FILE_IDENTIFIER is returned in the previous step and will\n# look something like this: 463ce27f-0922-4ea9-9ce4-3353d84b5638\npython initiate_transcription.py FILE_IDENTIFIER\n</pre></div>\n<p>The API will send back a JSON response that this script prints to\nthe command line.</p>\n<div class=\"highlight\"><pre><span></span>{'audio_end_at': None, 'acoustic_model': 'assemblyai_default', 'text': None, \n 'audio_url': 'https://cdn.assemblyai.com/upload/463ce27f-0922-4ea9-9ce4-3353d84b5638', \n 'speed_boost': False, 'language_model': 'assemblyai_default', 'redact_pii': False, \n 'confidence': None, 'webhook_status_code': None, \n 'id': 'gkuu2krb1-8c7f-4fe3-bb69-6b14a2cac067', 'status': 'queued', 'boost_param': None, \n 'words': None, 'format_text': True, 'webhook_url': None, 'punctuate': True, \n 'utterances': None, 'audio_duration': None, 'auto_highlights': False, \n 'word_boost': <span class=\"o\">[]</span>, 'dual_channel': None, 'audio_start_from': None}\n</pre></div>\n<p>Take note of the value of the <code>id</code> key in the JSON response. This is the\ntranscription identifier we need to use to retrieve the transcription result.\nIn this example, it is <code>gkuu2krb1-8c7f-4fe3-bb69-6b14a2cac067</code>. Copy the\ntranscription identifier in your own response because we will need it to\ncheck when the transcription process has completed in the next step.</p>\n<h2>Retrieving the transcription result</h2>\n<p>We have uploaded and begun the transcription process, so let's get the\nresult as soon as it is ready. </p>\n<p>How long it takes to get the results back can depend on the size of the file,\nso this next script will send an HTTP request to the API and report back\nthe status of the transcription, or print the output if it's complete.</p>\n<p>Create a third Python file named <code>get_transcription.py</code> and put the following\ncode into it.</p>\n<div class=\"highlight\"><pre><span></span>import argparse\nimport os\nimport requests\n\n\nAPI_URL = \"https://api.assemblyai.com/v2/\"\n\n\ndef get_transcription(transcription_id):\n    \"\"\"Requests the transcription from the API and returns the JSON\n    response.\"\"\"\n    endpoint = \"\".join([API_URL, \"transcript/{}\".format(transcription_id)])\n    headers = {\"authorization\": os.getenv('ASSEMBLYAI_KEY')}\n    response = requests.get(endpoint, headers=headers)\n    return response.json()\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"transcription_id\")\n    args = parser.parse_args()\n    transcription_id = args.transcription_id\n    response_json = get_transcription(transcription_id)\n    if response_json['status'] == \"completed\":\n        for word in response_json['words']:\n            print(word['text'], end=\" \")\n    else:\n        print(\"current status of transcription request: {}\".format(\n              response_json['status']))\n</pre></div>\n<p>The code above has the same imports as the other scripts. In this\nnew <code>get_transcription</code> function, we simply call the AssemblyAI API\nwith our API key and the <em>transcription identifier</em> from the previous\nstep (not the file identifier). We retrieve the JSON response and\nreturn it.</p>\n<p>In the main function we handle the transcription identifier that\nis passed in as a command line argument and pass it into the\n<code>get_transcription</code> function. If the response JSON from the\n<code>get_transcription</code> function contains a <code>completed</code> status then we\nprint the results of the transcription. Otherwise, print the\ncurrent status which is either <code>queued</code> or <code>processing</code> before\nit is <code>completed</code>.</p>\n<p>Call the script using the command line and the transcription identifier\nfrom the previous section:</p>\n<div class=\"highlight\"><pre><span></span>python get_transcription.py TRANSCRIPTION_ID\n</pre></div>\n<p>If the service has not yet started working on the transcript then it\nwill return <code>queued</code> like this:</p>\n<div class=\"highlight\"><pre><span></span>current status of transcription request: queued\n</pre></div>\n<p>When the service is currently working on the audio file it will\nreturn <code>processing</code>:</p>\n<div class=\"highlight\"><pre><span></span>current status of transcription request: processing\n</pre></div>\n<p>When the process is completed, our script will return the text of\nthe transcription, like you see here:</p>\n<div class=\"highlight\"><pre><span></span>An object relational mapper is a code library that automates the transfer of \ndata stored in relational, databases into objects that are more commonly used\nin application code or EMS are useful because they provide a high level \n\n...(output abbreviated)\n</pre></div>\n<p>That's it, we've got our transcription! </p>\n<p>You may be wondering what to do if the accuracy isn't where you need\nit to be for your situation. That is where\n<a href=\"https://docs.assemblyai.com/guides/boosting-accuracy-for-keywords-or-phrases\">boosting accuracy for keywords or phrases</a>\nand\n<a href=\"https://docs.assemblyai.com/guides/transcribing-with-a-different-acoustic-or-custom-language-model\">selecting a model that better matches your data</a>\ncome in. You can use either of those two methods to boost the accuracy\nof your recordings to an acceptable level for your situation.</p>\n<h2>What's next?</h2>\n<p>We just finished writing some scripts that call the AssemblyAI API to\ntranscribe recordings with speech into text output.</p>\n<p>Next, take a look at some of their more advanced documentation that goes\nbeyond the basics in this tutorial:</p>\n<ul>\n<li><a href=\"https://docs.assemblyai.com/overview/supported-file-formats\">Supported file formats</a></li>\n<li><a href=\"https://docs.assemblyai.com/guides/transcribing-dual-channel-stereo-recordings\">Transcribing dual channel/stereo recordings</a></li>\n<li><a href=\"https://docs.assemblyai.com/guides/getting-speaker-labels-speaker-diarization\">Getting speaker labels (speaker diarization)</a></li>\n</ul>\n<p>Questions? Let me know via an issue ticket on\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.\nSee something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200809-transcribe-recordings-speech-text-assemblyai.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Quickly Use Bootstrap 4 in a Django Template with a CDN", "body": "<div class=\"c9\">\n<p>The <a href=\"/django.html\">Django</a> <a href=\"/web-frameworks.html\">web framework</a>\nmakes it easy to render HTML using the <a href=\"/django-templates.html\">Django template engine</a>.\nHowever, the default styling on HTML pages usually need a\n<a href=\"/cascading-style-sheets.html\">Cascading Style Sheet (CSS)</a> framework such as\nBootstrap to make the design look decent.\nIn this beginner's tutorial, we'll use the <a href=\"/bootstrap-css.html\">Bootstrap</a>\n<a href=\"/content-delivery-networks-cdns.html\">Content Delivery Network (CDN)</a>\nto quickly add Bootstrap to a rendered HTML page.</p>\n<p>Here is what the <code>&lt;h1&gt;</code> element styling will look like at the end\nof this tutorial:</p>\n<p><img src=\"/img/200705-bootstrap-4-django-template/hello-world-bootstrap-style.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Bootstrap-enhanced HTML page saying 'Hello, world!'.\"></p>\n<h2>Tutorial Requirements</h2>\n<p>Throughout this tutorial we are going to use the following dependencies,\nwhich we will install in just a moment. Make sure you also have Python 3,\n<a href=\"https://www.python.org/downloads/\">preferrably 3.7 or newer installed</a>,\nin your environment:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> <a href=\"/web-frameworks.html\">web framework</a>,\n<a href=\"https://www.djangoproject.com/download/\">version 3.0.8</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">bootstrap-4-django-template directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Development environment set up</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Start the Django project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/djbootstrap4\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djbootstrap4/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is simply\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(djbootstrap4) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/\">Django</a>\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==3.0.8\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>Collecting django\n  Using cached https://files.pythonhosted.org/packages/ca/ab/5e004afa025a6fb640c6e983d4983e6507421ff01be224da79ab7de7a21f/Django-3.0.8-py3-none-any.whl\nCollecting sqlparse&gt;=0.2.2 (from django)\n  Using cached https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl\nCollecting asgiref~=3.2 (from django)\n  Using cached https://files.pythonhosted.org/packages/d5/eb/64725b25f991010307fd18a9e0c1f0e6dff2f03622fc4bcbcdb2244f60d6/asgiref-3.2.10-py3-none-any.whl\nCollecting pytz (from django)\n  Using cached https://files.pythonhosted.org/packages/4f/a4/879454d49688e2fad93e59d7d4efda580b783c745fd2ec2a3adf87b0808d/pytz-2020.1-py2.py3-none-any.whl\nInstalling collected packages: sqlparse, asgiref, pytz, django\nSuccessfully installed asgiref-3.2.10 django-3.0.8 pytz-2020.1 sqlparse-0.3.1\n</pre></div>\n<p>We can get started coding the application now that we have all of our\nrequired dependencies installed.</p>\n<h2>Building our application</h2>\n<p>Let's begin coding our application.</p>\n<p>We can use the <a href=\"/django.html\">Django</a> <code>django-admin</code> tool to create\nthe boilerplate code structure to get our project started.\nChange into the directory where you develop your applications. For\nexample, I typically use <code>/Users/matt/devel/py/</code> for all of my\nPython projects. Then run the following command to start a Django\nproject named <code>djbootstrap4</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djbootstrap4\n</pre></div>\n<p>Note that in this tutorial we are using the same name for both the\nvirtualenv and the Django project directory, but they can be\ndifferent names if you prefer that for organizing your own projects.</p>\n<p>The <code>django-admin</code> command creates a directory named <code>djbootstrap4</code>\nalong with several subdirectories that you should be familiar with\nif you have previously worked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djbootstrap4\n</pre></div>\n<p>Create a new Django app within <code>djbootstrap4</code>.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py startapp bootstrap4\n</pre></div>\n<p>Django will generate a new folder named <code>bootstrap4</code> for the project.\nWe should update the URLs so the app is accessible before we write\nour <code>views.py</code> code.</p>\n<p>Open <code>djbootstrap4/djbootstrap4/urls.py</code>. Add the highlighted\nlines so that URL resolver will check the <code>bootstrap4</code> app\nfor additional routes to match with URLs that are requested of\nthis Django application.</p>\n<div class=\"highlight\"><pre><span></span># djbootstrap4/djbootstrap4/urls.py\n<span class=\"highlight\">from django.conf.urls import include</span>\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nurlpatterns = [\n<span class=\"highlight\">    path('', include('bootstrap4.urls')),</span>\n    path('admin/', admin.site.urls),\n]\n</pre></div>\n<p>Save <code>djbootstrap4/djbootstrap4/urls.py</code> and open\n<code>djbootstrap4/djbootstrap4/settings.py</code>.\nAdd the <code>bootstrap4</code> app to <code>settings.py</code> by inserting\nthe highlighted line:</p>\n<div class=\"highlight\"><pre><span></span># djbootstrap4/djbootstrap4/settings.py\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'bootstrap4',</span>\n]\n</pre></div>\n<p>Make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the Django\n<a href=\"https://docs.djangoproject.com/en/stable/howto/deployment/checklist/\">production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Save and close <code>settings.py</code>.</p>\n<p>Next change into the <code>djbootstrap4/bootstrap4</code> directory. Create\na new file named <code>urls.py</code> to contain routes for the <code>bootstrap4</code> app.</p>\n<p>Add all of these lines to the empty <code>djbootstrap4/bootstrap4/urls.py</code>\nfile.</p>\n<div class=\"highlight\"><pre><span></span># djbootstrap4/bootstrap4/urls.py\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'', views.bootstrap4_index, name=\"index\"),\n]\n</pre></div>\n<p>Save <code>djbootstrap4/bootstrap4/urls.py</code>. Open\n<code>djbootstrap4/bootstrap4/views.py</code> to add the\nfollowing two highlighted lines. You can keep the boilerplate comment\n\"# Create your views here.\" or delete like I usually do.</p>\n<div class=\"highlight\"><pre><span></span># djbootstrap4/bootstrap4/views.py\nfrom django.shortcuts import render\n\n\n<span class=\"highlight\">def bootstrap4_index(request):</span>\n<span class=\"highlight\">    return render(request, 'index.html', {})</span>\n</pre></div>\n<p>Next, create a directory for your template files named <code>templates</code> under\nthe <code>djmaps/maps</code> app directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir templates\n</pre></div>\n<p>Create a new file named <code>index.html</code> within\n<code>djbootstrap4/bootstrap4/templates</code> that contains the\nfollowing <a href=\"/django-templates.html\">Django template language</a> markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;First step for bootstrap4<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Hello, world!<span class=\"p\">&lt;/</span>h1&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>We can test out this static page to make sure all of our code is\ncorrect before we start adding the meat of the functionality to\nthe project. Change into the base directory of your Django project\nwhere the <code>manage.py</code> file is located. Execute the development\nserver with the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server should start up with no issues other than\nan unapplied migrations warning.</p>\n<div class=\"highlight\"><pre><span></span>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\n\nJuly 05, 2020 - 10:59:58\nDjango version 3.0.8, using settings 'djbootstrap4.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Open a web browser and go to \"http://localhost:8000\".</p>\n<p><img src=\"/img/visuals/first-step.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Plain old HTML page saying 'Hello, world!'.\"></p>\n<p>With our base application working, we can now add Bootstrap.</p>\n<h2>Integrating Bootstrap</h2>\n<p>Time to add Bootstrap into the template so we can use its styling.</p>\n<p>Open <code>djbootstrap4/bootstrap4/templates/index.html</code> back up and\nadd or modify the following highlighted lines, which are very\nsimilar to what you will find in the\n<a href=\"https://getbootstrap.com/docs/4.5/getting-started/introduction/\">Bootstrap introduction guide</a>:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;!</span>DOCTYPE html&gt;\n&lt;html lang=<span class=\"s\">\"en\"</span>&gt;\n  &lt;head&gt;\n<span class=\"highlight\">    &lt;meta charset=<span class=\"s\">\"utf-8\"</span>&gt;</span>\n<span class=\"highlight\">    &lt;meta name=<span class=\"s\">\"viewport\"</span> content=<span class=\"s\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>&gt;</span>\n<span class=\"highlight\">    &lt;link rel=<span class=\"s\">\"stylesheet\"</span> href=<span class=\"s\">\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"</span> integrity=<span class=\"s\">\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"</span> crossorigin=<span class=\"s\">\"anonymous\"</span>&gt;</span>\n<span class=\"highlight\">    &lt;title&gt;bootstrap4&lt;/title&gt;</span>\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n<span class=\"highlight\">    <span class=\"o\">&lt;!--</span> Optional JavaScript --&gt;</span>\n<span class=\"highlight\">    <span class=\"o\">&lt;!--</span> jQuery first, then Popper.js, then Bootstrap JS --&gt;</span>\n<span class=\"highlight\">    &lt;script src=<span class=\"s\">\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"</span> integrity=<span class=\"s\">\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\"</span> crossorigin=<span class=\"s\">\"anonymous\"</span>&gt;&lt;/script&gt;</span>\n<span class=\"highlight\">    &lt;script src=<span class=\"s\">\"https://cdn.jsdelivr.net/npm/<a href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"53233c232336217d392013627d62657d63\">[email\u00a0protected]</a>/dist/umd/popper.min.js\"</span> integrity=<span class=\"s\">\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\"</span> crossorigin=<span class=\"s\">\"anonymous\"</span>&gt;&lt;/script&gt;</span>\n<span class=\"highlight\">    &lt;script src=<span class=\"s\">\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"</span> integrity=<span class=\"s\">\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\"</span> crossorigin=<span class=\"s\">\"anonymous\"</span>&gt;&lt;/script&gt;</span>\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div>\n<p>The above new lines in the <code>&lt;head&gt;</code> section add a couple of meta elements\nthat are important to Bootstrap's styling, and add the mandatory Bootstrap\nstylesheet.</p>\n<p>We keep the same <code>&lt;h1&gt;</code> header, which will automatically get the CSS\nstyling. Then there are 3 <em>optional</em> script elements that pull in\nBootstrap <a href=\"/javascript.html\">JavaScript</a> for more advanced features.\nWe are not using them in this tutorial because we just wanted to\nquickly show how to use the CDN and with this in place you can see\nin the\n<a href=\"https://getbootstrap.com/docs/4.5/content/reboot/\">Bootstrap content docs</a>\nwhat you want to add to the template next.</p>\n<p>Refresh the page at \"http://localhost:8000\" and you should see \"Hello, world!\"\nchange fonts.</p>\n<p><img src=\"/img/200705-bootstrap-4-django-template/hello-world-bootstrap-style.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Bootstrap-enhanced HTML page saying 'Hello, world!'.\"></p>\n<p>If you see that, it means everything works as expected.</p>\n<h2>What now?</h2>\n<p>We just added Bootstrap via the CDN so we can use it in our Django template.\nThis was the absolute simplest way to add Bootstrap to a single Django\npage and now there's a ton more you can do with it.</p>\n<p>Next, try out some of these other related <a href=\"/django.html\">Django</a> tutorials:</p>\n<ul>\n<li><a href=\"/bootstrap-css.html\">More Bootstrap resources</a></li>\n<li><a href=\"/blog/maps-django-web-applications-projects-mapbox.html\">How to Add Maps to Django Web App Projects with Mapbox</a></li>\n<li><a href=\"/blog/monitor-django-projects-web-apps-rollbar.html\">Monitoring Django Projects with Rollbar</a></li>\n</ul>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I am also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.\nIf you see an issue or error in this tutorial, please\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200705-bootstrap-4-django-template.markdown\">fork the source repository on GitHub</a>\nand submit a pull request with the fix.</p>\n</div>"},
{"title": "Learning pandas by Exploring COVID-19 Data", "body": "<div class=\"c9\">\n<p>The\n<a href=\"https://www.ecdc.europa.eu/en\">European Centre for Disease Prevention and Control</a>\nprovides\n<a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">daily-updated worldwide COVID-19 data</a>\nthat is easy to download in JSON, CSV or XML formats. In this tutorial,\nwe will use the <a href=\"/pandas.html\">pandas</a> data analysis tool on the\ncomma-separated values (CSV) data to learn some of the basic pandas\ncommands and explore what is contained within the data set.</p>\n<h2>Configuring our development environment</h2>\n<p>Make sure you have Python 3 installed. As of right now,\n<a href=\"https://www.python.org/downloads/\">Python 3.8.2</a> is the latest.</p>\n<p>During this tutorial we're also going to use\n<a href=\"https://pandas.pydata.org/\">pandas</a>.</p>\n<p>Install it now into a new virtual environment with the following\ncommands:</p>\n<div class=\"highlight\"><pre><span></span>python -m venv covidpandas\nsource covidpandas/bin/activate\n\npip install pandas\n</pre></div>\n<p>We are now ready to get the COVID-19 data and start analyzing it with\npandas.</p>\n<h2>Obtaining the COVID-19 data</h2>\n<p>Go to the\n<a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">download today\u2019s data on the geographic distribution of COVID-19 cases worldwide</a>\npage in your web browser. It should look something like the following\nscreenshot. </p>\n<p><img src=\"/img/200328-covid-19-pandas/covid-19-data-download.png\" width=\"100%\" class=\"shot rnd outl\" alt=\"Download the CSV version of the COVID-19 data.\"></p>\n<p>There should be a link to download the\ndata in CSV format, but the organization has changed the page layout\nseveral times in the past few weeks, which makes it difficult to find\nformats other than Excel (XLSX). If you have trouble obtaining the\nCSV version, just download\n<a href=\"https://raw.githubusercontent.com/fullstackpython/blog-code-examples/master/pandas-covid-19/covid-19-cases-march-28-2020.csv\">this one from GitHub</a>\nwhich is pegged to a copy downloaded on March 28th, 2020.</p>\n<h2>Importing the CSV into pandas</h2>\n<p>We have the data in a CSV now we need to import it into a pandas\nDataFrame.</p>\n<p>Start by running the Python REPL:</p>\n<div class=\"highlight\"><pre><span></span>python\n\n&gt;&gt;&gt;\n</pre></div>\n<p>The REPL is ready to go, now we need to import pandas so we can read\nthe data we downloaded.</p>\n<div class=\"highlight\"><pre><span></span>from pandas import read_csv\n\ndf = read_csv(\"covid-19-cases-march-28-2020.csv\")\n</pre></div>\n<p>Don't worry if you get an error like\n<code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7...</code>.\nRun this command instead which explicitly sets the file encoding\nso pandas can properly read the CSV.</p>\n<div class=\"highlight\"><pre><span></span># make sure the file name of the csv matches your file's name!\ndf = read_csv(\"covid-19-cases-march-28-2020.csv\", encoding=\"ISO-8859-1\")\n</pre></div>\n<p>We now have our data loaded into a\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\">pandas DataFrame</a>\nand can start running code to poke and prod and what's inside the\ndata set.</p>\n<h2>Running pandas commands</h2>\n<p>Let's first take a peek at what a sample of the data looks like. I\ntypically run the <code>head</code> and <code>tail</code> functions when I open something\nup to find out what are contained in the first five and last five rows.</p>\n<div class=\"highlight\"><pre><span></span>df.head()\n</pre></div>\n<p>You should see six lines of output: one as the columns header and the\nfirst five rows of data from the CSV:</p>\n<div class=\"highlight\"><pre><span></span>      dateRep  day  month  year  cases  deaths countriesAndTerritories geoId countryterritoryCode  popData2018\n0  28/03/2020   28      3  2020     16       1             Afghanistan    AF                  AFG   37172386.0\n1  27/03/2020   27      3  2020      0       0             Afghanistan    AF                  AFG   37172386.0\n2  26/03/2020   26      3  2020     33       0             Afghanistan    AF                  AFG   37172386.0\n3  25/03/2020   25      3  2020      2       0             Afghanistan    AF                  AFG   37172386.0\n4  24/03/2020   24      3  2020      6       1             Afghanistan    AF                  AFG   37172386.0\n</pre></div>\n<p>The <code>tail</code> function looks at the last five rows in a DataFrame.</p>\n<div class=\"highlight\"><pre><span></span>df.tail()\n</pre></div>\n<p><code>tail</code> output will look something like this:</p>\n<div class=\"highlight\"><pre><span></span>         dateRep  day  month  year  cases  deaths countriesAndTerritories geoId countryterritoryCode  popData2018\n7315  25/03/2020   25      3  2020      0       0                Zimbabwe    ZW                  ZWE   14439018.0\n7316  24/03/2020   24      3  2020      0       1                Zimbabwe    ZW                  ZWE   14439018.0\n7317  23/03/2020   23      3  2020      0       0                Zimbabwe    ZW                  ZWE   14439018.0\n7318  22/03/2020   22      3  2020      1       0                Zimbabwe    ZW                  ZWE   14439018.0\n7319  21/03/2020   21      3  2020      1       0                Zimbabwe    ZW                  ZWE   14439018.0\n</pre></div>\n<p>Note that you can also pass an integer into <code>head</code> or <code>tail</code> like\n<code>df.head(10)</code> to get the first or last <strong>n</strong> number of rows.</p>\n<p>It looks like based on the <code>tail</code> function we have around 7320 rows of\ndata (since the first row is 0 indexed). We can confirm how much\ndata is in each column with the <code>count</code> function.</p>\n<div class=\"highlight\"><pre><span></span>df.count()\n</pre></div>\n<p><code>count</code>'s output will look like:</p>\n<div class=\"highlight\"><pre><span></span>dateRep                    7320\nday                        7320\nmonth                      7320\nyear                       7320\ncases                      7320\ndeaths                     7320\ncountriesAndTerritories    7320\ngeoId                      7306\ncountryterritoryCode       7254\npopData2018                7311\ndtype: int64\n</pre></div>\n<p>What if we want to look at one of those columns and find, for example,\nthe highest value of cases?</p>\n<div class=\"highlight\"><pre><span></span>df.cases.max()\n</pre></div>\n<p>In this data set we get 18695 as the output. What about looking at\nstandard statistical measures across all columns? That's where the\n<code>describe</code> function comes in handy.</p>\n<div class=\"highlight\"><pre><span></span>df.describe()\n</pre></div>\n<p><code>describe</code> presents standard statistical measures such as min, max,\nmedian and mean for everything in your data set. In this case we\nreceive as output:</p>\n<div class=\"highlight\"><pre><span></span>               day        month         year         cases       deaths   popData2018\ncount  7320.000000  7320.000000  7320.000000   7320.000000  7320.000000  7.311000e+03\nmean     16.828142     2.249454  2019.990847     80.870355     3.687158  7.130483e+07\nstd       8.322981     1.256463     0.095239    608.270244    35.327689  2.140624e+08\nmin       1.000000     1.000000  2019.000000     -9.000000     0.000000  1.000000e+03\n25%      10.000000     1.000000  2020.000000      0.000000     0.000000  4.137309e+06\n50%      18.000000     2.000000  2020.000000      0.000000     0.000000  1.072767e+07\n75%      24.000000     3.000000  2020.000000      5.000000     0.000000  5.139301e+07\nmax      31.000000    12.000000  2020.000000  18695.000000   971.000000  1.392730e+09\n</pre></div>\n<p>How about a quick view into whether or not columns' data are correlated\nwith each other? The <code>corr</code> function is what we need.</p>\n<div class=\"highlight\"><pre><span></span>df.corr()\n</pre></div>\n<p>For our data set, <code>corr</code> outputs:</p>\n<div class=\"highlight\"><pre><span></span>                  day     month      year     cases    deaths  popData2018\nday          1.000000  0.203006 -0.163665  0.063629  0.060075    -0.040677\nmonth        0.203006  1.000000 -0.745912  0.062494  0.052707    -0.039131\nyear        -0.163665 -0.745912  1.000000  0.012715  0.010032    -0.006294\ncases        0.063629  0.062494  0.012715  1.000000  0.716968     0.136580\ndeaths       0.060075  0.052707  0.010032  0.716968  1.000000     0.082229\npopData2018 -0.040677 -0.039131 -0.006294  0.136580  0.082229     1.000000\n</pre></div>\n<p>Not surprisingly, we see 1.000000 correlation between a column and itself.\nWe'd have to worry if we didn't see that result! For other columns it may\nnot make sense to look at their correlation. This is where you need to\nthink about the data. There is often correlation between completely unrelated\ncolumns just because the data is structured a certain way. </p>\n<p>If you are a developer like me without a rigorous background in statistics\n(Stats 200 in college was a <strong>long</strong> time ago), you may need to brush up\non your stats knowledge before you are able to say whether something in the\ndata matters or not.</p>\n<p>Let's keep going exploring the data. We can select columns and determine how\nmany unique items are held within it. For example, how many unique countries\nand territories are listed?</p>\n<div class=\"highlight\"><pre><span></span>df.countriesAndTerritories.nunique()\n</pre></div>\n<p>In this case the result should be 196.</p>\n<h2>Asking questions of the data</h2>\n<p>Those functions are fine for basic querying to learn what's in the\ndata set, but how do we ask real questions by stringing together some\ncommands?</p>\n<p>We now know there are 7320 rows in this set since we used the <code>count</code>\nfunction above. Each row represents a single day within a country. Now\nto ask a question. How many days across these countries were there 10\nor more cases reported?</p>\n<p>Let's create a new dataframe named df2 with the rows that only have\n10 or more cases reported on that day, then count the number of rows\nwithin it.</p>\n<div class=\"highlight\"><pre><span></span>df2 = df[df['cases']&gt;=10]\ndf2.count()\n</pre></div>\n<p>That should give us the value 1531. There have been 1531 instances\nof 10 or more COVID-19 cases reported on a single day, across the\n196 countries or terrorities listed. But the 1531 is hard to explain\nto people. We should pick out a single country and show how many times\n10 or more cases were reported on one day. How about a smaller\ncountry like Vietnam that is not being reported on as much as China,\nthe United States or Italy?</p>\n<div class=\"highlight\"><pre><span></span>df2[df2['countriesAndTerritories']=='Vietnam']\n</pre></div>\n<p>This will give us the full output of data by column:</p>\n<div class=\"highlight\"><pre><span></span>         dateRep  day  month  year  cases  deaths countriesAndTerritories geoId countryterritoryCode  popData2018\n7217  28/03/2020   28      3  2020     16       0                 Vietnam    VN                  VNM   95540395.0\n7219  26/03/2020   26      3  2020     14       0                 Vietnam    VN                  VNM   95540395.0\n7220  25/03/2020   25      3  2020     11       0                 Vietnam    VN                  VNM   95540395.0\n7222  23/03/2020   23      3  2020     24       0                 Vietnam    VN                  VNM   95540395.0\n7226  19/03/2020   19      3  2020     15       0                 Vietnam    VN                  VNM   95540395.0\n</pre></div>\n<p>We can also use the <code>count</code> function here to confirm there have been\nfive days in which 10 or more new cases have been reported in Vietnam\nso far:</p>\n<div class=\"highlight\"><pre><span></span>df2[df2['countriesAndTerritories']=='Vietnam'].count()\n</pre></div>\n<p>We get the output of 5 for the columns. Unfortunately, when you look at\nthe full data it appears these rows are all very recent and the virus\nis just beginning to spread more widely there. Let's hope they along\nwith every other country is able to turn the tide, flatten the curve\nand keep more people from getting sick as we continue onwards.</p>\n<p>That's a good spot to leave off, but we covered a lot of pandas ground\nin this tutorial!</p>\n<h2>What's next?</h2>\n<p>We just imported and took a look at what's in the European Centre\nfor Disease Prevention and Control's COVID-19 data set using\n<a href=\"/pandas.html\">pandas</a>. That was a quick tour of some basic pandas\ncommands and I strongly recommend you peruse the\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/frame.html\">DataFrame documentation list</a>\nto learn about all of the other handy functions that this tool\nprovides to developers.</p>\n<p>You can also get an idea of what to code next in your Python project by\nreading the\n<a href=\"/table-of-contents.html\">Full Stack Python table of contents page</a>.</p>\n<p>Questions? Contact me via Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>. I'm also on GitHub with\nthe username <a href=\"https://github.com/mattmakai\">mattmakai</a>.</p>\n<p>Something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200328-explore-covid-pandas.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"},
{"title": "Higher Accuracy Twilio Voice Transcriptions with Python and Flask", "body": "<div class=\"c9\">\n<p><a href=\"https://www.twilio.com/docs/voice\">Twilio's Programmable Voice API</a>\nis commonly used to initiate and receive phone calls, but the transcription\naccuracy for <a href=\"https://www.twilio.com/docs/voice/api/recording\">recordings</a>\noften leaves a lot to be desired. In this tutorial, we'll see how to connect an\noutbound phone call powered by the Twilio Voice API with\n<a href=\"https://docs.assemblyai.com/guides/transcribing-an-audio-file-recording\">AssemblyAI's deep learning transcription API</a>\nto get significantly more accurate speech-to-text output.</p>\n<h2>Required Tools for this Application</h2>\n<p>Ensure you have Python 3 installed, because Python 2 reached its\nend-of-life at the beginning of 2020 and is no longer supported.\nPreferrably, you should have\n<a href=\"https://www.python.org/downloads/\">Python 3.6 or newer installed</a>\nin your <a href=\"/development-environments.html\">development environment</a>.\nThis tutorial will also use:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"https://requests.readthedocs.io/\">requests</a>, version\n<a href=\"https://pypi.org/project/requests/\">2.24.0</a>, for accessing the\n<a href=\"https://docs.assemblyai.com/overview/getting-started\">AssemblyAI transcription API</a></li>\n<li><a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>, version\n<a href=\"https://pypi.org/project/Flask/1.1.2/\">1.1.2</a>, to respond to Twilio's\nwebhooks</li>\n<li>A <a href=\"https://www.twilio.com/referral/w9pugq\">Twilio account</a>, of which a\nfree trial version is good enough to test this tutorial</li>\n<li><a href=\"https://pypi.org/project/twilio/\">Twilio Python helper library</a>,\nversion <a href=\"https://pypi.org/project/twilio/6.45.4/\">6.45.4</a> or newer,\nfor interacting with the <a href=\"https://www.twilio.com/docs/usage/api\">REST API</a></li>\n<li>An <a href=\"https://www.assemblyai.com/\">AssemblyAI</a> account, which you can sign\nup for a <a href=\"https://app.assemblyai.com/login/\">free key API access key here</a></li>\n<li><a href=\"https://ngrok.com/\">Ngrok</a> if you need a localhost tunnel to expose\na public URL that webhooks can send a POST request to</li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">accurate-twilio-voice-call-recording-transcriptions-assemblyai directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Configuring our development environment</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Start this Python project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/record-transcribe\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/record-transcribe/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is simply\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(record-transcribe) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the required packages\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install Flask==1.1.2 requests==2.24.0 twilio==6.45.4\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>(recordtranscribe) $ pip install Flask==1.1.2 requests==2.24.0 twilio=6.45.4\nCollecting Flask\n  Using cached https://files.pythonhosted.org/packages/f2/28/2a03252dfb9ebf377f40fba6a7841b47083260bf8bd8e737b0c6952df83f/Flask-1.1.2-py2.py3-none-any.whl\nCollecting requests\n  Using cached https://files.pythonhosted.org/packages/45/1e/0c169c6a5381e241ba7404532c16a21d86ab872c9bed8bdcd4c423954103/requests-2.24.0-py2.py3-none-any.whl\nCollecting twilio\n  Using cached https://files.pythonhosted.org/packages/d0/4e/7c377eb1a1d57f011dc1bee2fee77cf1e9a08407b8d44ea25a187a30c78d/twilio-6.45.4.tar.gz\nCollecting Werkzeug&gt;=0.15 (from Flask)\n  Using cached https://files.pythonhosted.org/packages/cc/94/5f7079a0e00bd6863ef8f1da638721e9da21e5bacee597595b318f71d62e/Werkzeug-1.0.1-py2.py3-none-any.whl\nCollecting itsdangerous&gt;=0.24 (from Flask)\n  Using cached https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl\nCollecting click&gt;=5.1 (from Flask)\n  Using cached https://files.pythonhosted.org/packages/d2/3d/fa76db83bf75c4f8d338c2fd15c8d33fdd7ad23a9b5e57eb6c5de26b430e/click-7.1.2-py2.py3-none-any.whl\nCollecting Jinja2&gt;=2.10.1 (from Flask)\n  Using cached https://files.pythonhosted.org/packages/30/9e/f663a2aa66a09d838042ae1a2c5659828bb9b41ea3a6efa20a20fd92b121/Jinja2-2.11.2-py2.py3-none-any.whl\nCollecting urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 (from requests)\n  Using cached https://files.pythonhosted.org/packages/9f/f0/a391d1463ebb1b233795cabfc0ef38d3db4442339de68f847026199e69d7/urllib3-1.25.10-py2.py3-none-any.whl\nCollecting idna&lt;3,&gt;=2.5 (from requests)\n  Using cached https://files.pythonhosted.org/packages/a2/38/928ddce2273eaa564f6f50de919327bf3a00f091b5baba8dfa9460f3a8a8/idna-2.10-py2.py3-none-any.whl\nCollecting certifi&gt;=2017.4.17 (from requests)\n  Using cached https://files.pythonhosted.org/packages/5e/c4/6c4fe722df5343c33226f0b4e0bb042e4dc13483228b4718baf286f86d87/certifi-2020.6.20-py2.py3-none-any.whl\nCollecting chardet&lt;4,&gt;=3.0.2 (from requests)\n  Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\nCollecting six (from twilio)\n  Using cached https://files.pythonhosted.org/packages/ee/ff/48bde5c0f013094d729fe4b0316ba2a24774b3ff1c52d924a8a4cb04078a/six-1.15.0-py2.py3-none-any.whl\nCollecting pytz (from twilio)\n  Using cached https://files.pythonhosted.org/packages/4f/a4/879454d49688e2fad93e59d7d4efda580b783c745fd2ec2a3adf87b0808d/pytz-2020.1-py2.py3-none-any.whl\nCollecting PyJWT&gt;=1.4.2 (from twilio)\n  Using cached https://files.pythonhosted.org/packages/87/8b/6a9f14b5f781697e51259d81657e6048fd31a113229cf346880bb7545565/PyJWT-1.7.1-py2.py3-none-any.whl\nCollecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.10.1-&gt;Flask)\n  Using cached https://files.pythonhosted.org/packages/0c/12/37f68957526d1ec0883b521934b4e1b8ff3dd8e4fab858a5bf3e487bcee9/MarkupSafe-1.1.1-cp38-cp38-macosx_10_9_x86_64.whl\nInstalling collected packages: Werkzeug, itsdangerous, click, MarkupSafe, Jinja2, Flask, urllib3, idna, certifi, chardet, requests, six, pytz, PyJWT, twilio\n  Running setup.py install for twilio ... done\nSuccessfully installed Flask-1.1.2 Jinja2-2.11.2 MarkupSafe-1.1.1 PyJWT-1.7.1 Werkzeug-1.0.1 certifi-2020.6.20 chardet-3.0.4 click-7.1.2 idna-2.10 itsdangerous-1.1.0 pytz-2020.1 requests-2.24.0 six-1.15.0 twilio-6.45.4 urllib3-1.25.10\n</pre></div>\n<p>We can get started coding the application now that we have all of our\nrequired dependencies installed.</p>\n<h2>Building our application</h2>\n<p>Time to dig into the code! We're going to write three source files in\nthis application:</p>\n<ul>\n<li><code>app.py</code>: a Flask app that will handle the phone call and recording</li>\n<li><code>transcribe.py</code>: a short Python script to invoke AssemblyAI with the\nrecording and start the transcription process</li>\n<li><code>print_transcription.py</code>: a script to print the output of the\ntranscription to the terminal</li>\n</ul>\n<p>Remember that you can get access to all three of the completed files in the\n<code>accurate-twilio-voice-call-recording-transcriptions-assemblyai</code> directory\nof the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">blog-code-examples</a>\nGit repository if you do not want to type or copy from the blog post\nitself.</p>\n<p>Create a new directory named <code>record-transcribe</code> to store your source files\nand change into the new directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir record-transcribe\ncd record-transcribe\n</pre></div>\n<p>Create a new file named <code>app.py</code> with the following code:</p>\n<div class=\"highlight\"><pre><span></span>import os                                                                                                                                                                                                                                     \nfrom flask import Flask, request\nfrom twilio.twiml.voice_response import VoiceResponse\nfrom twilio.rest import Client\n\n\napp = Flask(__name__)\n\n# pulls credentials from environment variables\nclient = Client()\n\nBASE_URL = os.getenv(\"BASE_URL\")\ntwiml_instructions_url = \"{}/record\".format(BASE_URL)\nrecording_callback_url = \"{}/callback\".format(BASE_URL)\ntwilio_phone_number = os.getenv(\"TWILIO_PHONE_NUMBER\")\n\n\n@app.route(\"/record\", methods=[\"GET\", \"POST\"])\ndef record():\n    \"\"\"Returns TwiML which prompts the caller to record a message\"\"\"\n    # Start our TwiML response\n    response = VoiceResponse()\n\n    # Use &lt;Say&gt; to give the caller some instructions\n    response.say('Ahoy! Call recording starts now.')\n\n    # Use &lt;Record&gt; to record the caller's message\n    response.record()\n\n    # End the call with &lt;Hangup&gt;\n    response.hangup()\n\n    return str(response)\n</pre></div>\n<p>There are a couple more functions we'll need to add to <code>app.py</code> but first\nlet's take a look at what the above code does. </p>\n<p>We imported parts of both the Flask and Twilio helper libraries, which will\nenable us to programmatically create and control phone calls that Twilio\nrecords. Note that when we instantiate the Twilio helper library with the\nempty <code>Client()</code> constructor, it automatically looks to read two environment\nvariables, <code>TWILIO_ACCOUNT_SID</code> and <code>TWILIO_AUTH_TOKEN</code> to gain appropriate\npermissions to your Twilio account. If those two environment variables\nare not set with those exact names then you will need to explicitly pass\nthe Account SID and Auth Token for your account into the constructor.</p>\n<p>After the import are the Flask and Twilio library instantiations.\nThen we configure the <code>BASE_URL</code> by reading from an environment variable.\nIn this tutorial the <code>BASE_URL</code> will be from Ngrok, but it can also\nbe your domain where your application is deployed, such as\n\"https://www.twilio.com\". We have not yet set these environment variables,\nbut we will shortly after we finish writing <code>app.py</code>.</p>\n<p>After setting <code>BASE_URL</code>, and the three other variables set by environment\nvariables, we have the <code>record</code> function. This function is a\n<a href=\"https://hackersandslackers.com/flask-routes/\">Flask route</a> that\ngenerates the <a href=\"https://www.twilio.com/docs/voice/twiml\">TwiML</a>\nthat tells Twilio how to handle a phone call. First, an automated voice\nalerts the person who picks up that the phone call is being recorded. Then\nthe recording starts. Whatever the person on the call says will be recorded\nand stored by Twilio.</p>\n<p>Finish <code>app.py</code> by adding these two following functions after the\n<code>record</code> function:</p>\n<div class=\"highlight\"><pre><span></span>@app.route(\"/dial/&lt;int:phone_number&gt;\")\ndef dial(phone_number):\n    \"\"\"Dials an outbound phone call to the number in the URL. Just\n    as a heads up you will never want to leave a URL like this exposed\n    without authentication and further phone number format verification.\n    phone_number should be just the digits with the country code first,\n    for example 14155559812.\"\"\"\n    call = client.calls.create(\n            to='+{}'.format(phone_number),\n            from_=twilio_phone_number,\n            url=twiml_instructions_url,\n    )\n    print(call.sid)\n    return \"dialing +{}. call SID is: {}\".format(phone_number, call.sid)\n\n\n@app.route(\"/get-recording-url/&lt;call_sid&gt;\")\ndef get_recording_url(call_sid):\n    recording_urls = \"\"\n    call = client.calls.get(call_sid)\n    for r in call.recordings.list():\n        recording_urls=\"<span class=\"se\">\\n</span>\".join([recording_urls, r.uri])\n    return str(recording_urls)\n</pre></div>\n<p>The <code>dial</code> function creates a Flask route that takes a phone number\ninput as part of the second level path. Note that in a production\napplication you <em>must</em> have better phone number validation or you\nwill have a security issue with unsanitized inputs. We are doing\nthis here to easily grab a phone number as input rather than having\nto build a whole user interface with an HTML form just to grab a\nphone number. <code>dial</code> calls the\n<a href=\"https://www.twilio.com/docs/voice\">Twilio Voice API</a> using our\nTwilio account credentials so that we can dial an outbound phone\ncall to the number sent in through the URL. The <code>twiml_instructions_url</code>\nshould be set to the <code>record</code> function URL so that it can give the\nproper dialing and recording TwiML instructions for how Twilio's\nservice should handle dialing the phone call.</p>\n<p>Once we dial the outbound phone call, the\n<a href=\"https://support.twilio.com/hc/en-us/articles/223180488-What-is-a-Call-SID-\">call SID</a>\nis printed to the terminal. We'll need that call SID to get the\nrecording after the call is finished.</p>\n<p>Our <code>app.py</code> file is all done. We just need to export our environment\nvariables for our Twilio credentials. </p>\n<p><a href=\"https://www.twilio.com/referral/w9pugq\">Sign up for Twilio</a> or\n<a href=\"https://www.twilio.com/console\">log into your existing account</a>.\nOnce you get to the <a href=\"https://www.twilio.com/console\">Twilio Console</a>,\nyou can obtain your <code>TWILIO_ACCOUNT_SID</code> and <code>TWILIO_AUTH_TOKEN</code> on the\nright side of the page:</p>\n<p><img src=\"/img/201009-twilio-flask-assemblyai/twilio-console.png\" width=\"100%\" alt=\"Twilio Console.\" class=\"shot rnd outl\"></p>\n<p>When you sign up you should have a phone number assigned to your account.\nYou can use that or\n<a href=\"https://www.twilio.com/console/phone-numbers/search\">purchase a new phone number</a>\nto use.</p>\n<p>Set three environment variables with the names <code>TWILIO_ACCOUNT_SID</code>,\n<code>TWILIO_AUTH_TOKEN</code>, and <code>TWILIO_PHONE_NUMBER</code> using the <code>export</code> command\nin your terminal. Make sure to replace the values with your own Account SID,\nAuth Token and Twilio phone number.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">TWILIO_ACCOUNT_SID</span>=xxxxxxxxxxxxx    # found in twilio.com/console\nexport <span class=\"nv\">TWILIO_AUTH_TOKEN</span>=yyyyyyyyyyyyyy    # found in twilio.com/console\nexport <span class=\"nv\">TWILIO_PHONE_NUMBER</span>=+17166382453    # replace with your Twilio number\n</pre></div>\n<p>Note that you must use the <code>export</code> command in every command line window\nthat you want this key to be accessible. The scripts we are writing will\nnot be able to access the Twilio APIs if you do not have the tokens exported\nin the environment where you are running the script.</p>\n<p>There is one more environment variable to set before we can run <code>app.py</code>.\nWe need to use Ngrok as a localhost tunnel so that Twilio's webhook can\nsend an HTTP POST request to our <code>app.py</code> Flask application running on\nour local development environment.</p>\n<p>Run Ngrok in a new terminal window, because you will need to keep it\nrunning while we run our other Python code:</p>\n<div class=\"highlight\"><pre><span></span>./ngrok http <span class=\"m\">5000</span>\n</pre></div>\n<p><img src=\"/img/201009-twilio-flask-assemblyai/ngrok.jpg\" width=\"100%\" alt=\"Ngrok running with a localhost tunnel.\" class=\"shot rnd outl\"></p>\n<p>Copy the HTTPS version of the \"Forwarding\" URL and set the <code>BASE_URL</code>\nenvironment variable value to it. For example, in this screenshot you\nwould set <code>BASE_URL</code> to <code>https://7f9139eaf445.ngrok.io</code> using the\nfollowing command:</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">BASE_URL</span>=https://7f9139eaf445.ngrok.io    # use your ngrok URL, or domain. no trailing slash\n</pre></div>\n<p>Okay, we can finally run <code>app.py</code>. Make sure you are still running Ngrok\nin a different window, your virtualenv is active and that in this terminal\nyou have your four environment variables set, then run the <code>flask run</code>\ncommand:</p>\n<div class=\"highlight\"><pre><span></span>flask run\n</pre></div>\n<p>You should see Flask output something like the following text:</p>\n<div class=\"highlight\"><pre><span></span> * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</pre></div>\n<p>That is a legitimate warning: only use this command for\ndevelopment purposes and when you want to <a href=\"/deployment.html\">deploy</a>\nto production you need to use a real <a href=\"/wsgi-servers.html\">WSGI server</a>\nlike <a href=\"/green-unicorn-gunicorn.html\">Gunicorn</a>.</p>\n<p>Time to test out our application.</p>\n<h2>Testing Twilio Programmable Voice Recording</h2>\n<p>We can test our application by going to localhost on port 5000.\nGo to this URL in your web browser, replacing the \"14155551234\"\nwith the phone number you want to call, where the person on the\nline will be recorded: http://localhost:5000/dial/14155551234.</p>\n<p>That number should now receive a phone call from your Twilio\nnumber. Pick up, record a message that you want to use to test\nthe transcription, and then hang up.</p>\n<p>If you get an error, make sure all of your environment variables\nare set. You can check the values by using the echo command like\nthis:</p>\n<div class=\"highlight\"><pre><span></span>echo <span class=\"nv\">$BASE_URL</span>\n</pre></div>\n<p>When the call is over, copy the call SID show on the web page\nso that we can use it to look up where the recording audio\nfile is stored.</p>\n<p><img src=\"/img/201009-twilio-flask-assemblyai/dial-call-sid.png\" width=\"100%\" alt=\"Twilio call SID.\" class=\"shot rnd outl\"></p>\n<p>Go to \"localhost:5000/get-recording-url/\" with the call SID\nat the end. For example,\n\"localhost:5000/get-recording-url/CAda3f2f49ff4e8ef2be6b726edb998c92\".</p>\n<p><img src=\"/img/201009-twilio-flask-assemblyai/call-recording-url.png\" width=\"100%\" alt=\"Twilio call recording URL.\" class=\"shot rnd outl\"></p>\n<p>Copy the entire output except for the \".json\" at the end, then paste\nit into the web browser's URL bar, prepended with \"api.twilio.com\".\nFor example,\n\"https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300\".\nThis will bring up the recording. Copy the entire URL and we will use it\nas input into the AssemblyAI service.</p>\n<h2>Transcribing with the AssemblyAI API</h2>\n<p>We can now use the AssemblyAI API for speech-to-text transcription on\nthe call recording that was just made.</p>\n<p><a href=\"https://app.assemblyai.com/login/\">Sign up for an AssemblyAI account</a>\nand log in to the\n<a href=\"https://app.assemblyai.com/dashboard/\">AssemblyAI dashboard</a>, then\ncopy \"Your API token\" as shown in this screenshot:</p>\n<p><img src=\"/img/200809-transcription-assemblyai/assemblyai-dashboard.png\" width=\"100%\" alt=\"AssemblyAI dashboard.\" class=\"shot rnd outl\"></p>\n<p>We need to export our AssemblyAI API key as an environment variable\nso that our Python application can use it to authenticate with their\nAPI. We also need to pass the publicly-accessible URL for the recording,\nso we'll set that as an environment variable as well.</p>\n<div class=\"highlight\"><pre><span></span># make sure to replace this URL with the one for your recording\nexport <span class=\"nv\">ASSEMBLYAI_KEY</span>=your-api-key-here\nexport <span class=\"nv\">RECORDING_URL</span>=https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300\n</pre></div>\n<p>Create a new file named <code>transcribe.py</code> and write the following code in it:</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport requests\n\nendpoint = \"https://api.assemblyai.com/v2/transcript\"\n\njson = {\n  \"audio_url\": os.getenv(\"RECORDING_URL\")\n}\n\nheaders = {\n    \"authorization\": os.getenv(\"ASSEMBLYAI_KEY\"),\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.post(endpoint, json=json, headers=headers)\n\nprint(response.json())\n</pre></div>\n<p>The above code calls the AssemblyAI transcription service using\nthe secret key and passes it the URL with the file recording.\nThe script prints out the JSON response from the service,\nwhich will contain a transcription ID that we'll use to access\nthe results after they finish processing.</p>\n<p>Run the script using the <code>python</code> command:</p>\n<div class=\"highlight\"><pre><span></span>python transcribe.py\n</pre></div>\n<p>You will get back some JSON as output, similar what you see here:</p>\n<div class=\"highlight\"><pre><span></span>{'audio_end_at': None, 'acoustic_model': 'assemblyai_default', 'text': None, 'audio_url': 'https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300', 'speed_boost': False, 'language_model': 'assemblyai_default', 'redact_pii': False, 'confidence': None, 'webhook_status_code': None, 'id': 'zibe9vwmx-82ce-476c-85a7-e82c09c67daf', 'status': 'queued',\n'boost_param': None, 'words': None, 'format_text': True, 'webhook_url': None, 'punctuate': True, 'utterances': None, 'audio_duration': None, 'auto_highlights': False, 'word_boost': <span class=\"o\">[]</span>, 'dual_channel': None, 'audio_start_from': None}\n</pre></div>\n<p>Find the value contained with the <code>id</code> field of the JSON response. We need\nthat value to look up the final result of our transcription. Copy the\ntranscription ID and set it as an environment variable to use as input by\nthe final script:</p>\n<div class=\"highlight\"><pre><span></span># replace with what's found within `id` from the JSON response\nexport TRANSCRIPTION_ID=aksd19vwmx-82ce-476c-85a7-e82c09c67daf\n</pre></div>\n<p>We just need a little more Python that looks up the result and we'll be all\ndone.</p>\n<h2>Retrieve the AssemblyAI Transcription</h2>\n<p>AssemblyAI will be busy transcribing the recording. Depending on the size of\nthe file it can take anywhere from a few seconds to a few minutes for the\njob to complete. We can use the following code to see if the job is still\nin progress or it has completed. If the transcription is done it will print\nthe results to the terminal.</p>\n<p>Create a new file named <code>print_transcription.py</code> with the following code:</p>\n<div class=\"highlight\"><pre><span></span>import os\nimport requests\n\nendpoint = \"https://api.assemblyai.com/v2/transcript/{}\".format(os.getenv(\"TRANSCRIPTION_ID\"))\n\nheaders = {\n    \"authorization\": os.getenv(\"ASSEMBLYAI_KEY\"),\n}\n\nresponse = requests.get(endpoint, headers=headers)\n\nprint(response.json())\nprint(\"<span class=\"se\">\\n\\n</span>\")\nprint(response.json()['text'])\n</pre></div>\n<p>The code above in <code>print_transcription.py</code> is very similar to the code\nin the previous <code>transcribe.py</code> source file. imports <code>os</code> (operating system)\nfrom the Python standard library, as we did in the previous two files,\nto obtain the <code>TRANSCRIPTION_ID</code> and <code>ASSEMBLYAI_KEY</code> environment variable\nvalues.</p>\n<p>The <code>endpoint</code> is simply the AssemblyAI API endpoint for retrieving\ntranscriptions. We set the appropriate <code>authorization</code> header and\nmake the API call using the <code>requests.get</code> function. We then print\nout the JSON response as well as just the text that was transcribed.</p>\n<p>Time to test out this third file. Execute the following command in\nthe terminal:</p>\n<div class=\"highlight\"><pre><span></span>python print_transcription.py\n</pre></div>\n<p>Your output will be different based on your recording but you should see a\nresult in the terminal similar to the following:</p>\n<div class=\"highlight\"><pre><span></span>{'audio_end_at': None, 'acoustic_model': 'assemblyai_default', 'auto_highlights_result': None, 'text': 'An object relational mapper is a code library that automates the transfer of data stored in a relational database tables into objects that are more commonly used in application. Code or MS provide a high level abstraction upon a relational database that allows the developer to write Python code. Instead of sequel to create read update and delete data and schemas in their database developers can use the programming language that they are comfortable with comfortable to work with the database instead of writing sequel statements or short procedures.', 'audio_url': 'https://api.twilio.com/2010-04-01/Accounts/ACe3737affa0d2e17561ad44c9d190e70c/Recordings/RE3b42cf470bef829c3680ded961a09300', 'speed_boost': False, 'language_model': 'assemblyai_default', 'id': 'zibe9vwmx-82ce-476c-85a7-e82c09c67daf', 'confidence': <span class=\"m\">0</span>.931797752808989, 'webhook_status_code': None, 'status': 'completed', 'boost_param': None, 'redact_pii': False, 'words': <span class=\"o\">[{</span>'text': 'An', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">90</span>, 'start': <span class=\"m\">0</span>}, {'text': 'object', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">570</span>, 'start': <span class=\"m\">210</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">1080</span>, 'start': <span class=\"m\">510</span>}, {'text': 'mapper', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">1380</span>, 'start': <span class=\"m\">1020</span>}, {'text': 'is', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">1560</span>, 'start': <span class=\"m\">1350</span>}, {'text': 'a', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">1620</span>, 'start': <span class=\"m\">1500</span>}, {'text': 'code', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">1920</span>, 'start': <span class=\"m\">1620</span>}, {'text': 'library', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">2250</span>, 'start': <span class=\"m\">1860</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">2490</span>, 'start': <span class=\"m\">2220</span>}, {'text': 'automates', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">2940</span>, 'start': <span class=\"m\">2430</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">3150</span>, 'start': <span class=\"m\">2910</span>}, {'text': 'transfer', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">3510</span>, 'start': <span class=\"m\">3090</span>}, {'text': 'of', 'confidence':\n<span class=\"m\">0</span>.99, 'end': <span class=\"m\">3660</span>, 'start': <span class=\"m\">3480</span>}, {'text': 'data', 'confidence': <span class=\"m\">0</span>.84, 'end': <span class=\"m\">3960</span>, 'start': <span class=\"m\">3630</span>}, {'text': 'stored', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">4350</span>, 'start': <span class=\"m\">3900</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">4500</span>, 'start': <span class=\"m\">4290</span>}, {'text': 'a', 'confidence': <span class=\"m\">0</span>.85, 'end': <span class=\"m\">4560</span>, 'start': <span class=\"m\">4440</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.87, 'end': <span class=\"m\">5580</span>, 'start': <span class=\"m\">4500</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.92, 'end':\n<span class=\"m\">6030</span>, 'start': <span class=\"m\">5520</span>}, {'text': 'tables', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">6330</span>, 'start': <span class=\"m\">5970</span>}, {'text': 'into', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">7130</span>, 'start': <span class=\"m\">6560</span>}, {'text': 'objects', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">7490</span>, 'start': <span class=\"m\">7100</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">7700</span>, 'start': <span class=\"m\">7430</span>}, {'text': 'are', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">7850</span>, 'start': <span class=\"m\">7640</span>}, {'text': 'more', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">8030</span>, 'start': <span class=\"m\">7790</span>}, {'text': 'commonly', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">8480</span>, 'start': <span class=\"m\">7970</span>}, {'text': 'used', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">8750</span>, 'start': <span class=\"m\">8420</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">9050</span>, 'start': <span class=\"m\">8840</span>}, {'text': 'application.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">9860</span>, 'start': <span class=\"m\">9110</span>}, {'text': 'Code', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">10040</span>, 'start': <span class=\"m\">9830</span>}, {'text': 'or', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">11210</span>, 'start': <span class=\"m\">10220</span>}, {'text': 'MS', 'confidence': <span class=\"m\">0</span>.83, 'end': <span class=\"m\">11480</span>, 'start': <span class=\"m\">11180</span>}, {'text': 'provide', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">11870</span>, 'start': <span class=\"m\">11510</span>}, {'text': 'a', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">11960</span>, 'start': <span class=\"m\">11840</span>}, {'text': 'high', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">12200</span>, 'start': <span class=\"m\">11930</span>}, {'text': 'level', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">12440</span>, 'start': <span class=\"m\">12170</span>}, {'text': 'abstraction', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">12980</span>, 'start': <span class=\"m\">12410</span>}, {'text':\n'upon', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">13220</span>, 'start': <span class=\"m\">12950</span>}, {'text': 'a', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">13280</span>, 'start': <span class=\"m\">13160</span>}, {'text': 'relational', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">13820</span>, 'start': <span class=\"m\">13280</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">14210</span>, 'start': <span class=\"m\">13790</span>}, {'text': 'that', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">14420</span>, 'start': <span class=\"m\">14150</span>}, {'text': 'allows', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">14720</span>, 'start': <span class=\"m\">14360</span>}, {'text':\n'the', 'confidence': <span class=\"m\">0</span>.56, 'end': <span class=\"m\">14870</span>, 'start': <span class=\"m\">14690</span>}, {'text': 'developer', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">15290</span>, 'start': <span class=\"m\">14810</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">15410</span>, 'start': <span class=\"m\">15230</span>}, {'text': 'write', 'confidence': <span class=\"m\">0</span>.96, 'end': <span class=\"m\">15680</span>, 'start': <span class=\"m\">15380</span>}, {'text': 'Python', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">16070</span>, 'start': <span class=\"m\">15620</span>}, {'text': 'code.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">16310</span>, 'start': <span class=\"m\">16070</span>}, {'text': 'Instead', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">17160</span>, 'start': <span class=\"m\">16500</span>}, {'text': 'of', 'confidence': <span class=\"m\">0</span>.93, 'end': <span class=\"m\">17340</span>, 'start': <span class=\"m\">17130</span>}, {'text': 'sequel', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">17820</span>, 'start': <span class=\"m\">17280</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.91, 'end': <span class=\"m\">18090</span>, 'start': <span class=\"m\">17880</span>}, {'text': 'create', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">18450</span>, 'start': <span class=\"m\">18090</span>}, {'text': 'read', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">18840</span>, 'start': <span class=\"m\">18480</span>}, {'text': 'update', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">19290</span>, 'start': <span class=\"m\">18870</span>}, {'text': 'and', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">19590</span>, 'start': <span class=\"m\">19230</span>}, {'text': 'delete', 'confidence': <span class=\"m\">0</span>.89, 'end': <span class=\"m\">19920</span>, 'start': <span class=\"m\">19530</span>}, {'text': 'data',\n'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">20190</span>, 'start': <span class=\"m\">19890</span>}, {'text': 'and', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">20490</span>, 'start': <span class=\"m\">20250</span>}, {'text': 'schemas', 'confidence': <span class=\"m\">0</span>.86, 'end': <span class=\"m\">21000</span>, 'start': <span class=\"m\">20430</span>}, {'text': 'in', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">21210</span>, 'start': <span class=\"m\">21000</span>}, {'text': 'their', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">21510</span>, 'start': <span class=\"m\">21150</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">21900</span>, 'start': <span class=\"m\">21450</span>}, {'text': 'developers', 'confidence': <span class=\"m\">0</span>.83, 'end': <span class=\"m\">23200</span>, 'start': <span class=\"m\">22420</span>}, {'text': 'can', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">23440</span>, 'start': <span class=\"m\">23200</span>}, {'text': 'use', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">23650</span>, 'start': <span class=\"m\">23410</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">23890</span>, 'start': <span class=\"m\">23590</span>}, {'text': 'programming', 'confidence': <span class=\"m\">0</span>.97, 'end': <span class=\"m\">24370</span>, 'start': <span class=\"m\">23830</span>}, {'text': 'language', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">24700</span>, 'start': <span class=\"m\">24310</span>}, {'text': 'that', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">24880</span>, 'start': <span class=\"m\">24640</span>}, {'text': 'they', 'confidence': <span class=\"m\">0</span>.99, 'end': <span class=\"m\">25060</span>, 'start': <span class=\"m\">24820</span>}, {'text': 'are', 'confidence': <span class=\"m\">0</span>.85, 'end': <span class=\"m\">25210</span>, 'start': <span class=\"m\">25000</span>}, {'text': 'comfortable', 'confidence': <span class=\"m\">0</span>.92, 'end': <span class=\"m\">25780</span>, 'start': <span class=\"m\">25180</span>}, {'text': 'with', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">25960</span>, 'start': <span class=\"m\">25720</span>}, {'text': 'comfortable', 'confidence': <span class=\"m\">0</span>.94, 'end': <span class=\"m\">29090</span>, 'start': <span class=\"m\">28090</span>}, {'text': 'to', 'confidence': <span class=\"m\">0</span>.84, 'end': <span class=\"m\">29840</span>, 'start': <span class=\"m\">29180</span>}, {'text': 'work', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">30050</span>, 'start': <span class=\"m\">29780</span>}, {'text': 'with', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">30290</span>, 'start': <span class=\"m\">30020</span>}, {'text': 'the', 'confidence': <span class=\"m\">0</span>.69, 'end': <span class=\"m\">30440</span>, 'start': <span class=\"m\">30230</span>}, {'text': 'database', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">30860</span>, 'start': <span class=\"m\">30380</span>}, {'text': 'instead', 'confidence': <span class=\"m\">1</span>.0, 'end': <span class=\"m\">32780</span>, 'start': <span class=\"m\">31780</span>}, {'text': 'of', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">32900</span>, 'start': <span class=\"m\">32720</span>}, {'text': 'writing', 'confidence': <span class=\"m\">0</span>.87, 'end': <span class=\"m\">33320</span>, 'start': <span class=\"m\">32870</span>}, {'text': 'sequel', 'confidence': <span class=\"m\">0</span>.88, 'end': <span class=\"m\">33860</span>, 'start': <span class=\"m\">33290</span>}, {'text': 'statements', 'confidence': <span class=\"m\">0</span>.95, 'end': <span class=\"m\">34310</span>, 'start': <span class=\"m\">33800</span>}, {'text': 'or', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">34460</span>, 'start': <span class=\"m\">34250</span>}, {'text': 'short', 'confidence': <span class=\"m\">0</span>.9, 'end': <span class=\"m\">34790</span>, 'start': <span class=\"m\">34430</span>}, {'text': 'procedures.', 'confidence': <span class=\"m\">0</span>.98, 'end': <span class=\"m\">35270</span>, 'start': <span class=\"m\">34760</span><span class=\"o\">}]</span>, 'format_text': True, 'webhook_url': None, 'punctuate': True, 'utterances': None, 'audio_duration': <span class=\"m\">36</span>.288, 'auto_highlights': False, 'word_boost': <span class=\"o\">[]</span>,\n'dual_channel': None, 'audio_start_from': None}\n\n\nAn object relational mapper is a code library that automates the transfer of data stored in a relational database tables into objects that are more commonly used in application. Code or MS provide a high level abstraction upon a relational database that allows the developer to write Python code. Instead of sequel to create read update and delete data and schemas in their database developers can use the programming language that they are comfortable with comfortable to work with the database instead of writing sequel statements or short procedures.\n</pre></div>\n<p>That's a lot of output. The first part contains the results of the\ntranscription and the confidence in the accuracy of each word transcribed.\nThe second part is just the plain text output from the transcription.</p>\n<p>You can take this now take this base code and add it to any application\nthat needs high quality text-to-speech transcription. If the results\naren't quite good enough for you, check out this tutorial on\n<a href=\"https://docs.assemblyai.com/guides/boosting-accuracy-for-keywords-or-phrases\">boosting accuracy for keywords or phrases</a>\nas well as\n<a href=\"https://docs.assemblyai.com/guides/transcribing-with-a-different-acoustic-or-custom-language-model\">selecting a model that better matches your data</a>.</p>\n<h2>What now?</h2>\n<p>We just finished building a highly accurate transcription application for recordings.</p>\n<p>Next, try out some of these other related Python tutorials:</p>\n<ul>\n<li><a href=\"/blog/transcribe-recordings-speech-text-assemblyai.html\">How to Transcribe Speech Recordings into Text with Python</a></li>\n<li><a href=\"/blog/report-exceptions-python-scripts-sentry.html\">Reporting Exceptions in Python Scripts with Sentry</a></li>\n<li><a href=\"/blog/python-basic-data-types-strings.html\">Basic Data Types in Python: Strings</a></li>\n</ul>\n<p>Questions? Let me know via\n<a href=\"https://github.com/mattmakai/fullstackpython.com/issues\">a GitHub issue ticket on the Full Stack Python repository</a>,\non Twitter\n<a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>\nor <a href=\"https://twitter.com/mattmakai\">@mattmakai</a>.\nIf you see an issue or error in this tutorial, please\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/201009-accurate-twilio-voice-call-recording-transcriptions-assemblyai.markdown\">fork the source repository on GitHub</a>\nand submit a pull request with the fix.</p>\n</div>"},
{"title": "Using Sentry to Handle Python Exceptions in Django Projects", "body": "<div class=\"c9\">\n<p>Web applications built in <a href=\"/django.html\">Django</a> can become sprawlingly complex over time, which is one reason why centralized error handling is important. This tutorial will guide you through adding a free, basic Sentry configuration to a new Django project.</p>\n<p>When we're done, you will be able to view centralized error reports in the Sentry dashboard like you see in this screenshot:</p>\n<p><img src=\"/img/200823-django-sentry/sentry-dashboard.jpg\" width=\"100%\" alt=\"Sentry dashboard with caught Django exceptions.\" class=\"shot rnd outl\"></p>\n<h2>Tutorial Requirements</h2>\n<p>Throughout this tutorial we are going to use the following dependencies,\nwhich we will install in just a moment. Make sure you also have Python 3,\n<a href=\"https://www.python.org/downloads/\">preferrably 3.7 or newer installed</a>,\nin your environment:</p>\n<p>We will use the following dependencies to complete this\ntutorial:</p>\n<ul>\n<li><a href=\"/django.html\">Django</a> <a href=\"/web-frameworks.html\">web framework</a>,\n<a href=\"https://www.djangoproject.com/download/\">version 3.1</a></li>\n<li><a href=\"https://sentry.io/for/python/\">sentry-sdk</a>,\n<a href=\"https://pypi.org/project/sentry-sdk/\">version 0.16.5</a></li>\n</ul>\n<p>All code in this blog post is available open source under the MIT license\non GitHub under the\n<a href=\"https://github.com/fullstackpython/blog-code-examples\">sentry-handle-exceptions-django-projects directory of the blog-code-examples repository</a>.\nUse the source code as you desire for your own projects.</p>\n<h2>Development environment configuration</h2>\n<p>Change into the directory where you keep your Python\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environments</a>.\nCreate a new virtualenv for this project using the following\ncommand.</p>\n<p>Start the Django project by creating a new\n<a href=\"/virtual-environments-virtualenvs-venvs.html\">virtual environment</a>\nusing the following command. I recommend using a separate directory\nsuch as <code>~/venvs/</code> (the tilde is a shortcut for your user's <code>home</code>\ndirectory) so that you always know where all your virtualenvs are\nlocated.</p>\n<div class=\"highlight\"><pre><span></span>python3 -m venv ~/venvs/djsentry\n</pre></div>\n<p>Activate the virtualenv with the <code>activate</code> shell script:</p>\n<div class=\"highlight\"><pre><span></span>source ~/venvs/djsentry/bin/activate\n</pre></div>\n<p>After the above command is executed, the command prompt will\nchange so that the name of the virtualenv is prepended to the\noriginal command prompt format, so if your prompt is simply\n<code>$</code>, it will now look like the following:</p>\n<div class=\"highlight\"><pre><span></span>(djsentry) $\n</pre></div>\n<p>Remember, you have to activate your virtualenv in every new terminal\nwindow where you want to use dependencies in the virtualenv.</p>\n<p>We can now install the <a href=\"https://pypi.org/project/Django/\">Django</a>\npackage into the activated but otherwise empty virtualenv.</p>\n<div class=\"highlight\"><pre><span></span>pip install django==3.1 sentry-sdk==0.16.5\n</pre></div>\n<p>Look for output similar to the following to confirm the appropriate\npackages were installed correctly from PyPI.</p>\n<div class=\"highlight\"><pre><span></span>(djsentry) $ pip install django==3.1 sentry-sdk==0.16.5\nCollecting django\n  Downloading https://files.pythonhosted.org/packages/2b/5a/4bd5624546912082a1bd2709d0edc0685f5c7827a278d806a20cf6adea28/Django-3.1-py3-none-any.whl (7.8MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7.8MB 6.3MB/s \nCollecting sentry-sdk\n  Downloading https://files.pythonhosted.org/packages/f4/4c/49f899856e3a83e02bc88f2c4945aa0bda4f56b804baa9f71e6664a574a2/sentry_sdk-0.16.5-py2.py3-none-any.whl (113kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 122kB 33.7MB/s \nCollecting asgiref~=3.2.10 (from django)\n  Using cached https://files.pythonhosted.org/packages/d5/eb/64725b25f991010307fd18a9e0c1f0e6dff2f03622fc4bcbcdb2244f60d6/asgiref-3.2.10-py3-none-any.whl\nCollecting sqlparse&gt;=0.2.2 (from django)\n  Using cached https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl\nCollecting pytz (from django)\n  Using cached https://files.pythonhosted.org/packages/4f/a4/879454d49688e2fad93e59d7d4efda580b783c745fd2ec2a3adf87b0808d/pytz-2020.1-py2.py3-none-any.whl\nCollecting urllib3&gt;=1.10.0 (from sentry-sdk)\n  Using cached https://files.pythonhosted.org/packages/9f/f0/a391d1463ebb1b233795cabfc0ef38d3db4442339de68f847026199e69d7/urllib3-1.25.10-py2.py3-none-any.whl\nCollecting certifi (from sentry-sdk)\n  Using cached https://files.pythonhosted.org/packages/5e/c4/6c4fe722df5343c33226f0b4e0bb042e4dc13483228b4718baf286f86d87/certifi-2020.6.20-py2.py3-none-any.whl\nInstalling collected packages: asgiref, sqlparse, pytz, django, urllib3, certifi, sentry-sdk\nSuccessfully installed asgiref-3.2.10 certifi-2020.6.20 django-3.1 pytz-2020.1 sentry-sdk-0.16.5 sqlparse-0.3.1 urllib3-1.25.10\n</pre></div>\n<p>We can get started coding the application now that we have all of our\nrequired dependencies installed.</p>\n<h2>Coding the initial application</h2>\n<p>We have everything we need to start building our application.</p>\n<p>We can use the <a href=\"/django.html\">Django</a> <code>django-admin</code> tool to create\nthe boilerplate code structure to get our project started.\nChange into the directory where you develop your applications. For\nexample, I typically use <code>/Users/matt/devel/py/</code> for all of my\nPython projects. Then run the following command to start a Django\nproject named <code>djsentry</code>:</p>\n<div class=\"highlight\"><pre><span></span>django-admin.py startproject djsentry\n</pre></div>\n<p>Note that in this tutorial we are using the same name for both the\nvirtualenv and the Django project directory, but they can be\ndifferent names if you prefer that for organizing your own projects.</p>\n<p>The <code>django-admin</code> command creates a directory named <code>djsentry</code>\nalong with several subdirectories that you should be familiar with\nif you have previously worked with Django.</p>\n<p>Change directories into the new project.</p>\n<div class=\"highlight\"><pre><span></span>cd djsentry\n</pre></div>\n<p>Create a new Django app within <code>djsentry</code>.</p>\n<div class=\"highlight\"><pre><span></span>python manage.py startapp errors\n</pre></div>\n<p>Django will generate a new folder named <code>errors</code> for the project.\nWe should update the URLs so the app is accessible before we write\nour <code>views.py</code> code.</p>\n<p>Open <code>djsentry/djsentry/urls.py</code>. Add the highlighted\nlines so that URL resolver will check the <code>errors</code> app\nfor additional routes to match with URLs that are requested of\nthis Django application.</p>\n<div class=\"highlight\"><pre><span></span># djsentry/djsentry/urls.py\n<span class=\"highlight\">from django.conf.urls import include</span>\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nurlpatterns = [\n<span class=\"highlight\">    path('', include('errors.urls')),</span>\n    path('admin/', admin.site.urls),\n]\n</pre></div>\n<p>Save <code>djsentry/djsentry/urls.py</code> and open\n<code>djsentry/djsentry/settings.py</code>.\nAdd the <code>errors</code> app to <code>settings.py</code> by inserting\nthe highlighted line:</p>\n<div class=\"highlight\"><pre><span></span># djsentry/djsentry/settings.py\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n<span class=\"highlight\">    'errors',</span>\n]\n</pre></div>\n<p>Make sure you change the default <code>DEBUG</code> and <code>SECRET_KEY</code>\nvalues in <code>settings.py</code> before you deploy any code to production. Secure\nyour app properly with the information from the Django\n<a href=\"https://docs.djangoproject.com/en/stable/howto/deployment/checklist/\">production deployment checklist</a>\nso that you do not add your project to the list of hacked applications\non the web.</p>\n<p>Save and close <code>settings.py</code>.</p>\n<p>Next change into the <code>djsentry/errors</code> directory. Create\na new file named <code>urls.py</code> to contain routes for the <code>errors</code> app.</p>\n<p>Add all of these lines to the empty <code>djsentry/errors/urls.py</code>\nfile.</p>\n<div class=\"highlight\"><pre><span></span># djsentry/errors/urls.py\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r<span class=\"s1\">'^$'</span>, views.errors_index, name=\"index\"),\n]\n</pre></div>\n<p>Save <code>djsentry/errors/urls.py</code>. Open\n<code>djsentry/errors/views.py</code> to add the\nfollowing two highlighted lines. You can keep the boilerplate comment\n\"# Create your views here.\" or delete like I usually do.</p>\n<div class=\"highlight\"><pre><span></span># djsentry/errors/views.py\nfrom django.shortcuts import render\n\n\n<span class=\"highlight\">def errors_index(request):</span>\n<span class=\"highlight\">    return render(request, 'index.html', {})</span>\n</pre></div>\n<p>Next, create a directory for your template files named <code>templates</code> under\nthe <code>djmaps/maps</code> app directory.</p>\n<div class=\"highlight\"><pre><span></span>mkdir templates\n</pre></div>\n<p>Create a new file named <code>index.html</code> within\n<code>djsentry/errors/templates</code> that contains the\nfollowing <a href=\"/django-templates.html\">Django template language</a> markup.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;First step for errors<span class=\"p\">&lt;/</span>title&gt;\n  <span class=\"p\">&lt;/</span>head&gt;\n  &lt;body&gt;\n   &lt;h1&gt;Hello, world!<span class=\"p\">&lt;/</span>h1&gt;\n  <span class=\"p\">&lt;/</span>body&gt;\n<span class=\"p\">&lt;/</span>html&gt;\n</pre></div>\n<p>We can test out this static page to make sure all of our code is\ncorrect before we start adding the meat of the functionality to\nthe project. Change into the base directory of your Django project\nwhere the <code>manage.py</code> file is located. Execute the development\nserver with the following command:</p>\n<div class=\"highlight\"><pre><span></span>python manage.py runserver\n</pre></div>\n<p>The Django development server should start up with no issues other than\nan unapplied migrations warning.</p>\n<div class=\"highlight\"><pre><span></span>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nAugust 15, 2020 - 17:26:57\nDjango version 3.1, using settings 'djsentry.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</pre></div>\n<p>Open a web browser and go to <code>localhost:8000</code>.</p>\n<p><img src=\"/img/visuals/first-step.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Plain old HTML page saying 'Hello, world!'.\"></p>\n<p>Our code works, but it sure does not do much yet. Let's add\nsentry-sdk so we can understand how it works.</p>\n<h2>Adding Sentry and the sentry-sdk library</h2>\n<p>We can now add Sentry and test it with a bunch of errors to make sure it\nis working properly.</p>\n<p>Sentry can either be <a href=\"https://github.com/getsentry/onpremise\">self-hosted</a> or\nused as a cloud service through <a href=\"https://sentry.io\">Sentry.io</a>. In this\ntutorial we will use the cloud hosted version because it's faster than\nsetting up your own server as well as free for smaller projects.</p>\n<p>Go to <a href=\"https://sentry.io\">Sentry.io's homepage</a>.</p>\n<p><img src=\"/img/200525-sentry/sentry-homepage.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Sentry.io homepage where you can sign up for a free account.\"></p>\n<p>Sign into your account or sign up for a new free account. You will be at\nthe main account dashboard after logging in or completing the Sentry sign\nup process.</p>\n<p>There are no errors logged on our account dashboard yet, which is as\nexpected because we have not yet connected our account to our Django\nproject.</p>\n<p><img src=\"/img/200525-sentry/sentry-empty-dashboard.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Blank Sentry account dashboard.\"></p>\n<p>Create a new Sentry Project just for this application by clicking\n\"Projects\" in the left sidebar to go to the Projects page.</p>\n<p><img src=\"/img/200525-sentry/create-project.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Button to create a new Sentry project.\"></p>\n<p>On the Projects page, click the \"Create Project\" button in the top right\ncorner of the page.</p>\n<p><img src=\"/img/200525-sentry/create-new-project-screen.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"Create a new Sentry project.\"></p>\n<p>You can either choose \"Django\" or select \"Python\". I usually just choose\n\"Python\" if I do not yet know what framework I'll be using to build my\napplication. Next, give your new Project a name and then press the \"Create\nProject\" button. Our new project is ready to integrate with our Python code.</p>\n<p>We need the unique identifier for our account and project to authorize our\nPython code to send errors to this Sentry instance. The easiest way to get\nwhat we need is to go to the\n<a href=\"https://docs.sentry.io/platforms/python/django/\">Python+Django documentation page</a>\nand read how to configure the SDK.</p>\n<p><img src=\"/img/200525-sentry/python-sentry-quickstart.jpg\" width=\"100%\" class=\"shot rnd outl\" alt=\"The Sentry docs show you exactly what you need to export to connect to your account.\"> </p>\n<p>Copy the string parameter for the <code>init</code> method and set it\n<a href=\"https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html\">as an environment variable</a>\nrather than having it exposed in your project's code.</p>\n<div class=\"highlight\"><pre><span></span>export <span class=\"nv\">SENTRY_DSN</span>='https://yourkeygoeshere.ingest.sentry.io/project-number'\n</pre></div>\n<p><strong>Make sure to replace \"yourkeygoeshere\" with your own unique identifier\nand \"project-number\" with the ID that matches the project you just\ncreated.</strong></p>\n<p>Check that the <code>SENTRY_DSN</code> is set properly in your shell using the <code>echo</code>\ncommand:</p>\n<div class=\"highlight\"><pre><span></span>echo <span class=\"nv\">$SENTRY_DSN</span>\n</pre></div>\n<p>Next, update <code>settings.py</code> with the following highlighted new lines:</p>\n<div class=\"highlight\"><pre><span></span># settings.py\n<span class=\"highlight\">import os</span>\n<span class=\"highlight\">import sentry_sdk</span>\n\nfrom pathlib import Path\n<span class=\"highlight\">from sentry_sdk.integrations.django import DjangoIntegration</span>\n\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve(strict=True).parent.parent\n</pre></div>\n<p>At the bottom of the file after the line with <code>STATIC_URL</code>, add the\nSentry configuration:</p>\n<div class=\"highlight\"><pre><span></span>STATIC_URL = '/static/'\n\n<span class=\"highlight\">sentry_sdk.init(</span>\n<span class=\"highlight\">    dsn=os.getenv('SENTRY_DSN'),</span>\n<span class=\"highlight\">    integrations=[DjangoIntegration()],</span>\n\n<span class=\"highlight\">    # If you wish to associate users to errors (assuming you are using</span>\n<span class=\"highlight\">    # django.contrib.auth) you may enable sending PII data.</span>\n<span class=\"highlight\">    send_default_pii=True</span>\n<span class=\"highlight\">)</span>\n</pre></div>\n<p>Now that we have the configuration in place we can deliberately make some\nerrors happen to test the connection to Sentry's service.</p>\n<h2>Testing Sentry's error catching</h2>\n<p>We'll change some of the existing code to deliberately throw exceptions\nto make sure everything is working properly.</p>\n<p>Start by opening <code>errors/views.py</code> and updating it with one new\nhighlighted line that will automatically throw a generic Exception\nwhen this function is called.</p>\n<div class=\"highlight\"><pre><span></span># djsentry/errors/views.py\nfrom django.shortcuts import render\n\n\ndef errors_index(request):\n<span class=\"highlight\">    raise Exception('testing exception')</span>\n    return render(request, 'index.html', {})\n</pre></div>\n<p>Go to <code>localhost:8000</code> in your browser and you will immediately get this\nexception page when running the development server:</p>\n<p><img src=\"/img/200823-django-sentry/exception-thrown-debug-page.jpg\" width=\"100%\" alt=\"Django development mode debug page when the Exception is raised.\" class=\"shot rnd outl\"></p>\n<p>We can also try out code that does not simply raise an exception but instead\nwill definitely create one when executed, like this division by zero\noperation:</p>\n<div class=\"highlight\"><pre><span></span># djsentry/errors/views.py\nfrom django.shortcuts import render\n\n\ndef errors_index(request):\n<span class=\"highlight\">    division_by_zero = 1 / 0</span>\n    return render(request, 'index.html', {})\n</pre></div>\n<p><img src=\"/img/200823-django-sentry/division-by-zero-exception.jpg\" width=\"100%\" alt=\"Django development mode debug page when the Exception occurs.\" class=\"shot rnd outl\"></p>\n<p>If those exceptions both appear in the Sentry dashboard like this, you're all\nset:</p>\n<p><img src=\"/img/200823-django-sentry/sentry-dashboard.jpg\" width=\"100%\" alt=\"Sentry dashboard with the exceptions that just occurred..\" class=\"shot rnd outl\"></p>\n<p>The above exceptions were just a couple of generic ways to test that everything\nis working to send error information to Sentry. This configuration will\nalso handle the\n<a href=\"https://docs.djangoproject.com/en/stable/ref/exceptions/\">many other Django exceptions</a>\nyou are likely to see when building the rest of your Django project.</p>\n<h2>Additional resources</h2>\n<p>We just finished building a Django project that uses Sentry for\ncentralized error handling.</p>\n<p>Next, try out some of these other related <a href=\"/django.html\">Django</a> tutorials:</p>\n<ul>\n<li><a href=\"/blog/track-daily-user-data-django-user-visit.html\">Tracking Daily User Data in Django with django-user-visit</a></li>\n<li><a href=\"/blog/bootstrap-4-django-template.html\">Quickly Use Bootstrap 4 in a Django Template with a CDN</a></li>\n<li><a href=\"/blog/maps-django-web-applications-projects-mapbox.html\">How to Add Maps to Django Web App Projects with Mapbox</a></li>\n</ul>\n<p>If you have questions or comments about this tutorial, please contact me\nvia Twitter <a href=\"https://twitter.com/fullstackpython\">@fullstackpython</a>, or\non GitHub <a href=\"https://github.com/mattmakai\">@mattmakai</a>.\nSee something wrong with this post? Fork\n<a href=\"https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200823-sentry-handle-exceptions-django-projects.markdown\">this page's source on GitHub</a>\nand submit a pull request.</p>\n</div>"}
]